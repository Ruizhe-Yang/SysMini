pre{
	"------------------ ETL Start!------------------".println();
}

post{
	main();
	"------------------ ETL Over! ------------------".println();
//	for (m in SysMini!LibraryPackage.all){
//		m.declaredName.println();
//	}
	"------------------Print Over.------------------".println();
}

operation main(){
	var rootNamespace = new SysMini!Namespace;
	XMIni!Package.all.first().elementTransform(rootNamespace);
}

operation XMIni!Element elementTransform(rootNode : SysMini!Element){
	for (relationship in self.relationships()){
		switch (relationship.type().name){
		
			//Import
			case "NamespaceImport": relationship.addRelationshipTo(rootNode);
			case "MembershipImport": relationship.addRelationshipTo(rootNode);
			
			//Specialization
			case "Subclassification": relationship.skipRelationshipTo(rootNode);
			case "Subsetting": relationship.skipRelationshipTo(rootNode);
			case "Redefinition": relationship.skipRelationshipTo(rootNode);
			case "ReferenceSubsetting": relationship.skipRelationshipTo(rootNode);
			case "FeatureTyping": relationship.skipRelationshipTo(rootNode);
			case "ConjugatedPortTyping": relationship.skipRelationshipTo(rootNode);
			
			//Feature
			case "TypeFeaturing": relationship.skipRelationshipTo(rootNode);
			
			//Membership
			case "Membership": relationship.skipRelationshipTo(rootNode);
			
			case "ElementFilterMembership": relationship.skipRelationshipTo(rootNode);
			case "OwningMembership": relationship.skipRelationshipTo(rootNode);
			case "FeatureMembership": relationship.skipRelationshipTo(rootNode);
			case "FeatureValue": relationship.skipRelationshipTo(rootNode);
			case "VariantMembership": relationship.skipRelationshipTo(rootNode);
			case "EndFeatureMembership": relationship.skipRelationshipTo(rootNode);
			case "ParameterMembership": relationship.skipRelationshipTo(rootNode);
			case "ResultExpressionMembership": relationship.skipRelationshipTo(rootNode);
			case "RequirementConstraintMembership": relationship.skipRelationshipTo(rootNode);
			case "ObjectiveMembership": relationship.skipRelationshipTo(rootNode);
			case "StateSubactionMembership": relationship.skipRelationshipTo(rootNode);
			case "TransitionFeatureMembership": relationship.skipRelationshipTo(rootNode);
			case "ViewRenderingMembership": relationship.skipRelationshipTo(rootNode);
			case "ReturnParameterMembership": relationship.skipRelationshipTo(rootNode);
			case "SubjectMembership": relationship.skipRelationshipTo(rootNode);
			case "StakeholderMembership": relationship.skipRelationshipTo(rootNode);
			case "ActorMembership": relationship.skipRelationshipTo(rootNode);
			case "FramedConcernMembership": relationship.skipRelationshipTo(rootNode);
			case "RequirementVerificationMembership": relationship.skipRelationshipTo(rootNode);
			
			//Others
			case "Dependency": relationship.addRelationshipTo(rootNode);
			
			case "Annotation": relationship.skipRelationshipTo(rootNode);
			case "FeatureInverting": relationship.skipRelationshipTo(rootNode);
			case "FeatureChaining": relationship.skipRelationshipTo(rootNode);
			case "Conjugation": relationship.skipRelationshipTo(rootNode);
			case "PortConjugation": relationship.skipRelationshipTo(rootNode);
			case "Intersecting": relationship.skipRelationshipTo(rootNode);
			case "Unioning": relationship.skipRelationshipTo(rootNode);
			case "Disjoining": relationship.skipRelationshipTo(rootNode);
			case "Differencing": relationship.skipRelationshipTo(rootNode);
			case "MultiplicityRange": relationship.skipRelationshipTo(rootNode);
			case "Multiplicity": relationship.skipRelationshipTo(rootNode);
			
		}
	}
}

operation XMIni!Relationship relationshipTransform(rootNode : SysMini!Element){
	for (element in self.elements()){
		switch (element.type().name){
		
			//Package
			case "Package": element.addNodeTo(rootNode);
			case "LibraryPackage": element.addNodeTo(rootNode);
			
			//AnnotatingElement
			case "Comment": element.addNodeTo(rootNode);
			case "TextualRepresentation": element.addNodeTo(rootNode);
			case "Documentation": element.addNodeTo(rootNode);
			
			//ItemFeature
			case "ItemFeature": element.addNodeTo(rootNode);
			//ItemFeature
			case "ItemFlowEnd": element.addNodeTo(rootNode);
			
			//Definition
			case "OccurrenceDefinition": element.addNodeTo(rootNode);
			case "AttributeDefinition": element.addNodeTo(rootNode);
			case "ItemDefinition": element.addNodeTo(rootNode);
			case "PortDefinition": element.addNodeTo(rootNode);
			case "ActionDefinition": element.addNodeTo(rootNode);
			case "EnumerationDefinition": element.addNodeTo(rootNode);
			case "PartDefinition": element.addNodeTo(rootNode);
			case "MetadataDefinition": element.addNodeTo(rootNode);
			case "ConjugatedPortDefinition": element.addNodeTo(rootNode);
			case "CalculationDefinition": element.addNodeTo(rootNode);
			case "StateDefinition": element.addNodeTo(rootNode);
			case "ConnectionDefinition": element.addNodeTo(rootNode);
			case "ViewDefinition": element.addNodeTo(rootNode);
			case "RenderingDefinition": element.addNodeTo(rootNode);
			case "CaseDefinition": element.addNodeTo(rootNode);
			case "FlowConnectionDefinition": element.addNodeTo(rootNode);
			case "InterfaceDefinition": element.addNodeTo(rootNode);
			case "AllocationDefinition": element.addNodeTo(rootNode);
			case "AnalysisCaseDefinition": element.addNodeTo(rootNode);
			case "VerificationCaseDefinition": element.addNodeTo(rootNode);
			case "UseCaseDefinition": element.addNodeTo(rootNode);
			case "ConstraintDefinition": element.addNodeTo(rootNode);
			case "RequirementDefinition": element.addNodeTo(rootNode);
			case "ConcernDefinition": element.addNodeTo(rootNode);
			case "ViewpointDefinition": element.addNodeTo(rootNode);
			
			//Usage
			case "OccurrenceUsage": element.addNodeTo(rootNode);
			case "ReferenceUsage": element.addNodeTo(rootNode);
			case "AttributeUsage": element.addNodeTo(rootNode);
			case "SuccessionAsUsage": element.addNodeTo(rootNode);
			case "BindingConnectorAsUsage": element.addNodeTo(rootNode);
			case "ItemUsage": element.addNodeTo(rootNode);
			case "ActionUsage": element.addNodeTo(rootNode);
			case "PortUsage": element.addNodeTo(rootNode);
			case "EventOccurrenceUsage": element.addNodeTo(rootNode);
			case "EnumerationUsage": element.addNodeTo(rootNode);
			case "PartUsage": element.addNodeTo(rootNode);
			case "MetadataUsage": element.addNodeTo(rootNode);
			case "StateUsage": element.addNodeTo(rootNode);
			case "TransitionUsage": element.addNodeTo(rootNode);
			case "AcceptActionUsage": element.addNodeTo(rootNode);
			case "CalculationUsage": element.addNodeTo(rootNode);
			case "PerformActionUsage": element.addNodeTo(rootNode);
			case "SendActionUsage": element.addNodeTo(rootNode);
			case "IfActionUsage": element.addNodeTo(rootNode);
			case "AssignmentActionUsage": element.addNodeTo(rootNode);
			case "ConnectionUsage": element.addNodeTo(rootNode);
			case "ViewUsage": element.addNodeTo(rootNode);
			case "RenderingUsage": element.addNodeTo(rootNode);
			case "ExhibitStateUsage": element.addNodeTo(rootNode);
			case "CaseUsage": element.addNodeTo(rootNode);
			case "WhileLoopActionUsage": element.addNodeTo(rootNode);
			case "ForLoopActionUsage": element.addNodeTo(rootNode);
			case "DecisionNode": element.addNodeTo(rootNode);
			case "ForkNode": element.addNodeTo(rootNode);
			case "MergeNode": element.addNodeTo(rootNode);
			case "JoinNode": element.addNodeTo(rootNode);
			case "FlowConnectionUsage": element.addNodeTo(rootNode);
			case "InterfaceUsage": element.addNodeTo(rootNode);
			case "AllocationUsage": element.addNodeTo(rootNode);
			case "AnalysisCaseUsage": element.addNodeTo(rootNode);
			case "VerificationCaseUsage": element.addNodeTo(rootNode);
			case "UseCaseUsage": element.addNodeTo(rootNode);
			case "SuccessionFlowConnectionUsage": element.addNodeTo(rootNode);
			case "IncludeUseCaseUsage": element.addNodeTo(rootNode);
			
			case "ConstraintUsage": element.addNodeTo(rootNode);
			case "RequirementUsage": element.addNodeTo(rootNode);
			case "AssertConstraintUsage": element.addNodeTo(rootNode);
			case "ConcernUsage": element.addNodeTo(rootNode);
			case "ViewpointUsage": element.addNodeTo(rootNode);
			case "SatisfyRequirementUsage": element.addNodeTo(rootNode);
			
			//Others
			case "Classifier": element.addNodeTo(rootNode);
			case "Feature": element.addNodeTo(rootNode);
		}
	}
}


operation XMIni!Relationship addRelationshipTo(rootNode : SysMini!Element){
	rootNode.body.add(self.equivalent());
	self.relationshipTransform(rootNode);
}

operation XMIni!Relationship skipRelationshipTo(rootNode : SysMini!Element){
	self.relationshipTransform(rootNode);
}

operation XMIni!Element addNodeTo(rootNode : SysMini!Element){
	var node = self.equivalent();
	rootNode.body.add(node);
	self.elementTransform(node);
}

operation XMIni!Element relationships(){
	return self.ownedRelationship;
}

operation XMIni!Relationship elements(){
	return self.ownedRelatedElement;
}

operation XMIni!Element isTypeOf(str : String){
	return (self.type().name == str);
}

operation SysMini!Element setVisibility(s: XMIni!Element){
	self.hasVisibility = true;
	switch (s.visibility.value.asString()){
		case "0": self.visibility = SysMini!VisibilityKind#private;
		case "1": self.visibility = SysMini!VisibilityKind#protected;
		case "2": self.visibility = SysMini!VisibilityKind#public;
	}
}

operation SysMini!Element setPortionKind(s: XMIni!Element){
	switch (s.portionKind.value.asString()){
		case "0": self.portionKind = SysMini!PortionKind#timeslice;
		case "1": self.portionKind = SysMini!PortionKind#snapshot;
	}
}

operation OrderedSet getElementOf(typeName : String){
	return self.select(e|e.type().name == typeName);
}


//Element
@abstract
rule ElementRule
	transform s : XMIni!Element
	to t : SysMini!Element {
		t.declaredName = s.declaredName;
		t.declaredShortName = s.declaredShortName;
	}

@abstract
rule PrefixMetadataAnnotation
	transform s : XMIni!Element
	to t : SysMini!Element
	extends PrefixMetadataUsage{
	}

@abstract
rule PrefixMetadataMember
	transform s : XMIni!Element
	to t : SysMini!Element
	extends PrefixMetadataUsage{
	}
	
@abstract
rule BasicDefinitionPrefix
	transform s : XMIni!Definition
	to t : SysMini!Definition{
		t.isAbstract = s.isAbstract;
		t.isVariation = s.isVariation;
	}

@abstract
rule DefinitionExtensionKeyword
	transform s : XMIni!Definition
	to t : SysMini!Definition{
	}
	
@abstract
rule DefinitionPrefix
	transform s : XMIni!Definition
	to t : SysMini!Definition
	extends BasicDefinitionPrefix, DefinitionExtensionKeyword{
	}

@abstract
rule Identification
	transform s : XMIni!Element
	to t : SysMini!Element
	extends ElementRule{
	}

@abstract
rule SubclassificationPart
	transform s : XMIni!Classifier
	to t : SysMini!Classifier{
	}
	
@abstract
rule DefinitionDeclaration
	transform s : XMIni!Definition
	to t : SysMini!Definition
	extends Identification, SubclassificationPart{
	}

@abstract
rule DefinitionBody
	transform s : XMIni!Type
	to t : SysMini!Type{
	}
	
@abstract
rule Definition
	transform s : XMIni!Definition
	to t : SysMini!Definition
	extends DefinitionDeclaration, DefinitionBody{
	}
	
@abstract
rule AttributeDefinition
	transform s : XMIni!AttributeDefinition
	to t : SysMini!AttributeDefinition
	extends DefinitionPrefix, Definition{
	}


@abstract
rule PartDefinition
	transform s : XMIni!PartDefinition
	to t : SysMini!PartDefinition
	extends OccurrenceDefinitionPrefix, Definition{
	}

@abstract
rule PortDefinition
	transform s : XMIni!PortDefinition
	to t : SysMini!PortDefinition
	extends DefinitionPrefix, Definition, ConjugatedPortDefinitionMember{
	}

@abstract
rule ConjugatedPortDefinitionMember
	transform s : XMIni!Definition
	to t : SysMini!Definition{
	}
	
@abstract
rule OccurrenceDefinitionPrefix
	transform s : XMIni!OccurrenceDefinition
	to t : SysMini!OccurrenceDefinition
	extends BasicDefinitionPrefix, LifeClassMembership, DefinitionExtensionKeyword{
		t.isIndividual = s.isIndividual;
	}

@abstract
rule LifeClassMembership
	transform s : XMIni!OccurrenceDefinition
	to t : SysMini!OccurrenceDefinition{
		for (ownedRelationship in s.ownedRelationship.getElementOf("OwningMembership")){
			for (lifeClass in ownedRelationship.ownedRelatedElement.getElementOf("LifeClass")){
				lifeClass.println();
//				lifeClass.println();
			}
		}
	}
	
//PrefixMetadataUsage
@abstract
rule PrefixMetadataUsage
	transform s : XMIni!Element
	to t : SysMini!Element{
//		for (e in s.ownedRelationship.getElementOf("OwningMembership")){
//			for (metadataUsage in e.ownedRelatedElement.getElementOf("MetadataUsage")){
//				s.println();
//				"//".println();
//				for (m in metadataUsage.ownedRelationship){
//					"--------------".println();
//					m.println();
//					m.declaredName.println();
//				}
//				"--------------".println();
//				var featureTyping = metadataUsage.ownedRelationship.getElementOf("FeatureTyping").first();
////				featureTyping.println();
//				if (metadataUsage.ownedRelationship.size() == 2 and featureTyping.declaredName != null){
//					t.prefixMetadata = "#" + featureTyping.declaredName;
//				}
//				else{
//					featureTyping.println();
////					t.prefixMetadata = "#" + featureTyping.type.declaredName;
//				}
//				t.prefixMetadata.println();
//			}
//		}
	}
	
//Import
@abstract
rule ImportRule
	transform s : XMIni!Import
	to t : SysMini!Import 
	extends ElementRule{
		t.setVisibility(s);
		t.isImportAll = s.isImportAll;
		t.isRecursive = s.isRecursive;
	}
	


//Definition
@abstract
rule DefinitionRule
	transform s : XMIni!Definition
	to t : SysMini!Definition
	extends ElementRule, PrefixMetadataMember{
		t.isAbstract = s.isAbstract;
		t.isVariation = s.isVariation;
//		if (s.ownedRelationship != null){
//          for (prefixMetadataMember in s.ownedRelationship){
// TODO: prefixMetadataMember
//					}
//				}
	}


//Usage
@abstract
rule UsageRule
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends ElementRule, PrefixMetadataMember{
	}
	
operation SysMini!Usage setFeatureDirection(s: XMIni!Usage){
	switch (s.direction.value.asString()){
//		case "0": self.direction = SysMini!FeatureDirectionKind#in;
		case "1": self.direction = SysMini!FeatureDirectionKind#inout;
		case "2": self.direction = SysMini!FeatureDirectionKind#out;
	}
}
@abstract
rule RefPrefix
	transform s : XMIni!Usage
	to t : SysMini!Usage{
		t.setFeatureDirection(s);
		t.isAbstract = s.isAbstract;
		t.isVariation = s.isVariation;
		t.isReadOnly = s.isReadOnly;
		t.isDerived = s.isDerived;
		t.isEnd = s.isEnd;
	}
	
@abstract
rule BasicUsagePrefix
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends RefPrefix{
		t.isReference = s.isReference;
	}
	
@abstract
rule UsageExtensionKeyword
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends PrefixMetadataMember{
	}
	
@abstract
rule UsagePrefix
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends BasicUsagePrefix, UsageExtensionKeyword{
	}
	
@abstract
rule Usage
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends UsageDeclaration, UsageCompletion{
	}
	
@abstract
rule UsageCompletion
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends ValuePart, UsageBody{
	}
	
@abstract
rule ValuePart
	transform s : XMIni!Feature
	to t : SysMini!Feature{
	}
	
@abstract
rule UsageBody
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends DefinitionBody{
	}
	
@abstract
rule UsageDeclaration
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends FeatureDeclaration{
	}
	
@abstract
rule FeatureDeclaration
	transform s : XMIni!Feature
	to t : SysMini!Feature
	extends Identification, FeatureSpecializationPart{
	}
	
@abstract
rule FeatureSpecializationPart
	transform s : XMIni!Feature
	to t : SysMini!Feature
	extends MultiplicityPart, FeatureSpecialization{
	}
	
@abstract
rule MultiplicityPart
	transform s : XMIni!Feature
	to t : SysMini!Feature{
		t.isOrdered = s.isOrdered;
		t.isNonunique = s.isNonunique;
		t.multiplicityRange = s.getMultiplicityRange();
	}

operation XMIni!Feature getMultiplicityRange(){
	for (owningMembership in self.ownedRelationship.getElementOf("OwningMembership")){
		for (element in owningMembership.ownedRelatedElement){
			if (element.isTypeOf("MultiplicityRange")){
				for (e in element.ownedRelationship.getElementOf("OwningMembership")){
					if (e.ownedRelatedElement.size() == 1 and e.ownedRelatedElement.first().isTypeOf("LiteralInteger")){
						return "["+e.ownedRelatedElement.first().value.asString()+"]";
					}
					else if (e.ownedRelatedElement.size() == 1 and e.ownedRelatedElement.first().isTypeOf("LiteralInfinity")){
						return "[*]";
					}
					else if (e.ownedRelatedElement.size() == 2 and e.ownedRelatedElement.second().isTypeOf("LiteralInteger")){
						return "["+e.ownedRelatedElement.first().value.asString()+".."+e.ownedRelatedElement.second().value.asString()+"]";
					}
					else if (e.ownedRelatedElement.size() == 2 and e.ownedRelatedElement.second().isTypeOf("LiteralInfinity")){
						return "["+e.ownedRelatedElement.first().value.asString()+"..*]";
					}
				}
			}
		}
	}
}

@abstract
rule FeatureSpecialization 
	transform s : XMIni!Feature
	to t : SysMini!Feature{
		t.featureSpecialization = s.getFeatureSpecialization();

	}
	
operation XMIni!Feature getFeatureSpecialization(){ //380
	for (owningMembership in self.ownedRelationship.first()){
		switch (owningMembership.type().name){
			case "FeatureTyping":{
				return ": "+owningMembership.getDeclaredName();
			}
			case "Subsetting":{
				return ":> "+owningMembership.getDeclaredName();
			}
			case "OwnedReferenceSubsetting":{
				return "::> "+owningMembership.getDeclaredName();			
			}
			case "Redefinition":{
				return ":>> "+owningMembership.getDeclaredName();
			}
//			case "OwningMembership":{
//				owningMembership.ownedRelationship.println();
//			}
		}
	}
}

operation XMIni!Specialization getDeclaredName(){
	if (self.declaredName != null){
		return self.declaredName;
	}
	else if (self.type.name == null){
		return self.type.declaredName;
	}
}

@abstract
rule AttributeUsage
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends UsagePrefix, Usage{
	}

@abstract
rule PortUsage
	transform s : XMIni!PortUsage
	to t : SysMini!PortUsage
	extends OccurrenceUsagePrefix, Usage{
	}

@abstract
rule PartUsage
	transform s : XMIni!PartUsage
	to t : SysMini!PartUsage
	extends OccurrenceUsagePrefix, Usage{
	}
	
@abstract
rule OccurrenceUsagePrefix
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends BasicUsagePrefix, UsageExtensionKeyword{
		t.isIndividual = s.isIndividual;
		t.setPortionKind(s);
	}


	
//AnnotatingElement
@abstract
rule AnnotatingElementRule
	transform s : XMIni!AnnotatingElement
	to t : SysMini!AnnotatingElement{
	}



	
/* @lazy */

@lazy
rule NamespaceImportRule
	transform s : XMIni!NamespaceImport
	to t : SysMini!NamespaceImport 
	extends ImportRule{
		if (s.declaredName == null){
			if (s.importedNamespace != null){
				t.declaredName = s.importedNamespace.declaredName;
			}
			else if(s.ownedRelationship != null){
//				for (r in s.ownedRelationship){
// TODO: FilterPackage
//				}
			}
		}
		var n = t.declaredName.split("::");
		if (n.size() == 2){
			if (n.first() == n.second()){
				t.declaredName = n.first()+"::*";
			}
		}
	}

@lazy
rule MembershipImportRule
	transform s : XMIni!MembershipImport
	to t : SysMini!MembershipImport 
	extends ImportRule{
		if (s.importedMembership != null){
			t.declaredName = s.importedMembership.eContents().first().declaredName;
		}
	}
	
//Package
@lazy
rule PackageRule
	transform s : XMIni!Package
	to t : SysMini!Package 
	extends ElementRule{
//				if (s.ownedRelationship != null){
//                  for (prefixMetadataMember in s.ownedRelationship){
// TODO: prefixMetadataMember
//					}
//				}
	}

//Package
@lazy
rule DependencyRule
	transform s : XMIni!Dependency
	to t : SysMini!Dependency 
	extends ElementRule{
//				if (s.ownedRelationship != null){
//                  for (prefixMetadataMember in s.ownedRelationship){
// TODO: prefixMetadataMember
//					}
//				}
	}
	
//Package
@lazy
rule LibraryPackageRule
	transform s : XMIni!LibraryPackage
	to t : SysMini!LibraryPackage 
	extends PackageRule{
		t.isStandard = s.isStandard;
	}
	
@lazy
rule CommentRule
	transform s : XMIni!Comment
	to t : SysMini!Comment
	extends AnnotatingElementRule{
		if (s.body != null){
			t.sysmini_self = s.body;	
		}
	}

@lazy
rule TextualRepresentationRule
	transform s : XMIni!TextualRepresentation
	to t : SysMini!TextualRepresentation
	extends AnnotatingElementRule{
		if (s.body != null){
			t.sysmini_self = s.body;	
		}
	}
	
@lazy
rule DocumentationRule
	transform s : XMIni!Documentation
	to t : SysMini!Documentation
	extends AnnotatingElementRule{
		if (s.body != null){
			t.sysmini_self = s.body;	
		}
	}

//ItemFeature
@lazy
rule ItemFeatureRule
	transform s : XMIni!ItemFeature
	to t : SysMini!ItemFeature{
	}

//ItemFlowEnd
@lazy
rule ItemFlowEndRule
	transform s : XMIni!ItemFlowEnd
	to t : SysMini!ItemFlowEnd{
	}

	
	
@lazy
rule OccurrenceDefinitionRule
	transform s : XMIni!OccurrenceDefinition
	to t : SysMini!OccurrenceDefinition 
	extends DefinitionRule{
	}
	
@lazy
rule AttributeDefinitionRule
	transform s : XMIni!AttributeDefinition
	to t : SysMini!AttributeDefinition 
	extends AttributeDefinition{
	}

@lazy
rule ItemDefinitionRule
	transform s : XMIni!ItemDefinition
	to t : SysMini!ItemDefinition 
	extends DefinitionRule{
	}

@lazy
rule PortDefinitionRule
	transform s : XMIni!PortDefinition
	to t : SysMini!PortDefinition 
	extends PortDefinition{
	}

@lazy
rule ActionDefinitionRule
	transform s : XMIni!ActionDefinition
	to t : SysMini!ActionDefinition 
	extends DefinitionRule{
	}

@lazy
rule EnumerationDefinitionRule
	transform s : XMIni!EnumerationDefinition
	to t : SysMini!EnumerationDefinition 
	extends DefinitionRule{
	}

@lazy
rule PartDefinitionRule
	transform s : XMIni!PartDefinition
	to t : SysMini!PartDefinition 
	extends PartDefinition{
	}

@lazy
rule MetadataDefinitionRule
	transform s : XMIni!MetadataDefinition
	to t : SysMini!MetadataDefinition 
	extends DefinitionRule{
	}

@lazy
rule ConjugatedPortDefinitionRule
	transform s : XMIni!ConjugatedPortDefinition
	to t : SysMini!ConjugatedPortDefinition 
	extends DefinitionRule{
	}

@lazy
rule CalculationDefinitionRule
	transform s : XMIni!CalculationDefinition
	to t : SysMini!CalculationDefinition 
	extends DefinitionRule{
	}

@lazy
rule StateDefinitionRule
	transform s : XMIni!StateDefinition
	to t : SysMini!StateDefinition 
	extends DefinitionRule{
	}

@lazy
rule ConnectionDefinitionRule
	transform s : XMIni!ConnectionDefinition
	to t : SysMini!ConnectionDefinition 
	extends DefinitionRule{
	}

@lazy
rule ViewDefinitionRule
	transform s : XMIni!ViewDefinition
	to t : SysMini!ViewDefinition 
	extends DefinitionRule{
	}

@lazy
rule RenderingDefinitionRule
	transform s : XMIni!RenderingDefinition
	to t : SysMini!RenderingDefinition 
	extends DefinitionRule{
	}

@lazy
rule CaseDefinitionRule
	transform s : XMIni!CaseDefinition
	to t : SysMini!CaseDefinition 
	extends DefinitionRule{
	}

@lazy
rule FlowConnectionDefinitionRule
	transform s : XMIni!FlowConnectionDefinition
	to t : SysMini!FlowConnectionDefinition 
	extends DefinitionRule{
	}

@lazy
rule InterfaceDefinitionRule
	transform s : XMIni!InterfaceDefinition
	to t : SysMini!InterfaceDefinition 
	extends DefinitionRule{
	}

@lazy
rule AllocationDefinitionRule
	transform s : XMIni!AllocationDefinition
	to t : SysMini!AllocationDefinition 
	extends DefinitionRule{
	}
	
@lazy
rule AnalysisCaseDefinitionRule
	transform s : XMIni!AnalysisCaseDefinition
	to t : SysMini!AnalysisCaseDefinition 
	extends DefinitionRule{
	}
	
@lazy
rule VerificationCaseDefinitionRule
	transform s : XMIni!VerificationCaseDefinition
	to t : SysMini!VerificationCaseDefinition 
	extends DefinitionRule{
	}
	
@lazy
rule UseCaseDefinitionRule
	transform s : XMIni!UseCaseDefinition
	to t : SysMini!UseCaseDefinition 
	extends DefinitionRule{
	}

@lazy
rule ConstraintDefinitionRule
	transform s : XMIni!ConstraintDefinition
	to t : SysMini!ConstraintDefinition 
	extends DefinitionRule{
	}

@lazy
rule RequirementDefinitionRule
	transform s : XMIni!RequirementDefinition
	to t : SysMini!RequirementDefinition 
	extends DefinitionRule{
	}

@lazy
rule ConcernDefinitionRule
	transform s : XMIni!ConcernDefinition
	to t : SysMini!ConcernDefinition 
	extends DefinitionRule{
	}

@lazy
rule ViewpointDefinitionRule
	transform s : XMIni!ViewpointDefinition
	to t : SysMini!ViewpointDefinition 
	extends DefinitionRule{
	}
		
@lazy
rule OccurrenceUsageRule
	transform s : XMIni!OccurrenceUsage
	to t : SysMini!OccurrenceUsage
	extends UsageRule{
	}

@lazy
rule ReferenceUsageRule
	transform s : XMIni!ReferenceUsage
	to t : SysMini!ReferenceUsage
	extends UsageRule{
	}
	
@lazy
rule AttributeUsageRule
	transform s : XMIni!AttributeUsage
	to t : SysMini!AttributeUsage
	extends AttributeUsage{
	}

@lazy
rule SuccessionAsUsageRule
	transform s : XMIni!SuccessionAsUsage
	to t : SysMini!SuccessionAsUsage
	extends UsageRule{
	}
	
@lazy
rule BindingConnectorAsUsageRule
	transform s : XMIni!BindingConnectorAsUsage
	to t : SysMini!BindingConnectorAsUsage
	extends UsageRule{
	}
	
@lazy
rule ItemUsageRule
	transform s : XMIni!ItemUsage
	to t : SysMini!ItemUsage
	extends UsageRule{
	}
	
@lazy
rule ActionUsageRule
	transform s : XMIni!ActionUsage
	to t : SysMini!ActionUsage
	extends UsageRule{
	}
	
@lazy
rule PortUsageRule
	transform s : XMIni!PortUsage
	to t : SysMini!PortUsage
	extends PortUsage{
	}
	
@lazy
rule EventOccurrenceUsageRule
	transform s : XMIni!EventOccurrenceUsage
	to t : SysMini!EventOccurrenceUsage
	extends UsageRule{
	}
	
@lazy
rule EnumerationUsageRule
	transform s : XMIni!EnumerationUsage
	to t : SysMini!EnumerationUsage
	extends UsageRule{
	}
	
@lazy
rule PartUsageRule
	transform s : XMIni!PartUsage
	to t : SysMini!PartUsage
	extends PartUsage{
	}
	
@lazy
rule MetadataUsageRule
	transform s : XMIni!MetadataUsage
	to t : SysMini!MetadataUsage
	extends UsageRule{
	}
	
@lazy
rule StateUsageRule
	transform s : XMIni!StateUsage
	to t : SysMini!StateUsage
	extends UsageRule{
	}
	
@lazy
rule TransitionUsageRule
	transform s : XMIni!TransitionUsage
	to t : SysMini!TransitionUsage
	extends UsageRule{
	}
	
@lazy
rule AcceptActionUsageRule
	transform s : XMIni!AcceptActionUsage
	to t : SysMini!AcceptActionUsage
	extends UsageRule{
	}
	
@lazy
rule CalculationUsageRule
	transform s : XMIni!CalculationUsage
	to t : SysMini!CalculationUsage
	extends UsageRule{
	}
	
@lazy
rule PerformActionUsageRule
	transform s : XMIni!PerformActionUsage
	to t : SysMini!PerformActionUsage
	extends UsageRule{
	}
	
@lazy
rule SendActionUsageRule
	transform s : XMIni!SendActionUsage
	to t : SysMini!SendActionUsage
	extends UsageRule{
	}
	
@lazy
rule IfActionUsageRule
	transform s : XMIni!IfActionUsage
	to t : SysMini!IfActionUsage
	extends UsageRule{
	}
	
@lazy
rule AssignmentActionUsageRule
	transform s : XMIni!AssignmentActionUsage
	to t : SysMini!AssignmentActionUsage
	extends UsageRule{
	}
	
@lazy
rule ConnectionUsageRule
	transform s : XMIni!ConnectionUsage
	to t : SysMini!ConnectionUsage
	extends UsageRule{
	}
	
@lazy
rule ViewUsageRule
	transform s : XMIni!ViewUsage
	to t : SysMini!ViewUsage
	extends UsageRule{
	}
	
@lazy
rule RenderingUsageRule
	transform s : XMIni!RenderingUsage
	to t : SysMini!RenderingUsage
	extends UsageRule{
	}
	
@lazy
rule ExhibitStateUsageRule
	transform s : XMIni!ExhibitStateUsage
	to t : SysMini!ExhibitStateUsage
	extends UsageRule{
	}
	
@lazy
rule CaseUsageRule
	transform s : XMIni!CaseUsage
	to t : SysMini!CaseUsage
	extends UsageRule{
	}
	
@lazy
rule WhileLoopActionUsageRule
	transform s : XMIni!WhileLoopActionUsage
	to t : SysMini!WhileLoopActionUsage
	extends UsageRule{
	}
	
@lazy
rule ForLoopActionUsageRule
	transform s : XMIni!ForLoopActionUsage
	to t : SysMini!ForLoopActionUsage
	extends UsageRule{
	}
	
@lazy
rule DecisionNodeRule
	transform s : XMIni!DecisionNode
	to t : SysMini!DecisionNode
	extends UsageRule{
	}
	
@lazy
rule ForkNodeRule
	transform s : XMIni!ForkNode
	to t : SysMini!ForkNode
	extends UsageRule{
	}
	
@lazy
rule MergeNodeRule
	transform s : XMIni!MergeNode
	to t : SysMini!MergeNode
	extends UsageRule{
	}
	
@lazy
rule JoinNodeRule
	transform s : XMIni!JoinNode
	to t : SysMini!JoinNode
	extends UsageRule{
	}
	
@lazy
rule FlowConnectionUsageRule
	transform s : XMIni!FlowConnectionUsage
	to t : SysMini!FlowConnectionUsage
	extends UsageRule{
	}
	
@lazy
rule InterfaceUsageRule
	transform s : XMIni!InterfaceUsage
	to t : SysMini!InterfaceUsage
	extends UsageRule{
	}
	
@lazy
rule AllocationUsageRule
	transform s : XMIni!AllocationUsage
	to t : SysMini!AllocationUsage
	extends UsageRule{
	}
	
@lazy
rule AnalysisCaseUsageRule
	transform s : XMIni!AnalysisCaseUsage
	to t : SysMini!AnalysisCaseUsage
	extends UsageRule{
	}
	
@lazy
rule VerificationCaseUsageRule
	transform s : XMIni!VerificationCaseUsage
	to t : SysMini!VerificationCaseUsage
	extends UsageRule{
	}
	
@lazy
rule UseCaseUsageRule
	transform s : XMIni!UseCaseUsage
	to t : SysMini!UseCaseUsage
	extends UsageRule{
	}
	
@lazy
rule SuccessionFlowConnectionUsageRule
	transform s : XMIni!SuccessionFlowConnectionUsage
	to t : SysMini!SuccessionFlowConnectionUsage
	extends UsageRule{
	}
	
@lazy
rule IncludeUseCaseUsageRule
	transform s : XMIni!IncludeUseCaseUsage
	to t : SysMini!IncludeUseCaseUsage
	extends UsageRule{
	}
	
@lazy
rule ConstraintUsageUsageRule
	transform s : XMIni!ConstraintUsage
	to t : SysMini!ConstraintUsage
	extends UsageRule{
	}
	
@lazy
rule RequirementUsageRule
	transform s : XMIni!RequirementUsage
	to t : SysMini!RequirementUsage
	extends UsageRule{
	}
	
@lazy
rule AssertConstraintUsageRule
	transform s : XMIni!AssertConstraintUsage
	to t : SysMini!AssertConstraintUsage
	extends UsageRule{
	}
	
@lazy
rule ConcernUsageRule
	transform s : XMIni!ConcernUsage
	to t : SysMini!ConcernUsage
	extends UsageRule{
	}
	
@lazy
rule ViewpointUsageRule
	transform s : XMIni!ViewpointUsage
	to t : SysMini!ViewpointUsage
	extends UsageRule{
	}
	
@lazy
rule SatisfyRequirementUsageRule
	transform s : XMIni!SatisfyRequirementUsage
	to t : SysMini!SatisfyRequirementUsage
	extends UsageRule{
	}

@lazy
rule ClassifierRule
	transform s : XMIni!Classifier
	to t : SysMini!Classifier{
	}
	
@lazy
rule FeatureRule
	transform s : XMIni!Feature
	to t : SysMini!Feature{
	}

