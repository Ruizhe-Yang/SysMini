import "XMIni2SysMini-util.eol";

pre{
	"------------------ ETL Start ------------------".println();
	var allImportPackages = new Sequence;
	main();
}

post{
	"------------------ ETL Over  ------------------".println();
}

operation main(){
	init();
	var rootNamespace = new SysMini!Namespace;
	XMIni!Package.all.first().addNodeTo(rootNamespace);
}

operation XMIni!Element elementTransform(rootNode : SysMini!Element){
	for (relationship in self.ownedRelationship){
		switch (relationship.type().name){
			
			//Relationship Entity
			case "NamespaceImport":                    relationship.addRelationshipTo(rootNode);
			case "MembershipImport":                   relationship.addRelationshipTo(rootNode);
			case "NamespaceExpose":                    relationship.addRelationshipTo(rootNode);
			case "MembershipExpose":                   relationship.addRelationshipTo(rootNode);
			case "ElementFilterMembership":            relationship.addRelationshipTo(rootNode);
			case "Membership":                         relationship.addRelationshipTo(rootNode);
			
			//Specialization
			case "Subclassification":                  relationship.skipRelationshipTo(rootNode);
			case "Subsetting":                         relationship.skipRelationshipTo(rootNode);
			case "Redefinition":                       relationship.skipRelationshipTo(rootNode);
			case "ReferenceSubsetting":                relationship.skipRelationshipTo(rootNode);
			case "FeatureTyping":                      relationship.skipRelationshipTo(rootNode);
			case "ConjugatedPortTyping":               relationship.skipRelationshipTo(rootNode);
			
			//Feature
			case "TypeFeaturing":                      relationship.skipRelationshipTo(rootNode);
			
			//Membership
			case "OwningMembership":                   relationship.skipRelationshipTo(rootNode);
			case "FeatureMembership":                  relationship.skipRelationshipTo(rootNode);
			case "FeatureValue":                       relationship.skipRelationshipTo(rootNode);
			case "VariantMembership":                  relationship.skipRelationshipTo(rootNode);
			case "EndFeatureMembership":               relationship.skipRelationshipTo(rootNode);
			case "ParameterMembership":                relationship.skipRelationshipTo(rootNode);
			case "ResultExpressionMembership":         relationship.skipRelationshipTo(rootNode);
			case "ReturnParameterMembership":          relationship.skipRelationshipTo(rootNode);
			case "RequirementConstraintMembership":    relationship.skipRelationshipTo(rootNode);
			case "ObjectiveMembership":                relationship.skipRelationshipTo(rootNode);
			case "StateSubactionMembership":           relationship.skipRelationshipTo(rootNode);
			case "TransitionFeatureMembership":        relationship.skipRelationshipTo(rootNode);
			case "ViewRenderingMembership":            relationship.skipRelationshipTo(rootNode);
			case "SubjectMembership":                  relationship.skipRelationshipTo(rootNode);
			case "StakeholderMembership":              relationship.skipRelationshipTo(rootNode);
			case "ActorMembership":                    relationship.skipRelationshipTo(rootNode);
			case "FramedConcernMembership":            relationship.skipRelationshipTo(rootNode);
			case "RequirementVerificationMembership":  relationship.skipRelationshipTo(rootNode);
			
			//Others
			case "Annotation":                         relationship.skipRelationshipTo(rootNode);
			case "FeatureInverting":                   relationship.skipRelationshipTo(rootNode);
			case "FeatureChaining":                    relationship.skipRelationshipTo(rootNode);
			case "Conjugation":                        relationship.skipRelationshipTo(rootNode);
			case "PortConjugation":                    relationship.skipRelationshipTo(rootNode);
			case "Intersecting":                       relationship.skipRelationshipTo(rootNode);
			case "Unioning":                           relationship.skipRelationshipTo(rootNode);
			case "Disjoining":                         relationship.skipRelationshipTo(rootNode);
			case "Differencing":                       relationship.skipRelationshipTo(rootNode);
			case "MultiplicityRange":                  relationship.skipRelationshipTo(rootNode);
			case "Multiplicity":                       relationship.skipRelationshipTo(rootNode);
		}
	}
}

operation XMIni!Relationship relationshipTransform(rootNode : SysMini!Element){
	for (element in self.ownedRelatedElement){
		switch (element.type().name){
		
			//Dependency
			case "Dependency":                         element.addNodeTo(rootNode);
			//Package
			case "Package":                            element.addPackageNodeTo(rootNode);
			case "LibraryPackage":                     element.addPackageNodeTo(rootNode);
			
			//AnnotatingElement
			case "Comment":                            element.addNodeTo(rootNode);
			case "TextualRepresentation":              element.addNodeTo(rootNode);
			case "Documentation":                      element.addNodeTo(rootNode);
			
			//Expression
			case "OperatorExpression":                 element.addNodeTo(rootNode);
			
			//Definition
			case "OccurrenceDefinition":               element.addNodeTo(rootNode);
			case "AttributeDefinition":                element.addNodeTo(rootNode);
			case "ItemDefinition":                     element.addNodeTo(rootNode);
			case "PortDefinition":                     element.addNodeTo(rootNode);
			case "ActionDefinition":                   element.addNodeTo(rootNode);
			case "EnumerationDefinition":              element.addNodeTo(rootNode);
			case "PartDefinition":                     element.addNodeTo(rootNode);
			case "MetadataDefinition":                 element.addNodeTo(rootNode);
			case "CalculationDefinition":              element.addNodeTo(rootNode);
			case "StateDefinition":                    element.addNodeTo(rootNode);
			case "ConnectionDefinition":               element.addNodeTo(rootNode);
			case "ViewDefinition":                     element.addNodeTo(rootNode);
			case "RenderingDefinition":                element.addNodeTo(rootNode);
			case "CaseDefinition":                     element.addNodeTo(rootNode);
			case "FlowConnectionDefinition":           element.addNodeTo(rootNode);
			case "InterfaceDefinition":                element.addNodeTo(rootNode);
			case "AllocationDefinition":               element.addNodeTo(rootNode);
			case "AnalysisCaseDefinition":             element.addNodeTo(rootNode);
			case "VerificationCaseDefinition":         element.addNodeTo(rootNode);
			case "UseCaseDefinition":                  element.addNodeTo(rootNode);
			case "ConstraintDefinition":               element.addNodeTo(rootNode);
			case "RequirementDefinition":              element.addNodeTo(rootNode);
			case "ConcernDefinition":                  element.addNodeTo(rootNode);
			case "ViewpointDefinition":                element.addNodeTo(rootNode);
			
			//Usage
			case "OccurrenceUsage":                    element.addNodeTo(rootNode);
			case "ReferenceUsage":                     element.addReferenceUsageNodeTo(rootNode);
			case "AttributeUsage":                     element.addNodeTo(rootNode);
			case "SuccessionAsUsage":                  element.addNodeTo(rootNode);
			case "Usage":                              element.addNodeTo(rootNode);
			case "BindingConnectorAsUsage":            element.addNodeTo(rootNode);
			case "ItemUsage":                          element.addNodeTo(rootNode);
			case "ActionUsage": element.addNodeTo(rootNode);
			case "PortUsage": element.addNodeTo(rootNode);
			case "EventOccurrenceUsage":               element.addNodeTo(rootNode);
			case "EnumerationUsage":                   element.addNodeTo(rootNode);
			case "PartUsage": element.addNodeTo(rootNode);
			case "MetadataUsage":                      element.addNodeTo(rootNode);
			case "StateUsage": element.addNodeTo(rootNode);
			case "TransitionUsage": element.addNodeTo(rootNode);
			case "AcceptActionUsage": element.addNodeTo(rootNode);
			case "CalculationUsage":                   element.addNodeTo(rootNode);
			case "PerformActionUsage":                 element.addNodeTo(rootNode);
			case "SendActionUsage": element.addNodeTo(rootNode);
			case "IfActionUsage": element.addNodeTo(rootNode);
			case "AssignmentActionUsage":              element.addNodeTo(rootNode);
			case "ConnectionUsage":                    element.addNodeTo(rootNode);
			case "ViewUsage":                          element.addNodeTo(rootNode);
			case "RenderingUsage":                     element.addNodeTo(rootNode);
			case "ExhibitStateUsage":                  element.addNodeTo(rootNode);
			case "CaseUsage":                          element.addNodeTo(rootNode);
			case "WhileLoopActionUsage": element.addNodeTo(rootNode);
			case "ForLoopActionUsage": element.addNodeTo(rootNode);
			case "DecisionNode":                       element.addNodeTo(rootNode);
			case "ForkNode":                           element.addNodeTo(rootNode);
			case "MergeNode":                          element.addNodeTo(rootNode);
			case "JoinNode":                           element.addNodeTo(rootNode);
			case "FlowConnectionUsage":                element.addNodeTo(rootNode);
			case "InterfaceUsage":                     element.addNodeTo(rootNode);
			case "AllocationUsage":                    element.addNodeTo(rootNode);
			case "AnalysisCaseUsage":                  element.addNodeTo(rootNode);
			case "VerificationCaseUsage":              element.addNodeTo(rootNode);
			case "UseCaseUsage":                       element.addNodeTo(rootNode);
			case "SuccessionFlowConnectionUsage":      element.addNodeTo(rootNode);
			case "IncludeUseCaseUsage":                element.addNodeTo(rootNode);
			case "ConstraintUsage": element.addNodeTo(rootNode);
			case "RequirementUsage": element.addNodeTo(rootNode);
			case "AssertConstraintUsage":              element.addNodeTo(rootNode);
			case "ConcernUsage": element.addNodeTo(rootNode);
			case "ViewpointUsage":                     element.addNodeTo(rootNode);
			case "SatisfyRequirementUsage":            element.addNodeTo(rootNode);
		}
	}
}

//Element
@abstract
rule ElementRule
	transform s : XMIni!Element
	to t : SysMini!Element {
		t.declaredName = s.declaredName;
		t.declaredShortName = s.declaredShortName;
	}

@abstract
rule PrefixMetadataAnnotation
	transform s : XMIni!Element
	to t : SysMini!Element
	extends PrefixMetadataUsage{
	}

@abstract
rule PrefixMetadataMember
	transform s : XMIni!Element
	to t : SysMini!Element
	extends PrefixMetadataUsage{
	}
	
@abstract
rule BasicDefinitionPrefix
	transform s : XMIni!Definition
	to t : SysMini!Definition{
		t.isAbstract = s.isAbstract;
		t.isVariation = s.isVariation;
	}
	
@abstract
rule DefinitionExtensionKeyword
	transform s : XMIni!Definition
	to t : SysMini!Definition
	extends PrefixMetadataMember{
// TBD
//		for (prefixMetadataMember in s.ownedRelationship.getElementOf("OwningMembership")){
//			prefixMetadataMember.ownedRelatedElement.getElementOf("MetadataUsage").println();
//		}
	}
	
@abstract
rule DefinitionPrefix
	transform s : XMIni!Definition
	to t : SysMini!Definition
	extends BasicDefinitionPrefix, DefinitionExtensionKeyword{
	}

@abstract
rule Identification
	transform s : XMIni!Element
	to t : SysMini!Element
	extends ElementRule{
	}

@abstract
rule SubclassificationPart
	transform s : XMIni!Classifier
	to t : SysMini!Classifier{
	}

@abstract
rule DefinitionDeclaration
	transform s : XMIni!Definition
	to t : SysMini!Definition
	extends Identification, SubclassificationPart{
	}

@abstract
rule DefinitionBody
	transform s : XMIni!Type
	to t : SysMini!Type{
	}

@abstract
rule Definition
	transform s : XMIni!Definition
	to t : SysMini!Definition
	extends DefinitionDeclaration, DefinitionBody{
	}
	
@abstract
rule AttributeDefinition
	transform s : XMIni!AttributeDefinition
	to t : SysMini!AttributeDefinition
	extends DefinitionPrefix, Definition{
	}

@abstract
rule EnumerationDefinition
	transform s : XMIni!EnumerationDefinition
	to t : SysMini!EnumerationDefinition
	extends DefinitionPrefix, EnumerationBody{
	}

@abstract
rule OccurrenceDefinition
	transform s : XMIni!OccurrenceDefinition
	to t : SysMini!OccurrenceDefinition
	extends OccurrenceDefinitionPrefix, Definition{
	}
	
@abstract
rule EnumerationBody
	transform s : XMIni!AttributeDefinition
	to t : SysMini!AttributeDefinition{
	}
	
@abstract
rule PartDefinition
	transform s : XMIni!PartDefinition
	to t : SysMini!PartDefinition
	extends OccurrenceDefinitionPrefix, Definition{
	}

@abstract
rule MetadataDefinition
	transform s : XMIni!MetadataDefinition
	to t : SysMini!MetadataDefinition
	extends DefinitionExtensionKeyword, Definition{
		t.isAbstract = s.isAbstract;
	}
	
@abstract
rule PortDefinition
	transform s : XMIni!PortDefinition
	to t : SysMini!PortDefinition
	extends DefinitionPrefix, Definition, ConjugatedPortDefinitionMember{
	}

@abstract
rule ConjugatedPortDefinition
	transform s : XMIni!ConjugatedPortDefinition
	to t : SysMini!ConjugatedPortDefinition{
	}
	
@abstract
rule ItemDefinition
	transform s : XMIni!ItemDefinition
	to t : SysMini!ItemDefinition
	extends OccurrenceDefinitionPrefix, Definition{
	}
	
@abstract
rule ActionDefinition
	transform s : XMIni!ActionDefinition
	to t : SysMini!ActionDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, ActionBody{
	}
	
@abstract
rule CalculationDefinition
	transform s : XMIni!CalculationDefinition
	to t : SysMini!CalculationDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, CalculationBody{
	}

@abstract
rule StateDefinition
	transform s : XMIni!StateDefinition
	to t : SysMini!StateDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, StateDefBody{
	}
	
@abstract
rule ConnectionDefinition
	transform s : XMIni!ConnectionDefinition
	to t : SysMini!ConnectionDefinition
	extends OccurrenceDefinitionPrefix, Definition{
	}
	
@abstract
rule FlowConnectionDefinition
	transform s : XMIni!FlowConnectionDefinition
	to t : SysMini!FlowConnectionDefinition
	extends OccurrenceDefinitionPrefix, Definition{
	}

@abstract
rule InterfaceDefinition
	transform s : XMIni!InterfaceDefinition
	to t : SysMini!InterfaceDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, InterfaceBody{
	}

@abstract
rule AllocationDefinition
	transform s : XMIni!AllocationDefinition
	to t : SysMini!AllocationDefinition
	extends OccurrenceDefinitionPrefix, Definition{
	}

@abstract
rule AnalysisCaseDefinition
	transform s : XMIni!AnalysisCaseDefinition
	to t : SysMini!AnalysisCaseDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, CaseBody{
	}
	
@abstract
rule VerificationCaseDefinition
	transform s : XMIni!VerificationCaseDefinition
	to t : SysMini!VerificationCaseDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, CaseBody{
	}
	
@abstract
rule UseCaseDefinition
	transform s : XMIni!UseCaseDefinition
	to t : SysMini!UseCaseDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, CaseBody{
	}
	
@abstract
rule InterfaceBody
	transform s : XMIni!Type
	to t : SysMini!Type{
	}
	
@abstract
rule ViewDefinition
	transform s : XMIni!ViewDefinition
	to t : SysMini!ViewDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, ViewDefinitionBody{
	}

@abstract
rule RenderingDefinition
	transform s : XMIni!RenderingDefinition
	to t : SysMini!RenderingDefinition
	extends OccurrenceDefinitionPrefix, Definition{
	}
	
@abstract
rule CaseDefinition
	transform s : XMIni!CaseDefinition
	to t : SysMini!CaseDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, CaseBody{
	}

@abstract
rule ConstraintDefinition
	transform s : XMIni!ConstraintDefinition
	to t : SysMini!ConstraintDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, CalculationBody{
	}
	
@abstract
rule RequirementDefinition
	transform s : XMIni!RequirementDefinition
	to t : SysMini!RequirementDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, RequirementBody{
	}

@abstract
rule ConcernDefinition
	transform s : XMIni!ConcernDefinition
	to t : SysMini!ConcernDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, RequirementBody{
	}

@abstract
rule ViewpointDefinition
	transform s : XMIni!ViewpointDefinition
	to t : SysMini!ViewpointDefinition
	extends OccurrenceDefinitionPrefix, DefinitionDeclaration, RequirementBody{
	}
	
@abstract
rule CaseBody
	transform s : XMIni!Type
	to t : SysMini!Type{
	}
	
@abstract
rule ViewDefinitionBody
	transform s : XMIni!ViewDefinition
	to t : SysMini!ViewDefinition{
	}
	
@abstract
rule ActionBody
	transform s : XMIni!Type
	to t : SysMini!Type{
	}

@abstract
rule StateDefBody
	transform s : XMIni!StateDefinition
	to t : SysMini!StateDefinition
	extends StateBodyPart{
		t.isParallel = s.isParallel;
	}
	
@abstract
rule CalculationBody
	transform s : XMIni!CalculationDefinition
	to t : SysMini!CalculationDefinition{
	}

@abstract
rule RequirementBody
	transform s : XMIni!RequirementDefinition
	to t : SysMini!RequirementDefinition{
	}
	
@abstract
rule ConjugatedPortDefinitionMember
	transform s : XMIni!Definition
	to t : SysMini!Definition{
	}
	
@abstract
rule OccurrenceDefinitionPrefix
	transform s : XMIni!OccurrenceDefinition
	to t : SysMini!OccurrenceDefinition
	extends BasicDefinitionPrefix, LifeClassMembership, DefinitionExtensionKeyword{
		t.isIndividual = s.isIndividual;
	}

@abstract
rule LifeClassMembership
	transform s : XMIni!OccurrenceDefinition
	to t : SysMini!OccurrenceDefinition{
		for (ownedRelationship in s.ownedRelationship.getElementOf("OwningMembership")){
			for (lifeClass in ownedRelationship.ownedRelatedElement.getElementOf("LifeClass")){
				lifeClass.tag();
//				lifeClass.println();
			}
		}
	}
	
//PrefixMetadataUsage
@abstract
rule PrefixMetadataUsage
	transform s : XMIni!Element
	to t : SysMini!Element{
		for (owningMembership in s.ownedRelationship.getElementOf("OwningMembership")){
			for (prefixMetadataUsage in owningMembership.ownedRelatedElement.getElementOf("MetadataUsage")){
				t.prefixMetadata = "[prefixMetadata]";
				prefixMetadataUsage.tag();
			}
		}
// TBD
	}
	
//Import
@abstract
rule Import
	transform s : XMIni!Import
	to t : SysMini!Import 
	extends ElementRule{
		t.setVisibility(s);
		t.isImportAll = s.isImportAll;
		t.isRecursive = s.isRecursive;
	}


//Definition
@abstract
rule DefinitionRule
	transform s : XMIni!Definition
	to t : SysMini!Definition
	extends ElementRule, PrefixMetadataMember{
		t.isAbstract = s.isAbstract;
		t.isVariation = s.isVariation;
//		if (s.ownedRelationship != null){
//          for (prefixMetadataMember in s.ownedRelationship){
// TBD
//					}
//				}
	}


//Usage
@abstract
rule UsageRule
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends ElementRule, PrefixMetadataMember{
	}
	
	

@abstract
rule RefPrefix
	transform s : XMIni!Usage
	to t : SysMini!Usage{
		if (s.eContainer().isTypeOf("ReturnParameterMembership") and s.declaredName != null){
			t.isReturn = true;
		}
		t.setFeatureDirection(s);
		t.isAbstract = s.isAbstract;
		t.isVariation = s.isVariation;
		t.isReadOnly = s.isReadOnly;
		t.isDerived = s.isDerived;
		t.isEnd = s.isEnd;
	}
	
@abstract
rule BasicUsagePrefix
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends RefPrefix{
		t.isReference = s.isReference;
	}
	
@abstract
rule UsageExtensionKeyword
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends PrefixMetadataMember{
	}
	
@abstract
rule UsagePrefix
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends BasicUsagePrefix, UsageExtensionKeyword{
	}
	
@abstract
rule Usage
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends UsageDeclaration, UsageCompletion{
	}
	
@abstract
rule UsageCompletion
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends ValuePart, UsageBody{
	}
	
@abstract
rule ValuePart
	transform s : XMIni!Feature
	to t : SysMini!Feature{
		for (featureValue in s.ownedRelationship.getElementOf("FeatureValue")){
			t.isInitial = featureValue.isInitial;
			t.isDefault = featureValue.isDefault;
			t.valuePart = featureValue.getExpression();
		}
		for (ConjugatedPortTyping in s.ownedRelationship.getElementOf("ConjugatedPortTyping")){
			t.valuePart = "~"+ConjugatedPortTyping.conjugatedPortDefinition.eContents().first().originalPortDefinition.declaredName;
		}
	}

@abstract
rule Dependency
	transform s : XMIni!Dependency
	to t : SysMini!Dependency
	extends PrefixMetadataAnnotation, Identification{
		for (client in s.client){
			t.client.add(client.declaredName);
		}
		for (supplier in s.supplier){
			t.supplier.add(supplier.declaredName);
		}
	}

@abstract
rule ElementFilterMembership
	transform s : XMIni!ElementFilterMembership
	to t : SysMini!ElementFilterMembership{
// TBD :All of the s is ElementFilterMember, no FilterPackageMember.
		t.setVisibility(s);
		t.ElementFilterText = s.getExpression();
	}

@abstract
rule Membership
	transform s : XMIni!Membership
	to t : SysMini!Membership{
		t.setVisibility(s);
		t.declaredName = s.declaredName;
		if (s.eContainer().isKindOf(XMIni!Usage) and s.memberShortName == null and s.memberName == null){
			t.MembershipType = "InitialNodeMember";
		}
		else {
			t.MembershipType = "AliasMember";
			t.memberShortName = s.memberShortName;
			t.memberName = s.memberName;
		}
	}
	
@abstract
rule UsageBody
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends DefinitionBody{
	}
	
@abstract
rule UsageDeclaration
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends FeatureDeclaration{
	}
	
@abstract
rule FeatureDeclaration
	transform s : XMIni!Feature
	to t : SysMini!Feature
	extends Identification, FeatureSpecializationPart{
	}
	
@abstract
rule FeatureSpecializationPart
	transform s : XMIni!Feature
	to t : SysMini!Feature
	extends MultiplicityPart, FeatureSpecialization{
	}
	
@abstract
rule MultiplicityPart
	transform s : XMIni!Feature
	to t : SysMini!Feature{
		t.isOrdered = s.isOrdered;
		t.isNonunique = s.isNonunique;
		t.multiplicityRange = s.getMultiplicityRange();
	}


@abstract
rule FeatureSpecialization 
	transform s : XMIni!Feature
	to t : SysMini!Feature{
		t.featureNote = s.getFeatureNote();
		t.featureSpecialization = clearImportPackage(s.getFeatureSpecialization());
		if (t.featureSpecialization == "" or t.featureSpecialization == null){
			t.featureNote = "";
		}
	}

@abstract
rule ActionUsage
	transform s : XMIni!ActionUsage
	to t : SysMini!ActionUsage
	extends OccurrenceUsagePrefix, ActionUsageDeclaration, ActionBody{
	}

@abstract
rule StateUsage
	transform s : XMIni!StateUsage
	to t : SysMini!StateUsage
	extends OccurrenceUsagePrefix, ActionUsageDeclaration, StateUsageBody{
	}

@abstract
rule PerformActionUsage
	transform s : XMIni!PerformActionUsage
	to t : SysMini!PerformActionUsage
	extends OccurrenceUsagePrefix, PerformActionUsageDeclaration, ActionBody{
	}

@abstract
rule IncludeUseCaseUsage
	transform s : XMIni!IncludeUseCaseUsage
	to t : SysMini!IncludeUseCaseUsage
	extends OccurrenceUsagePrefix, UsageDeclaration, ValuePart, CaseBody{
		if (s.ownedRelationship.getElementOf("ReferenceSubsetting").size()>0){
			t.isExtendKeyWord = false;
			t.declaredName = s.OwnedReferenceSubsetting();
		}
		else{
			t.isExtendKeyWord = true;
		}
	}
	
@abstract
rule CalculationUsage
	transform s : XMIni!CalculationUsage
	to t : SysMini!CalculationUsage
	extends OccurrenceUsagePrefix, ActionUsageDeclaration, CalculationBody{
	}

@abstract
rule CaseUsage
	transform s : XMIni!CaseUsage
	to t : SysMini!CaseUsage
	extends OccurrenceUsagePrefix, ActionUsageDeclaration, CaseBody{
	}
	
@abstract
rule AssertConstraintUsage
	transform s : XMIni!AssertConstraintUsage
	to t : SysMini!AssertConstraintUsage
	extends OccurrenceUsagePrefix, ConstraintUsageDeclaration, CalculationBody{
		if (s.declaredName == null){
			t.notConstraintUsageKeyword = true;
			t.declaredName = s.OwnedReferenceSubsetting();
			if (t.declaredName == null or t.declaredName == ""){
				t.notConstraintUsageKeyword = false;
			}
		}
		t.isNegated = s.isNegated;
	}
	
@abstract
rule ConcernUsage
	transform s : XMIni!ConcernUsage
	to t : SysMini!ConcernUsage
	extends OccurrenceUsagePrefix, ConstraintUsageDeclaration, RequirementBody{
// TBD
	}

@abstract
rule ViewpointUsage
	transform s : XMIni!ViewpointUsage
	to t : SysMini!ViewpointUsage
	extends OccurrenceUsagePrefix, ConstraintUsageDeclaration, RequirementBody{
	}

@abstract
rule SatisfyRequirementUsage
	transform s : XMIni!SatisfyRequirementUsage
	to t : SysMini!SatisfyRequirementUsage
	extends OccurrenceUsagePrefix, UsageDeclaration, ValuePart, RequirementBody{
		if (s.declaredName == null){
			t.notConstraintUsageKeyword = true;
			t.declaredName = s.OwnedReferenceSubsetting();
			if (t.declaredName == null or t.declaredName == ""){
				t.notConstraintUsageKeyword = false;
			}
		}
		t.isNegated = s.isNegated;
		for (satisfactionSubjectMember in s.ownedRelationship.getElementOf("SubjectMembership")){
			if (satisfactionSubjectMember.ownedRelatedElement.first().ownedRelationship.first().isTypeOf("FeatureValue")){
				var featureReferenceExpression = satisfactionSubjectMember.ownedRelatedElement.first().ownedRelationship.first().ownedRelatedElement.first();
				var membership = featureReferenceExpression.ownedRelationship.getElementOf("Membership");
				if (membership.size() > 0){
					t.satisfactionSubjectMember = membership.memberElement.first().declaredName;
				}
				else{
					// TBD
//					featureReferenceExpression.println("->");
				}
			}
		}
	}
	
@abstract
rule PerformActionUsageDeclaration
	transform s : XMIni!ActionUsage
	to t : SysMini!ActionUsage
	extends UsageDeclaration, ValuePart{
		if (s.ownedRelationship.getElementOf("ReferenceSubsetting").size()>0){
			t.isExtendKeyWord = false;
			t.declaredName = s.OwnedReferenceSubsetting();
		}
		else{
			t.isExtendKeyWord = true;
		}
	}
		
@abstract
rule StateUsageBody
	transform s : XMIni!StateUsage
	to t : SysMini!StateUsage
	extends StateBodyPart{
		t.isParallel = s.isParallel;
	}

@abstract
rule StateBodyPart
	transform s : XMIni!Type
	to t : SysMini!Type{
		s.tagAllOwnedElement();
	}
	
@abstract
rule ExhibitStateUsage
	transform s : XMIni!ExhibitStateUsage
	to t : SysMini!ExhibitStateUsage
	extends OccurrenceUsagePrefix, UsageDeclaration, ValuePart, StateUsageBody{
		if (s.ownedRelationship.getElementOf("ReferenceSubsetting").size()>0){
			t.isExtendKeyWord = false;
			t.declaredName = s.OwnedReferenceSubsetting();
		}
		else{
			t.isExtendKeyWord = true;
		}
	}

@abstract
rule RequirementUsage
	transform s : XMIni!RequirementUsage
	to t : SysMini!RequirementUsage
	extends OccurrenceUsagePrefix,
			ConstraintUsageDeclaration,
			RequirementBody{
// TBD
	}
	
@abstract
rule ConstraintUsage
	transform s : XMIni!ConstraintUsage
	to t : SysMini!ConstraintUsage
	extends OccurrenceUsagePrefix,
			ConstraintUsageDeclaration,
			CalculationBody{
		if (s.eContainer().isTypeOf("RequirementConstraintMembership")){
			var requirementConstraintMembership = s.eContainer();
			t.RequirementConstraintMembershipKind = requirementConstraintMembership.kind.name.asString();
		}
	}

@abstract
rule ConstraintUsageDeclaration
	transform s : XMIni!ConstraintUsage
	to t : SysMini!ConstraintUsage
	extends UsageDeclaration, ValuePart{
	}

@abstract
rule RequirementBody
	transform s : XMIni!Type
	to t : SysMini!Type{
	}
	
@abstract
rule CalculationBody
	transform s : XMIni!Type
	to t : SysMini!Type{
	}
		
@abstract
rule TransitionUsage
	transform s : XMIni!TransitionUsage
	to t : SysMini!TransitionUsage
	extends UsageDeclaration,
			ActionBody{
//		t.transitionText += s.TransitionSourceMember();
//		t.transitionText += s.EmptyParameterMember();
//		t.transitionText += s.TriggerActionMember();
//		t.transitionText += s.GuardExpressionMember();
//		t.transitionText += s.EffectBehaviorMember();
//		t.transitionText += "then ";
//		t.transitionText += s.TransitionSuccessionMember();
		s.tagAllOwnedElement();
	}
	
@abstract
rule ActionUsageDeclaration
	transform s : XMIni!ActionUsage
	to t : SysMini!ActionUsage
	extends UsageDeclaration, ValuePart{
	}
	
@abstract
rule ItemUsage
	transform s : XMIni!ItemUsage
	to t : SysMini!ItemUsage
	extends OccurrenceUsagePrefix, Usage{
	}

@abstract
rule PartUsage
	transform s : XMIni!PartUsage
	to t : SysMini!PartUsage
	extends OccurrenceUsagePrefix, Usage{
	}
	
@abstract
rule ConnectionUsage
	transform s : XMIni!ConnectionUsage
	to t : SysMini!ConnectionUsage
	extends OccurrenceUsagePrefix, UsageDeclaration, ValuePart, ConnectorPart{
	}

@abstract
rule ViewUsage
	transform s : XMIni!ViewUsage
	to t : SysMini!ViewUsage
	extends OccurrenceUsagePrefix, UsageDeclaration, ValuePart, ViewBody{
	}
	
@abstract
rule RenderingUsage
	transform s : XMIni!RenderingUsage
	to t : SysMini!RenderingUsage
	extends OccurrenceUsagePrefix, Usage{
// TBD
		t.RenderingUsageType = s.getTypeOfRenderingUsage();
		if (t.RenderingUsageType == "ViewRenderingUsage"){
			if (s.ownedRelationship.getElementOf("ReferenceSubsetting").size()>0){
				t.declaredName = s.OwnedReferenceSubsetting();
			}
		}
	}

@abstract
rule FlowConnectionUsage
	transform s : XMIni!FlowConnectionUsage
	to t : SysMini!FlowConnectionUsage
	extends OccurrenceUsagePrefix, FlowConnectionDeclaration, DefinitionBody{
	}

@abstract
rule SuccessionFlowConnectionUsage
	transform s : XMIni!SuccessionFlowConnectionUsage
	to t : SysMini!SuccessionFlowConnectionUsage
	extends OccurrenceUsagePrefix, FlowConnectionDeclaration, DefinitionBody{
	}

@abstract
rule InterfaceUsage
	transform s : XMIni!InterfaceUsage
	to t : SysMini!InterfaceUsage
	extends OccurrenceUsagePrefix, InterfaceUsageDeclaration, InterfaceBody{
	}

@abstract
rule AllocationUsage
	transform s : XMIni!AllocationUsage
	to t : SysMini!AllocationUsage
	extends OccurrenceUsagePrefix, AllocationUsageDeclaration, UsageBody{
	}

@abstract
rule AllocationUsageDeclaration
	transform s : XMIni!AllocationUsage
	to t : SysMini!AllocationUsage
	extends UsageDeclaration, ConnectorPart{
	}
	
@abstract
rule InterfaceUsageDeclaration
	transform s : XMIni!InterfaceUsage
	to t : SysMini!InterfaceUsage
	extends UsageDeclaration, InterfacePart{
	}

@abstract
rule InterfacePart
	transform s : XMIni!InterfaceUsage
	to t : SysMini!InterfaceUsage
	extends BinaryInterfacePart, NaryInterfacePart{
	}

@abstract
rule BinaryInterfacePart
	transform s : XMIni!Connector
	to t : SysMini!Connector{
		for (endFeatureMembership in s.ownedRelationship.getElementOf("EndFeatureMembership")){
			var interfaceEnd  = endFeatureMembership.ownedRelatedElement.first();
			if (interfaceEnd.declaredName != null){
				t.interfacePart.add(interfaceEnd.declaredName);
			}
			else{
				var str = "";
				str += interfaceEnd.getReferenceSubsetting();
				str += interfaceEnd.getMultiplicityRange();
				t.interfacePart.add(str);
			}
			interfaceEnd.tag();
		}
	}
	


@abstract
rule NaryInterfacePart
	transform s : XMIni!Connector
	to t : SysMini!Connector{
		for (endFeatureMembership in s.ownedRelationship.getElementOf("EndFeatureMembership")){
			var interfaceEnd  = endFeatureMembership.ownedRelatedElement.first();
			if (interfaceEnd.declaredName != null){
				t.interfacePart.add(interfaceEnd.declaredName);
			}
			else{
				var str = "";
				str += interfaceEnd.getReferenceSubsetting();
				str += interfaceEnd.getMultiplicityRange();
				t.interfacePart.add(str);
			}
			interfaceEnd.tag();
		}	
	}
	
@abstract
rule FlowConnectionDeclaration
	transform s : XMIni!FlowConnectionUsage
	to t : SysMini!FlowConnectionUsage
	extends UsageDeclaration, ValuePart{
		var isFirst = true;
		for (ownedRelationship in s.ownedRelationship){
			var isIf = false;
			if (ownedRelationship.isTypeOf("FeatureMembership")){
				isIf = true;
				t.itemFeature = ownedRelationship.getItemFeatureMember();
				ownedRelationship.tag();
			}
			else if (ownedRelationship.isTypeOf("EndFeatureMembership")){
				t.note = "FlowConnectionUsage";
				if (isFirst){
					t.source = ownedRelationship.getFlowEndMember();
					isFirst = false;
					ownedRelationship.tag();
				}
				else{
					t.target = ownedRelationship.getFlowEndMember();
					ownedRelationship.tag();
				}
			}
			else if (ownedRelationship.isTypeOf("ParameterMembership")){
				t.note = "Message";
				if (isFirst){
					t.source = ownedRelationship.getFlowEndMember();
					isFirst = false;
					ownedRelationship.tag();
				}
				else{
					t.target = ownedRelationship.getFlowEndMember();
					ownedRelationship.tag();
				}
			}
		}
		if (t.note == null or t.note == ""){
			t.note = "Message";
		}
	}

@abstract
rule ViewBody
	transform s : XMIni!ViewUsage
	to t : SysMini!ViewUsage{
	}
	
@abstract
rule ConnectorPart
	transform s : XMIni!ConnectionUsage
	to t : SysMini!ConnectionUsage
	extends BinaryConnectorPart, NaryConnectorPart{
	}

@abstract
rule BinaryConnectorPart
	transform s : XMIni!Connector
	to t : SysMini!Connector{
		for (endFeatureMembership in s.ownedRelationship.getElementOf("EndFeatureMembership")){
			var referenceUsage = endFeatureMembership.ownedRelatedElement.first();
			if (referenceUsage.declaredName != null){
				t.connectorPart.add(referenceUsage.declaredName);
				referenceUsage.tag();
			}
			else {
				t.connectorPart.add(referenceUsage.getConnectorEnd());
			}
		}
	}

@abstract
rule NaryConnectorPart
	transform s : XMIni!Connector
	to t : SysMini!Connector{
		for (endFeatureMembership in s.ownedRelationship.getElementOf("EndFeatureMembership")){
			var referenceUsage = endFeatureMembership.ownedRelatedElement.first();
			if (referenceUsage.declaredName != null){
				t.connectorPart.add(referenceUsage.declaredName);
				referenceUsage.tag();
			}
			else {
				t.connectorPart.add(referenceUsage.getConnectorEnd());
			}
		}
	}

@abstract
rule Comment
	transform s : XMIni!Comment
	to t : SysMini!Comment
	extends Identification, Annotation{
		t.locale = s.locale;
		t.text = s.body;
	}

@abstract
rule Documentation
	transform s : XMIni!Documentation
	to t : SysMini!Documentation
	extends Identification{
		t.locale = s.locale;
		t.text = s.body;
	}

@abstract
rule TextualRepresentation
	transform s : XMIni!TextualRepresentation
	to t : SysMini!TextualRepresentation
	extends Identification{
		t.language = s.language;
		t.text = s.body;
	}
	
@abstract
rule Annotation
	transform s : XMIni!AnnotatingElement
	to t : SysMini!AnnotatingElement{
	}
		
@abstract
rule AttributeUsage
	transform s : XMIni!AttributeUsage
	to t : SysMini!AttributeUsage
	extends UsagePrefix, Usage{
	}

@abstract
rule MetadataUsage
	transform s : XMIni!MetadataUsage
	to t : SysMini!MetadataUsage
	extends UsageExtensionKeyword, MetadataUsageDeclaration, MetadataBody{
		for (a in s.ownedRelationship.getElementOf("Annotation")){
			t.annotatedElement.add(a.annotatedElement.declaredName);
		}
	}

@abstract
rule MetadataUsageDeclaration
	transform s : XMIni!MetadataUsage
	to t : SysMini!MetadataUsage
	extends Identification, MetadataTyping{
	}

@abstract
rule MetadataTyping
	transform s : XMIni!MetadataUsage
	to t : SysMini!MetadataUsage{
		if (s.ownedRelationship.getElementOf("FeatureTyping").first().type != null){
			t.declaredName = s.ownedRelationship.getElementOf("FeatureTyping").first().type.declaredName;
		}
		else{
			t.declaredName = s.ownedRelationship.getElementOf("FeatureTyping").first().declaredName;
		}
//		s.ownedRelationship.getElementOf("FeatureTyping").first().tag();
	}
	
@abstract
rule MetadataBody
	transform s : XMIni!MetadataUsage
	to t : SysMini!MetadataUsage{
	}
	
@abstract
rule EnumerationUsage
	transform s : XMIni!EnumerationUsage
	to t : SysMini!EnumerationUsage
	extends UsagePrefix, Usage{
	}

@abstract
rule ReferenceUsage
	transform s : XMIni!ReferenceUsage
	to t : SysMini!ReferenceUsage
	extends PrefixMetadataMember, RefPrefix, Usage{
		t.ReferenceUsageType = s.getTypeOfReferenceUsage();
		if (t.ReferenceUsageType == "ReferenceUsage"){
			if (t.declaredName != null and t.declaredName != ""){
				t.ReferenceUsageType = "DefaultReferenceUsage";
			}
		}
//		if (t.declaredName == null or t.declaredName == ""){
//			t.println();
//		}		
	}
		
@abstract
rule PortUsage
	transform s : XMIni!PortUsage
	to t : SysMini!PortUsage
	extends OccurrenceUsagePrefix, Usage{
	}

	
@abstract
rule OccurrenceUsagePrefix
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends BasicUsagePrefix, UsageExtensionKeyword{
		t.isIndividual = s.isIndividual;
		t.setPortionKind(s);
	}

@abstract
rule OccurrenceUsage
	transform s : XMIni!OccurrenceUsage
	to t : SysMini!OccurrenceUsage
	extends OccurrenceUsagePrefix, Usage{
	}
	
@abstract
rule EventOccurrenceUsage
	transform s : XMIni!EventOccurrenceUsage
	to t : SysMini!EventOccurrenceUsage
	extends OccurrenceUsagePrefix, FeatureSpecializationPart, UsageCompletion{
		if (s.ownedRelationship.getElementOf("ReferenceSubsetting").size()>0){
			t.isExtendKeyWord = false;
			t.declaredName = s.OwnedReferenceSubsetting();
		}
		else{
			t.isExtendKeyWord = true;
		}
	}
	
@abstract
rule AnalysisCaseUsage
	transform s : XMIni!AnalysisCaseUsage
	to t : SysMini!AnalysisCaseUsage
	extends OccurrenceUsagePrefix, ActionUsageDeclaration, CaseBody{
	}

@abstract
rule VerificationCaseUsage
	transform s : XMIni!VerificationCaseUsage
	to t : SysMini!VerificationCaseUsage
	extends OccurrenceUsagePrefix, ActionUsageDeclaration, CaseBody{
	}

@abstract
rule UseCaseUsage
	transform s : XMIni!UseCaseUsage
	to t : SysMini!UseCaseUsage
	extends OccurrenceUsagePrefix, ActionUsageDeclaration, CaseBody{
	}

@abstract
rule MergeNode
	transform s : XMIni!MergeNode
	to t : SysMini!MergeNode
	extends ControlNodePrefix, UsageDeclaration, ActionNodeBody{
	}

@abstract
rule DecisionNode
	transform s : XMIni!DecisionNode
	to t : SysMini!DecisionNode
	extends ControlNodePrefix, UsageDeclaration, ActionNodeBody{
	}

@abstract
rule ForkNode
	transform s : XMIni!ForkNode
	to t : SysMini!ForkNode
	extends ControlNodePrefix, UsageDeclaration, ActionNodeBody{
	}

@abstract
rule JoinNode
	transform s : XMIni!JoinNode
	to t : SysMini!JoinNode
	extends ControlNodePrefix, UsageDeclaration, ActionNodeBody{
	}
	
@abstract
rule ActionNodeBody
	transform s : XMIni!ControlNode
	to t : SysMini!ControlNode{
	}

@abstract
rule ControlNodePrefix
	transform s : XMIni!OccurrenceUsage
	to t : SysMini!OccurrenceUsage
	extends RefPrefix, UsageExtensionKeyword{
		t.isIndividual = s.isIndividual;
		t.setPortionKind(s);
	}
	
//AnnotatingElement
@abstract
rule AnnotatingElementRule
	transform s : XMIni!AnnotatingElement
	to t : SysMini!AnnotatingElement{
	}

@abstract
rule ExtendedUsage
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends BasicUsagePrefix, UsageExtensionKeyword, Usage{
	}
	
@abstract
rule SuccessionAsUsage
	transform s : XMIni!SuccessionAsUsage
	to t : SysMini!SuccessionAsUsage
	extends UsagePrefix, UsageDeclaration, DefinitionBody{
// TBD
		var se = Sequence{};
		t.SuccessionType = s.getTypeOfSuccessionAsUsage();
		if (t.SuccessionType == "SuccessionAsUsage"){
			for (endFeatureMembership in s.ownedRelationship.getElementOf("EndFeatureMembership")){
				se.add(endFeatureMembership.ownedRelatedElement.first().getConnectorEnd());	
			}
		}
		if (se.first() == ""){
			t.connectorEndMember.add("start");
		}
		else {
			t.connectorEndMember.add(se.first());
		}
		if (se.second() == ""){
			t.connectorEndMember.add("done");
		}
		else {
			t.connectorEndMember.add(se.second());
		}
	}

@abstract
rule BindingConnectorAsUsage
	transform s : XMIni!BindingConnectorAsUsage
	to t : SysMini!BindingConnectorAsUsage
	extends UsagePrefix, UsageDeclaration, DefinitionBody{
		for (endFeatureMembership in s.ownedRelationship.getElementOf("EndFeatureMembership")){
			t.connectorEndMember.add(endFeatureMembership.ownedRelatedElement.first().getConnectorEnd());	
		}
	}

@abstract
rule NamespaceImport
	transform s : XMIni!NamespaceImport
	to t : SysMini!NamespaceImport 
	extends Import{
		if (s.declaredName == null){
			if (s.importedNamespace != null){
				t.declaredName = s.importedNamespace.declaredName;
			}
			else if(s.ownedRelationship != null){
//				for (r in s.ownedRelationship){
// TBD: FilterPackage
//				}
			}
		}
		var n = t.declaredName.split("::");
		if (n.size() == 2){
			if (n.first() == n.second()){
				allImportPackages.add(n.first());
				t.declaredName = n.first();
			}
		}
	}
	
@abstract
rule NamespaceExpose
	transform s : XMIni!NamespaceExpose
	to t : SysMini!NamespaceExpose
	extends NamespaceImport{
	}

@abstract
rule MembershipExpose
	transform s : XMIni!MembershipExpose
	to t : SysMini!MembershipExpose
	extends MembershipImport{
	}

@abstract
rule MembershipImport
	transform s : XMIni!MembershipImport
	to t : SysMini!MembershipImport 
	extends Import{
		if (s.importedMembership != null){
			t.declaredName = s.importedMembership.ownedRelatedElement.first().declaredName;
		}
	}

@abstract
rule OperatorExpression
	transform s : XMIni!OperatorExpression
	to t : SysMini!OperatorExpression{
		t.valuePart = s.OwnedExpression();
	}


/* @lazy */
@lazy
rule NamespaceImportRule
	transform s : XMIni!NamespaceImport
	to t : SysMini!NamespaceImport 
	extends NamespaceImport{
	}

@lazy
rule NamespaceExposeRule
	transform s : XMIni!NamespaceExpose
	to t : SysMini!NamespaceExpose 
	extends NamespaceExpose{
	}

@lazy
rule MembershipExposeRule
	transform s : XMIni!MembershipExpose
	to t : SysMini!MembershipExpose 
	extends MembershipExpose{
	}


@lazy
rule MembershipImportRule
	transform s : XMIni!MembershipImport
	to t : SysMini!MembershipImport 
	extends MembershipImport{
	}
	
//Package
@lazy
rule PackageRule
	transform s : XMIni!Package
	to t : SysMini!Package 
	extends ElementRule{
//				if (s.ownedRelationship != null){
//                  for (prefixMetadataMember in s.ownedRelationship){
// TBD: prefixMetadataMember
//					}
//				}
	}

//Package
@lazy
rule DependencyRule
	transform s : XMIni!Dependency
	to t : SysMini!Dependency 
	extends Dependency{
	}
	
//Package
@lazy
rule LibraryPackageRule
	transform s : XMIni!LibraryPackage
	to t : SysMini!LibraryPackage 
	extends PackageRule{
		t.isStandard = s.isStandard;
	}
	
@lazy
rule CommentRule
	transform s : XMIni!Comment
	to t : SysMini!Comment
	extends Comment{
	}

@lazy
rule TextualRepresentationRule
	transform s : XMIni!TextualRepresentation
	to t : SysMini!TextualRepresentation
	extends TextualRepresentation{
	}
	
@lazy
rule DocumentationRule
	transform s : XMIni!Documentation
	to t : SysMini!Documentation
	extends Documentation{
	}

//ItemFeature
@lazy
rule ItemFeatureRule
	transform s : XMIni!ItemFeature
	to t : SysMini!ItemFeature{
	}

//ItemFlowEnd
@lazy
rule ItemFlowEndRule
	transform s : XMIni!ItemFlowEnd
	to t : SysMini!ItemFlowEnd{
	}

@lazy
rule OccurrenceDefinitionRule
	transform s : XMIni!OccurrenceDefinition
	to t : SysMini!OccurrenceDefinition 
	extends OccurrenceDefinition{
	}
	
@lazy
rule AttributeDefinitionRule
	transform s : XMIni!AttributeDefinition
	to t : SysMini!AttributeDefinition 
	extends AttributeDefinition{
	}

@lazy
rule ItemDefinitionRule
	transform s : XMIni!ItemDefinition
	to t : SysMini!ItemDefinition 
	extends ItemDefinition{
	}

@lazy
rule PortDefinitionRule
	transform s : XMIni!PortDefinition
	to t : SysMini!PortDefinition 
	extends PortDefinition{
	}

@lazy
rule ActionDefinitionRule
	transform s : XMIni!ActionDefinition
	to t : SysMini!ActionDefinition 
	extends ActionDefinition{
	}

@lazy
rule EnumerationDefinitionRule
	transform s : XMIni!EnumerationDefinition
	to t : SysMini!EnumerationDefinition 
	extends EnumerationDefinition{
	}

@lazy
rule PartDefinitionRule
	transform s : XMIni!PartDefinition
	to t : SysMini!PartDefinition 
	extends PartDefinition{
	}

@lazy
rule MetadataDefinitionRule
	transform s : XMIni!MetadataDefinition
	to t : SysMini!MetadataDefinition 
	extends MetadataDefinition{
	}

@lazy
rule ConjugatedPortDefinitionRule
	transform s : XMIni!ConjugatedPortDefinition
	to t : SysMini!ConjugatedPortDefinition 
	extends ConjugatedPortDefinition{
	}

@lazy
rule CalculationDefinitionRule
	transform s : XMIni!CalculationDefinition
	to t : SysMini!CalculationDefinition 
	extends CalculationDefinition{
	}

@lazy
rule StateDefinitionRule
	transform s : XMIni!StateDefinition
	to t : SysMini!StateDefinition 
	extends StateDefinition{
	}

@lazy
rule ConnectionDefinitionRule
	transform s : XMIni!ConnectionDefinition
	to t : SysMini!ConnectionDefinition 
	extends ConnectionDefinition{
	}

@lazy
rule ViewDefinitionRule
	transform s : XMIni!ViewDefinition
	to t : SysMini!ViewDefinition 
	extends ViewDefinition{
	}

@lazy
rule RenderingDefinitionRule
	transform s : XMIni!RenderingDefinition
	to t : SysMini!RenderingDefinition 
	extends RenderingDefinition{
	}

@lazy
rule CaseDefinitionRule
	transform s : XMIni!CaseDefinition
	to t : SysMini!CaseDefinition 
	extends CaseDefinition{
	}

@lazy
rule FlowConnectionDefinitionRule
	transform s : XMIni!FlowConnectionDefinition
	to t : SysMini!FlowConnectionDefinition 
	extends FlowConnectionDefinition{
	}

@lazy
rule InterfaceDefinitionRule
	transform s : XMIni!InterfaceDefinition
	to t : SysMini!InterfaceDefinition 
	extends InterfaceDefinition{
	}

@lazy
rule AllocationDefinitionRule
	transform s : XMIni!AllocationDefinition
	to t : SysMini!AllocationDefinition 
	extends AllocationDefinition{
	}
	
@lazy
rule AnalysisCaseDefinitionRule
	transform s : XMIni!AnalysisCaseDefinition
	to t : SysMini!AnalysisCaseDefinition 
	extends AnalysisCaseDefinition{
	}
	
@lazy
rule VerificationCaseDefinitionRule
	transform s : XMIni!VerificationCaseDefinition
	to t : SysMini!VerificationCaseDefinition 
	extends VerificationCaseDefinition{
	}
	
@lazy
rule UseCaseDefinitionRule
	transform s : XMIni!UseCaseDefinition
	to t : SysMini!UseCaseDefinition 
	extends UseCaseDefinition{
	}

@lazy
rule ConstraintDefinitionRule
	transform s : XMIni!ConstraintDefinition
	to t : SysMini!ConstraintDefinition 
	extends ConstraintDefinition{
	}

@lazy
rule RequirementDefinitionRule
	transform s : XMIni!RequirementDefinition
	to t : SysMini!RequirementDefinition 
	extends RequirementDefinition{
	}

@lazy
rule ConcernDefinitionRule
	transform s : XMIni!ConcernDefinition
	to t : SysMini!ConcernDefinition 
	extends ConcernDefinition{
	}

@lazy
rule ViewpointDefinitionRule
	transform s : XMIni!ViewpointDefinition
	to t : SysMini!ViewpointDefinition 
	extends ViewpointDefinition{
	}
		
@lazy
rule OccurrenceUsageRule
	transform s : XMIni!OccurrenceUsage
	to t : SysMini!OccurrenceUsage
	extends OccurrenceUsage{
	}

@lazy
rule ReferenceUsageRule
	transform s : XMIni!ReferenceUsage
	to t : SysMini!ReferenceUsage
	extends ReferenceUsage{
	}
	
@lazy
rule AttributeUsageRule
	transform s : XMIni!AttributeUsage
	to t : SysMini!AttributeUsage
	extends AttributeUsage{
	}

@lazy
rule SuccessionAsUsageRule
	transform s : XMIni!SuccessionAsUsage
	to t : SysMini!SuccessionAsUsage
	extends SuccessionAsUsage{
	}

@lazy
rule ExtendedUsageRule
	transform s : XMIni!Usage
	to t : SysMini!Usage
	extends ExtendedUsage{
	}
	
@lazy
rule BindingConnectorAsUsageRule
	transform s : XMIni!BindingConnectorAsUsage
	to t : SysMini!BindingConnectorAsUsage
	extends BindingConnectorAsUsage{
	}
	
@lazy
rule ItemUsageRule
	transform s : XMIni!ItemUsage
	to t : SysMini!ItemUsage
	extends ItemUsage{
	}
	
@lazy
rule ActionUsageRule
	transform s : XMIni!ActionUsage
	to t : SysMini!ActionUsage
	extends ActionUsage{
	}
	
@lazy
rule PortUsageRule
	transform s : XMIni!PortUsage
	to t : SysMini!PortUsage
	extends PortUsage{
	}
	
@lazy
rule EventOccurrenceUsageRule
	transform s : XMIni!EventOccurrenceUsage
	to t : SysMini!EventOccurrenceUsage
	extends EventOccurrenceUsage{
	}
	
@lazy
rule EnumerationUsageRule
	transform s : XMIni!EnumerationUsage
	to t : SysMini!EnumerationUsage
	extends EnumerationUsage{
	}
	
@lazy
rule PartUsageRule
	transform s : XMIni!PartUsage
	to t : SysMini!PartUsage
	extends PartUsage{
	}
	
@lazy
rule MetadataUsageRule
	transform s : XMIni!MetadataUsage
	to t : SysMini!MetadataUsage
	extends MetadataUsage{
	}
	
@lazy
rule StateUsageRule
	transform s : XMIni!StateUsage
	to t : SysMini!StateUsage
	extends StateUsage{
	}
	
@lazy
rule TransitionUsageRule
	transform s : XMIni!TransitionUsage
	to t : SysMini!TransitionUsage
	extends TransitionUsage{
	}
	
@lazy
rule AcceptActionUsageRule
	transform s : XMIni!AcceptActionUsage
	to t : SysMini!AcceptActionUsage
	extends UsageRule{
	}
	
@lazy
rule CalculationUsageRule
	transform s : XMIni!CalculationUsage
	to t : SysMini!CalculationUsage
	extends CalculationUsage{
	}
	
@lazy
rule PerformActionUsageRule
	transform s : XMIni!PerformActionUsage
	to t : SysMini!PerformActionUsage
	extends PerformActionUsage{
	}
	
@lazy
rule SendActionUsageRule
	transform s : XMIni!SendActionUsage
	to t : SysMini!SendActionUsage
	extends UsageRule{
	}
	
@lazy
rule IfActionUsageRule
	transform s : XMIni!IfActionUsage
	to t : SysMini!IfActionUsage
	extends UsageRule{
	}
	
@lazy
rule AssignmentActionUsageRule
	transform s : XMIni!AssignmentActionUsage
	to t : SysMini!AssignmentActionUsage
	extends UsageRule{
	}
	
@lazy
rule ConnectionUsageRule
	transform s : XMIni!ConnectionUsage
	to t : SysMini!ConnectionUsage
	extends ConnectionUsage{
	}
	
@lazy
rule ViewUsageRule
	transform s : XMIni!ViewUsage
	to t : SysMini!ViewUsage
	extends ViewUsage{
	}
	
@lazy
rule RenderingUsageRule
	transform s : XMIni!RenderingUsage
	to t : SysMini!RenderingUsage
	extends RenderingUsage{
	}
	
@lazy
rule ExhibitStateUsageRule
	transform s : XMIni!ExhibitStateUsage
	to t : SysMini!ExhibitStateUsage
	extends ExhibitStateUsage{
	}
	
@lazy
rule CaseUsageRule
	transform s : XMIni!CaseUsage
	to t : SysMini!CaseUsage
	extends CaseBody{
	}
	
@lazy
rule WhileLoopActionUsageRule
	transform s : XMIni!WhileLoopActionUsage
	to t : SysMini!WhileLoopActionUsage
	extends UsageRule{
	}
	
@lazy
rule ForLoopActionUsageRule
	transform s : XMIni!ForLoopActionUsage
	to t : SysMini!ForLoopActionUsage
	extends UsageRule{
	}
	
@lazy
rule DecisionNodeRule
	transform s : XMIni!DecisionNode
	to t : SysMini!DecisionNode
	extends DecisionNode{
	}
	
@lazy
rule ForkNodeRule
	transform s : XMIni!ForkNode
	to t : SysMini!ForkNode
	extends ForkNode{
	}
	
@lazy
rule MergeNodeRule
	transform s : XMIni!MergeNode
	to t : SysMini!MergeNode
	extends MergeNode{
	}
	
@lazy
rule JoinNodeRule
	transform s : XMIni!JoinNode
	to t : SysMini!JoinNode
	extends JoinNode{
	}
	
@lazy
rule FlowConnectionUsageRule
	transform s : XMIni!FlowConnectionUsage
	to t : SysMini!FlowConnectionUsage
	extends FlowConnectionUsage{
	}
	
@lazy
rule InterfaceUsageRule
	transform s : XMIni!InterfaceUsage
	to t : SysMini!InterfaceUsage
	extends InterfaceUsage{
	}
	
@lazy
rule AllocationUsageRule
	transform s : XMIni!AllocationUsage
	to t : SysMini!AllocationUsage
	extends AllocationUsage{
	}
	
@lazy
rule AnalysisCaseUsageRule
	transform s : XMIni!AnalysisCaseUsage
	to t : SysMini!AnalysisCaseUsage
	extends AnalysisCaseUsage{
	}
	
@lazy
rule VerificationCaseUsageRule
	transform s : XMIni!VerificationCaseUsage
	to t : SysMini!VerificationCaseUsage
	extends VerificationCaseUsage{
	}
	
@lazy
rule UseCaseUsageRule
	transform s : XMIni!UseCaseUsage
	to t : SysMini!UseCaseUsage
	extends UseCaseUsage{
	}
	
@lazy
rule SuccessionFlowConnectionUsageRule
	transform s : XMIni!SuccessionFlowConnectionUsage
	to t : SysMini!SuccessionFlowConnectionUsage
	extends SuccessionFlowConnectionUsage{
	}
	
@lazy
rule IncludeUseCaseUsageRule
	transform s : XMIni!IncludeUseCaseUsage
	to t : SysMini!IncludeUseCaseUsage
	extends IncludeUseCaseUsage{
	}
	
@lazy
rule ConstraintUsageUsageRule
	transform s : XMIni!ConstraintUsage
	to t : SysMini!ConstraintUsage
	extends ConstraintUsage{
	}
	
@lazy
rule RequirementUsageRule
	transform s : XMIni!RequirementUsage
	to t : SysMini!RequirementUsage
	extends RequirementUsage{
	}
	
@lazy
rule AssertConstraintUsageRule
	transform s : XMIni!AssertConstraintUsage
	to t : SysMini!AssertConstraintUsage
	extends AssertConstraintUsage{
	}
	
@lazy
rule ConcernUsageRule
	transform s : XMIni!ConcernUsage
	to t : SysMini!ConcernUsage
	extends ConcernUsage{
	}
	
@lazy
rule ViewpointUsageRule
	transform s : XMIni!ViewpointUsage
	to t : SysMini!ViewpointUsage
	extends ViewpointUsage{
	}
	
@lazy
rule SatisfyRequirementUsageRule
	transform s : XMIni!SatisfyRequirementUsage
	to t : SysMini!SatisfyRequirementUsage
	extends SatisfyRequirementUsage{
	}

@lazy
rule ElementFilterMembershipRule
	transform s : XMIni!ElementFilterMembership
	to t : SysMini!ElementFilterMembership
	extends ElementFilterMembership{
	}

@lazy
rule MembershipRule
	transform s : XMIni!Membership
	to t : SysMini!Membership
	extends Membership{
	}

@lazy
rule OperatorExpressionRule
	transform s : XMIni!OperatorExpression
	to t : SysMini!OperatorExpression
	extends OperatorExpression{
	}
