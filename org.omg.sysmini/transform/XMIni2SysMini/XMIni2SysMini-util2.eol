
/* Old Architecture */
operation XMIni!Element isTypeNameOf(str : String){
	return (self.type().name == str);
}

operation SysMini!Element setVisibility(s: XMIni!Element){
	self.hasVisibility = true;
	switch (s.visibility.value.asString()){
		case "0": self.visibility = SysMini!VisibilityKind#private;
		case "1": self.visibility = SysMini!VisibilityKind#protected;
		case "2": self.visibility = SysMini!VisibilityKind#public;
	}
}

operation SysMini!Element setPortionKind(s: XMIni!Element){
	switch (s.portionKind.value.asString()){
		case "0": self.portionKind = SysMini!PortionKind#timeslice;
		case "1": self.portionKind = SysMini!PortionKind#snapshot;
	}
}


operation OrderedSet getElementOf(typeName : String){
	return self.select(e|e.type().name == typeName);
}

operation SysMini!Usage setFeatureDirection(s: XMIni!Usage){
	switch (s.direction.value.asString()){
//		case "0": self.direction = SysMini!FeatureDirectionKind#in;
		case "1": self.direction = SysMini!FeatureDirectionKind#inout;
		case "2": self.direction = SysMini!FeatureDirectionKind#out;
	}
}

operation XMIni!FeatureValue getFeatureValueOperator(){
	var conditionalExpression = self.ownedRelatedElement.first();
	if (conditionalExpression.isTypeNameOf("OperatorExpression")){
	//	conditionalExpression.operator.println();
	//	conditionalExpression.operand.println();
		return conditionalExpression.operator;
	}
	else {
		return null;
	}
}

operation XMIni!Feature getMultiplicityRange(){
	for (owningMembership in self.ownedRelationship.getElementOf("OwningMembership")){
		for (element in owningMembership.ownedRelatedElement){
			if (element.isTypeNameOf("MultiplicityRange")){
				for (e in element.ownedRelationship.getElementOf("OwningMembership")){
					if (e.ownedRelatedElement.size() == 1 and e.ownedRelatedElement.first().isTypeNameOf("LiteralInteger")){
						return "["+e.ownedRelatedElement.first().value.asString()+"]";
					}
					else if (e.ownedRelatedElement.size() == 1 and e.ownedRelatedElement.first().isTypeNameOf("LiteralInfinity")){
						return "[*]";
					}
					else if (e.ownedRelatedElement.size() == 2 and e.ownedRelatedElement.second().isTypeNameOf("LiteralInteger")){
						return "["+e.ownedRelatedElement.first().value.asString()+".."+e.ownedRelatedElement.second().value.asString()+"]";
					}
					else if (e.ownedRelatedElement.size() == 2 and e.ownedRelatedElement.second().isTypeNameOf("LiteralInfinity")){
						return "["+e.ownedRelatedElement.first().value.asString()+"..*]";
					}
				}
			}
			else {
				return null;
			}
		}
	}
}

operation XMIni!Feature getFeatureSpecialization(){
	for (owningMembership in self.ownedRelationship.first()){
		switch (owningMembership.type().name){
			case "FeatureTyping":{
				return ": "+owningMembership.getDeclaredName();
			}
			case "Subsetting":{
				return ":> "+owningMembership.getDeclaredName();
			}
			case "OwnedReferenceSubsetting":{
				return "::> "+owningMembership.getDeclaredName();			
			}
			case "Redefinition":{
				return ":>> "+owningMembership.getDeclaredName();
			}
//			case "OwningMembership":{
//				owningMembership.ownedRelationship.println();
//			}
		}
	}
}

operation XMIni!Element TransitionSourceMember() : String {
	var membership = self.ownedRelationship.getElementOf("Membership").first();
	return membership.memberElement.declaredName.space();
}

operation XMIni!Element EmptyParameterMember() : String {
	return "";
}

operation XMIni!Element TriggerActionMember() : String {
	return "";
}

operation XMIni!Element GuardExpressionMember() : String {
	return "";
}

operation XMIni!Element EffectBehaviorMember() : String {
	return "";
}

operation XMIni!Element TransitionSuccessionMember() : String {
	return "";
}

operation XMIni!Specialization getDeclaredName(){
	if (self.declaredName != null){
		return self.declaredName;
	}
	else if (self.type.name == null){
		return self.type.declaredName;
	}
}

operation XMIni!PortUsage getReferenceSubsetting(){
	return self.getConnectorEnd();
}

operation XMIni!EndFeatureMembership getFlowEndMember(){
	for (ownedRelationship in self.ownedRelatedElement){
		if (ownedRelationship.isTypeNameOf("ItemFlowEnd")){
			var itemFlowEnd = ownedRelationship;
			var str = "";
			for (o in itemFlowEnd.ownedRelationship){
				if (o.isTypeNameOf("ReferenceSubsetting")){
					str += o.referencedFeature.declaredName;
					str += ".";
				}
				else if (o.isTypeNameOf("FeatureMembership") and o.ownedRelatedElement.size() == 1){
					var featureChainPrefix = o.ownedRelatedElement.first();
					str += featureChainPrefix.ownedRelationship.first().redefinedFeature.declaredName;
				}
			}
			return str;
		}
		else {
			return null;
		}
	}
}

operation XMIni!FeatureMembership getItemFeatureMember(){
	var itemFeature = self.ownedRelatedElement.first();
	for (ownedRelationship in itemFeature.ownedRelationship){
		if (ownedRelationship.isTypeNameOf("FeatureTyping")){
			return ownedRelationship.type.declaredName;
		}
		else {
			return itemFeature.getMultiplicityRange();
		}
	}
}

operation XMIni!Usage getConnectorEnd(){
	if (self.declaredName != null){
		return self.declaredName;
	}
	else{
		return self.OwnedReferenceSubsetting();
	}
}

operation XMIni!Element OwnedReferenceSubsetting() : String {
	if (self.ownedRelationship.first().isTypeNameOf("ReferenceSubsetting")){
		var referenceSubsetting = self.ownedRelationship.first();
		if (referenceSubsetting.referencedFeature == null){
			return "";
		}
		else if (referenceSubsetting.referencedFeature.declaredName != null){
			return referenceSubsetting.referencedFeature.declaredName;
		}
		else{
			var str = "";
			if (referenceSubsetting.ownedRelatedElement.size() == 0){
				return "";
			}
			for (featureChain in referenceSubsetting.ownedRelatedElement.first().ownedRelationship.getElementOf("FeatureChaining")){
				if (featureChain.chainingFeature.declaredName != null){
					str += featureChain.chainingFeature.declaredName;
					str += ".";
				}
				else if (featureChain.chainingFeature.equivalent().declaredName != null){
					str += featureChain.chainingFeature.equivalent().declaredName;
					str += ".";
				}
				else if (featureChain.chainingFeature.ownedRelationship.first().isTypeNameOf("Redefinition")){								str += featureChain.chainingFeature.ownedRelationship.first().redefinedFeature.declaredName;
						str += ".";
				}
			}
			return str.substring(0, str.length()-1);
		}
	}
}


operation Any space(){
	if (self == null or self == ""){
		return "";
	}
	else{
		return self.asString()+" ";
	}
}

/* New Architecture */
operation init(){
	for (e in XMIni!Element){
		e.name = "";
	}
}

operation main_new(){
	init();
	var rootNamespace = new SysMini!Namespace;
	XMIni!Namespace.all.first().RootNameSpace(rootNamespace);
}

operation XMIni!Element OR(){
	return self.ownedRelationship;
}

operation XMIni!Element OE(){
	return self.ownedRelatedElement;
}

operation XMIni!Namespace RootNameSpace(node){
	for (packageBodyElement in self.OR()){
		switch (packageBodyElement.type().name){
			case "OwningMembership": packageBodyElement.PackageMember(node);
			case "ElementFilterMembership": packageBodyElement.ElementFilterMember(node);
			case "Membership": packageBodyElement.AliasMember(node);
			case "Import": packageBodyElement.Import(node);
		}
	}
}

operation XMIni!Element addElementTo(node){
	node.body.add(self.equivalent());
}

operation XMIni!OwningMembership PackageMember(node){
	var memberPrefix = self.visibility.name;
	for (ownedRelatedElement in self.OE()){
		switch (ownedRelatedElement.type().name){
			//Definition Element
			case "Package":                       ownedRelatedElement.addElementTo(node);
			case "LibraryPackage":                ownedRelatedElement.addElementTo(node);
			case "AnnotatingElement":             ownedRelatedElement.addElementTo(node);
			case "Dependency":                    ownedRelatedElement.addElementTo(node);
			case "AttributeDefinition":           ownedRelatedElement.addElementTo(node);
			case "EnumerationDefinition":         ownedRelatedElement.addElementTo(node);
			case "OccurrenceDefinition":          ownedRelatedElement.addElementTo(node);
//	TBD		case "IndividualDefinition":          ownedRelatedElement.addElementTo(node);
			case "ItemDefinition":                ownedRelatedElement.addElementTo(node);
			case "MetadataDefinition":            ownedRelatedElement.addElementTo(node);
			case "PartDefinition":                ownedRelatedElement.addElementTo(node);
			case "ConnectionDefinition":          ownedRelatedElement.addElementTo(node);
			case "FlowConnectionDefinition":      ownedRelatedElement.addElementTo(node);
			case "InterfaceDefinition":           ownedRelatedElement.addElementTo(node);
			case "AllocationDefinition":          ownedRelatedElement.addElementTo(node);
			case "PortDefinition":                ownedRelatedElement.addElementTo(node);
			case "ActionDefinition":              ownedRelatedElement.addElementTo(node);
			case "CalculationDefinition":         ownedRelatedElement.addElementTo(node);
			case "StateDefinition":               ownedRelatedElement.addElementTo(node);
			case "ConstraintDefinition":          ownedRelatedElement.addElementTo(node);
			case "RequirementDefinition":         ownedRelatedElement.addElementTo(node);
			case "ConcernDefinition":             ownedRelatedElement.addElementTo(node);
			case "CaseDefinition":                ownedRelatedElement.addElementTo(node);
			case "AnalysisCaseDefinition":        ownedRelatedElement.addElementTo(node);
			case "VerificationCaseDefinition":    ownedRelatedElement.addElementTo(node);
			case "UseCaseDefinition":             ownedRelatedElement.addElementTo(node);
			case "ViewDefinition":                ownedRelatedElement.addElementTo(node);
			case "ViewpointDefinition":           ownedRelatedElement.addElementTo(node);
			case "RenderingDefinition":           ownedRelatedElement.addElementTo(node);
			case "ExtendedDefinition":            ownedRelatedElement.addElementTo(node);
			//Body Elements
			//NonOccurrenceUsageElement
			case "DefaultReferenceUsage":         ownedRelatedElement.addElementTo(node);
			case "ReferenceUsage":                ownedRelatedElement.addElementTo(node);
			case "AttributeUsage":                ownedRelatedElement.addElementTo(node);
			case "EnumerationUsage":              ownedRelatedElement.addElementTo(node);
			case "BindingConnectorAsUsage":       ownedRelatedElement.addElementTo(node);
			case "SuccessionAsUsage":             ownedRelatedElement.addElementTo(node);
			case "ExtendedUsage":                 ownedRelatedElement.addElementTo(node);
			//StructureUsageElement
			case "OccurrenceUsage":               ownedRelatedElement.addElementTo(node);
//	TBD		case "IndividualUsage":               ownedRelatedElement.addElementTo(node);
			case "PortionUsage":                  ownedRelatedElement.addElementTo(node);
			case "EventOccurrenceUsage":          ownedRelatedElement.addElementTo(node);
			case "ItemUsage":                     ownedRelatedElement.addElementTo(node);
			case "PartUsage":                     ownedRelatedElement.addElementTo(node);
			case "ViewUsage":                     ownedRelatedElement.addElementTo(node);
			case "RenderingUsage":                ownedRelatedElement.addElementTo(node);
			case "PortUsage":                     ownedRelatedElement.addElementTo(node);
			case "ConnectionUsage":               ownedRelatedElement.addElementTo(node);
			case "InterfaceUsage":                ownedRelatedElement.addElementTo(node);
			case "AllocationUsage":               ownedRelatedElement.addElementTo(node);
			case "Message":                       ownedRelatedElement.addElementTo(node);
			case "FlowConnectionUsage":           ownedRelatedElement.addElementTo(node);
			case "SuccessionFlowConnectionUsage": ownedRelatedElement.addElementTo(node);
			//BehaviorUsageElement
			case "ActionUsage":                   ownedRelatedElement.addElementTo(node);
			case "CalculationUsage":              ownedRelatedElement.addElementTo(node);
			case "StateUsage":                    ownedRelatedElement.addElementTo(node);
			case "ConstraintUsage":               ownedRelatedElement.addElementTo(node);
			case "RequirementUsage":              ownedRelatedElement.addElementTo(node);
			case "ConcernUsage":                  ownedRelatedElement.addElementTo(node);
			case "CaseUsage":                     ownedRelatedElement.addElementTo(node);
			case "AnalysisCaseUsage":             ownedRelatedElement.addElementTo(node);
			case "VerificationCaseUsage":         ownedRelatedElement.addElementTo(node);
			case "UseCaseUsage":                  ownedRelatedElement.addElementTo(node);
			case "ViewpointUsage":                ownedRelatedElement.addElementTo(node);
			case "PerformActionUsage":            ownedRelatedElement.addElementTo(node);
			case "ExhibitStateUsage":             ownedRelatedElement.addElementTo(node);
			case "IncludeUseCaseUsage":           ownedRelatedElement.addElementTo(node);
			case "AssertConstraintUsage":         ownedRelatedElement.addElementTo(node);
			case "SatisfyRequirementUsage":       ownedRelatedElement.addElementTo(node);
		}
	}
}

operation XMIni!ElementFilterMembership ElementFilterMember(node){
// TBD
}

operation XMIni!Membership AliasMember(node){
// TBD
}

operation XMIni!Import Import(node){
	self.addElementTo(node);
}

operation XMIni!OwningMembership DefinitionMember(node){
	var memberPrefix = self.visibility.name;
	for (ownedRelatedElement in self.OE()){
		switch (ownedRelatedElement.type().name){
			//Definition Element
			case "Package":                       ownedRelatedElement.addElementTo(node);
			case "LibraryPackage":                ownedRelatedElement.addElementTo(node);
			case "AnnotatingElement":             ownedRelatedElement.addElementTo(node);
			case "Dependency":                    ownedRelatedElement.addElementTo(node);
			case "AttributeDefinition":           ownedRelatedElement.addElementTo(node);
			case "EnumerationDefinition":         ownedRelatedElement.addElementTo(node);
			case "OccurrenceDefinition":          ownedRelatedElement.addElementTo(node);
//	TBD		case "IndividualDefinition":          ownedRelatedElement.addElementTo(node);
			case "ItemDefinition":                ownedRelatedElement.addElementTo(node);
			case "MetadataDefinition":            ownedRelatedElement.addElementTo(node);
			case "PartDefinition":                ownedRelatedElement.addElementTo(node);
			case "ConnectionDefinition":          ownedRelatedElement.addElementTo(node);
			case "FlowConnectionDefinition":      ownedRelatedElement.addElementTo(node);
			case "InterfaceDefinition":           ownedRelatedElement.addElementTo(node);
			case "AllocationDefinition":          ownedRelatedElement.addElementTo(node);
			case "PortDefinition":                ownedRelatedElement.addElementTo(node);
			case "ActionDefinition":              ownedRelatedElement.addElementTo(node);
			case "CalculationDefinition":         ownedRelatedElement.addElementTo(node);
			case "StateDefinition":               ownedRelatedElement.addElementTo(node);
			case "ConstraintDefinition":          ownedRelatedElement.addElementTo(node);
			case "RequirementDefinition":         ownedRelatedElement.addElementTo(node);
			case "ConcernDefinition":             ownedRelatedElement.addElementTo(node);
			case "CaseDefinition":                ownedRelatedElement.addElementTo(node);
			case "AnalysisCaseDefinition":        ownedRelatedElement.addElementTo(node);
			case "VerificationCaseDefinition":    ownedRelatedElement.addElementTo(node);
			case "UseCaseDefinition":             ownedRelatedElement.addElementTo(node);
			case "ViewDefinition":                ownedRelatedElement.addElementTo(node);
			case "ViewpointDefinition":           ownedRelatedElement.addElementTo(node);
			case "RenderingDefinition":           ownedRelatedElement.addElementTo(node);
			case "ExtendedDefinition":            ownedRelatedElement.addElementTo(node);
		}
	}
}

operation XMIni!VariantMembership VariantUsageMember(node){
	var memberPrefix = self.visibility.name;
	for (ownedRelatedElement in self.OE()){
		switch (ownedRelatedElement.type().name){
			//NonOccurrenceUsageElement
//	TBD		case "VariantReference":              ownedRelatedElement.addElementTo(node);
			case "ReferenceUsage":                ownedRelatedElement.addElementTo(node);
			case "AttributeUsage":                ownedRelatedElement.addElementTo(node);
			case "BindingConnectorAsUsage":       ownedRelatedElement.addElementTo(node);
			case "SuccessionAsUsage":             ownedRelatedElement.addElementTo(node);
			case "ExtendedUsage":                 ownedRelatedElement.addElementTo(node);
			//StructureUsageElement
			case "OccurrenceUsage":               ownedRelatedElement.addElementTo(node);
//	TBD		case "IndividualUsage":               ownedRelatedElement.addElementTo(node);
			case "PortionUsage":                  ownedRelatedElement.addElementTo(node);
			case "EventOccurrenceUsage":          ownedRelatedElement.addElementTo(node);
			case "ItemUsage":                     ownedRelatedElement.addElementTo(node);
			case "PartUsage":                     ownedRelatedElement.addElementTo(node);
			case "ViewUsage":                     ownedRelatedElement.addElementTo(node);
			case "RenderingUsage":                ownedRelatedElement.addElementTo(node);
			case "PortUsage":                     ownedRelatedElement.addElementTo(node);
			case "ConnectionUsage":               ownedRelatedElement.addElementTo(node);
			case "InterfaceUsage":                ownedRelatedElement.addElementTo(node);
			case "AllocationUsage":               ownedRelatedElement.addElementTo(node);
			case "Message":                       ownedRelatedElement.addElementTo(node);
			case "FlowConnectionUsage":           ownedRelatedElement.addElementTo(node);
			case "SuccessionFlowConnectionUsage": ownedRelatedElement.addElementTo(node);
			//BehaviorUsageElement
			case "ActionUsage":                   ownedRelatedElement.addElementTo(node);
			case "CalculationUsage":              ownedRelatedElement.addElementTo(node);
			case "StateUsage":                    ownedRelatedElement.addElementTo(node);
			case "ConstraintUsage":               ownedRelatedElement.addElementTo(node);
			case "RequirementUsage":              ownedRelatedElement.addElementTo(node);
			case "ConcernUsage":                  ownedRelatedElement.addElementTo(node);
			case "CaseUsage":                     ownedRelatedElement.addElementTo(node);
			case "AnalysisCaseUsage":             ownedRelatedElement.addElementTo(node);
			case "VerificationCaseUsage":         ownedRelatedElement.addElementTo(node);
			case "UseCaseUsage":                  ownedRelatedElement.addElementTo(node);
			case "ViewpointUsage":                ownedRelatedElement.addElementTo(node);
			case "PerformActionUsage":            ownedRelatedElement.addElementTo(node);
			case "ExhibitStateUsage":             ownedRelatedElement.addElementTo(node);
			case "IncludeUseCaseUsage":           ownedRelatedElement.addElementTo(node);
			case "AssertConstraintUsage":         ownedRelatedElement.addElementTo(node);
			case "SatisfyRequirementUsage":       ownedRelatedElement.addElementTo(node);
		}
	}
}

operation XMIni!FeatureMembership XOccurrenceUsageMember(node){
	var memberPrefix = self.visibility.name;
	for (ownedRelatedElement in self.OE()){
		switch (ownedRelatedElement.type().name){
			//NonOccurrenceUsageElement
			case "DefaultReferenceUsage":         ownedRelatedElement.addElementTo(node);
			case "ReferenceUsage":                ownedRelatedElement.addElementTo(node);
			case "AttributeUsage":                ownedRelatedElement.addElementTo(node);
			case "EnumerationUsage":              ownedRelatedElement.addElementTo(node);
			case "BindingConnectorAsUsage":       ownedRelatedElement.addElementTo(node);
			case "SuccessionAsUsage":             ownedRelatedElement.addElementTo(node);
			case "ExtendedUsage":                 ownedRelatedElement.addElementTo(node);
			//StructureUsageElement
			case "OccurrenceUsage":               ownedRelatedElement.addElementTo(node);
//			case "IndividualUsage":               ownedRelatedElement.addElementTo(node);
			case "PortionUsage":                  ownedRelatedElement.addElementTo(node);
			case "EventOccurrenceUsage":          ownedRelatedElement.addElementTo(node);
			case "ItemUsage":                     ownedRelatedElement.addElementTo(node);
			case "PartUsage":                     ownedRelatedElement.addElementTo(node);
			case "ViewUsage":                     ownedRelatedElement.addElementTo(node);
			case "RenderingUsage":                ownedRelatedElement.addElementTo(node);
			case "PortUsage":                     ownedRelatedElement.addElementTo(node);
			case "ConnectionUsage":               ownedRelatedElement.addElementTo(node);
			case "InterfaceUsage":                ownedRelatedElement.addElementTo(node);
			case "AllocationUsage":               ownedRelatedElement.addElementTo(node);
			case "Message":                       ownedRelatedElement.addElementTo(node);
			case "FlowConnectionUsage":           ownedRelatedElement.addElementTo(node);
			case "SuccessionFlowConnectionUsage": ownedRelatedElement.addElementTo(node);
			//BehaviorUsageElement
			case "ActionUsage":                   ownedRelatedElement.addElementTo(node);
			case "CalculationUsage":              ownedRelatedElement.addElementTo(node);
			case "StateUsage":                    ownedRelatedElement.addElementTo(node);
			case "ConstraintUsage":               ownedRelatedElement.addElementTo(node);
			case "RequirementUsage":              ownedRelatedElement.addElementTo(node);
			case "ConcernUsage":                  ownedRelatedElement.addElementTo(node);
			case "CaseUsage":                     ownedRelatedElement.addElementTo(node);
			case "AnalysisCaseUsage":             ownedRelatedElement.addElementTo(node);
			case "VerificationCaseUsage":         ownedRelatedElement.addElementTo(node);
			case "UseCaseUsage":                  ownedRelatedElement.addElementTo(node);
			case "ViewpointUsage":                ownedRelatedElement.addElementTo(node);
			case "PerformActionUsage":            ownedRelatedElement.addElementTo(node);
			case "ExhibitStateUsage":             ownedRelatedElement.addElementTo(node);
			case "IncludeUseCaseUsage":           ownedRelatedElement.addElementTo(node);
			case "AssertConstraintUsage":         ownedRelatedElement.addElementTo(node);
			case "SatisfyRequirementUsage":       ownedRelatedElement.addElementTo(node);
		}
	}
}

operation XMIni!SuccessionAsUsage EmptySuccessionMember(node){
// TBD
}

operation XMIni!OwningMembership AnnotatingMember(node){
	var memberPrefix = self.visibility.name;
	for (ownedRelatedElement in self.OE()){
		switch (ownedRelatedElement.type().name){
			//AnnotatingElement
			case "Comment":                      ownedRelatedElement.addElementTo(node);
			case "Documentation":                ownedRelatedElement.addElementTo(node);
			case "TextualRepresentation":        ownedRelatedElement.addElementTo(node);
			case "MetadataUsage":                ownedRelatedElement.addElementTo(node);
		}
	}
}

operation XMIni!VariantMembership EnumerationUsageMember(node){
// TBD
}

operation XMIni!FeatureMembership InterfaceXOccurrenceUsageMember(node){
	var memberPrefix = self.visibility.name;
	for (ownedRelatedElement in self.OE()){
		switch (ownedRelatedElement.type().name){
			//InterfaceNonOccurrenceUsageElement
			case "ReferenceUsage":                ownedRelatedElement.addElementTo(node);
			case "AttributeUsage":                ownedRelatedElement.addElementTo(node);
			case "EnumerationUsage":              ownedRelatedElement.addElementTo(node);
			case "BindingConnectorAsUsage":       ownedRelatedElement.addElementTo(node);
			case "SuccessionAsUsage":             ownedRelatedElement.addElementTo(node);
			//InterfaceOccurrenceUsageElement
//	TBD		case "DefaultInterfaceEnd":           ownedRelatedElement.addElementTo(node);
			//StructureUsageElement
			case "OccurrenceUsage":               ownedRelatedElement.addElementTo(node);
//	TBD		case "IndividualUsage":               ownedRelatedElement.addElementTo(node);
			case "PortionUsage":                  ownedRelatedElement.addElementTo(node);
			case "EventOccurrenceUsage":          ownedRelatedElement.addElementTo(node);
			case "ItemUsage":                     ownedRelatedElement.addElementTo(node);
			case "PartUsage":                     ownedRelatedElement.addElementTo(node);
			case "ViewUsage":                     ownedRelatedElement.addElementTo(node);
			case "RenderingUsage":                ownedRelatedElement.addElementTo(node);
			case "PortUsage":                     ownedRelatedElement.addElementTo(node);
			case "ConnectionUsage":               ownedRelatedElement.addElementTo(node);
			case "InterfaceUsage":                ownedRelatedElement.addElementTo(node);
			case "AllocationUsage":               ownedRelatedElement.addElementTo(node);
			case "Message":                       ownedRelatedElement.addElementTo(node);
			case "FlowConnectionUsage":           ownedRelatedElement.addElementTo(node);
			case "SuccessionFlowConnectionUsage": ownedRelatedElement.addElementTo(node);
			//BehaviorUsageElement
			case "ActionUsage":                   ownedRelatedElement.addElementTo(node);
			case "CalculationUsage":              ownedRelatedElement.addElementTo(node);
			case "StateUsage":                    ownedRelatedElement.addElementTo(node);
			case "ConstraintUsage":               ownedRelatedElement.addElementTo(node);
			case "RequirementUsage":              ownedRelatedElement.addElementTo(node);
			case "ConcernUsage":                  ownedRelatedElement.addElementTo(node);
			case "CaseUsage":                     ownedRelatedElement.addElementTo(node);
			case "AnalysisCaseUsage":             ownedRelatedElement.addElementTo(node);
			case "VerificationCaseUsage":         ownedRelatedElement.addElementTo(node);
			case "UseCaseUsage":                  ownedRelatedElement.addElementTo(node);
			case "ViewpointUsage":                ownedRelatedElement.addElementTo(node);
			case "PerformActionUsage":            ownedRelatedElement.addElementTo(node);
			case "ExhibitStateUsage":             ownedRelatedElement.addElementTo(node);
			case "IncludeUseCaseUsage":           ownedRelatedElement.addElementTo(node);
			case "AssertConstraintUsage":         ownedRelatedElement.addElementTo(node);
			case "SatisfyRequirementUsage":       ownedRelatedElement.addElementTo(node);
		}
	}
}





