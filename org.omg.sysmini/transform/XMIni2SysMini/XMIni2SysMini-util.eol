operation init(){
	for (e in XMIni!Element){
		e.name = "";
	}
}

operation XMIni!Relationship addRelationshipTo(rootNode : SysMini!Element){
	if (self.isEntity()){
		rootNode.body.add(self.equivalent());
		self.relationshipTransform(rootNode);
	}
}

operation XMIni!Relationship skipRelationshipTo(rootNode : SysMini!Element){
	if (self.isEntity()){
		self.relationshipTransform(rootNode);
	}
}

operation XMIni!Element addNodeTo(rootNode : SysMini!Element){
	if (self.isEntity()){
		var node = self.equivalent();
		rootNode.body.add(node);
		self.elementTransform(node);
	}
}

operation XMIni!Package addPackageNodeTo(rootNode : SysMini!Element){
	if (self.isEntity()){
		var nowImportPackages = allImportPackages.clone();
		var node = self.equivalent();
		rootNode.body.add(node);
		self.elementTransform(node);
		allImportPackages = nowImportPackages.clone();
	}
}

operation XMIni!ReferenceUsage addReferenceUsageNodeTo(rootNode : SysMini!Element){
	if (self.isEntity() and (not self.isNullReturnParameter())){
		var node = self.equivalent();
		rootNode.body.add(node);
		self.elementTransform(node);
//		if (self.eContainer().isTypeOf("ReturnParameterMembership")){
// TBD			self.println();
//		}
	}
}

operation XMIni!RequirementUsage addRequirementUsageNodeTo(rootNode : SysMini!Element){
	if (self.isEntity() and (not self.isObjectiveMembership())){
		var node = self.equivalent();
		rootNode.body.add(node);
		self.elementTransform(node);
	}
}

operation XMIni!RequirementUsage isObjectiveMembership(){
	return (self.eContainer().isTypeOf("ObjectiveMembership") and (self.declaredName == null or self.declaredName == ""));
}

operation XMIni!ReferenceUsage isNullReturnParameter(){
	return (self.eContainer().isTypeOf("ReturnParameterMembership") and (self.declaredName == null or self.declaredName == ""));
}


operation XMIni!Element isEntity(){
	return (self.name != "*");
}

operation XMIni!Element tag(){
	self.name = "*";
}

operation XMIni!Element isTypeOf(str : String){
	return (self.type().name == str);
}

operation SysMini!Element setVisibility(s: XMIni!Element){
	self.hasVisibility = true;
	switch (s.visibility.value.asString()){
		case "0": self.visibility = SysMini!VisibilityKind#private;
		case "1": self.visibility = SysMini!VisibilityKind#protected;
		case "2": self.visibility = SysMini!VisibilityKind#public;
	}
}

operation SysMini!Element setPortionKind(s: XMIni!Element){
	switch (s.portionKind.value.asString()){
		case "0": self.portionKind = SysMini!PortionKind#timeslice;
		case "1": self.portionKind = SysMini!PortionKind#snapshot;
	}
}

operation OrderedSet getElementOf(typeName : String){
	return self.select(e|e.type().name == typeName);
}

operation SysMini!Usage setFeatureDirection(s: XMIni!Usage){
	switch (s.direction.value.asString()){
//		case "0": self.direction = SysMini!FeatureDirectionKind#in;
		case "1": self.direction = SysMini!FeatureDirectionKind#inout;
		case "2": self.direction = SysMini!FeatureDirectionKind#out;
	}
}

operation XMIni!Feature getMultiplicityRange(){
	for (owningMembership in self.ownedRelationship.getElementOf("OwningMembership")){
		for (element in owningMembership.ownedRelatedElement){
			if (element.isTypeOf("MultiplicityRange")){
				var e = element.ownedRelationship.getElementOf("OwningMembership");
				if (e.ownedRelatedElement.size() == 1 and e.first().ownedRelatedElement.first().isTypeOf("LiteralInteger")){
					element.tagAllOwnedElement();
					return "["+e.first().ownedRelatedElement.first().value.asString()+"]";
				}
				else if (e.ownedRelatedElement.size() == 1 and e.first().ownedRelatedElement.first().isTypeOf("LiteralInfinity")){
					element.tagAllOwnedElement();
					return "[*]";
				}
				else if (e.ownedRelatedElement.size() == 2 and e.second().ownedRelatedElement.first().isTypeOf("LiteralInteger")){
					element.tagAllOwnedElement();
					return "["+e.first().ownedRelatedElement.first().value.asString()+".."+e.second().ownedRelatedElement.first().value.asString()+"]";
				}
				else if (e.ownedRelatedElement.size() == 2 and e.second().ownedRelatedElement.first().isTypeOf("LiteralInfinity")){
					element.tagAllOwnedElement();
					return "["+e.first().ownedRelatedElement.first().value.asString()+"..*]";			
				}
			}
			else {
				return null;
			}
		}
	}
}

operation XMIni!Feature getFeatureNote(){
	for (owningMembership in self.ownedRelationship){
		switch (owningMembership.type().name){
			case "FeatureTyping":{
				return ":";
			}
			case "Subsetting":{
				return ":>";
			}
			case "OwnedReferenceSubsetting":{
				return "::>";			
			}
			case "Redefinition":{
				return ":>>";
			}
		}
	}
}


operation clearImportPackage(text){
	if (text != null and self != ""){
		var n = text.split("::");
		if (n.size() == 2){
			for (package in allImportPackages){
				if (package ==  n.first()){
					text = n.second();
				}
				else if (package.length() < n.first().length() and package == n.first().substring(0, package.length())){
					text = n.second();
				}
			}
		}
	}
	return text;
}


operation XMIni!Feature getFeatureSpecialization(){
	var str = "";
	for (owningMembership in self.ownedRelationship){
		switch (owningMembership.type().name){
			case "FeatureTyping":{
				 str = "FeatureTyping";
				 break;
			}
			case "Subsetting":{
				 str = "Subsetting";
				 break;
			}
			case "OwnedReferenceSubsetting":{
				 str = "OwnedReferenceSubsetting";
				 break;		
			}
			case "Redefinition":{
				 str = "Redefinition";
				 break;
			}
		}
	}
	var owningMembership = self.ownedRelationship.getElementOf(str).first();
	if (owningMembership.isKindOf(XMIni!Specialization) and (not owningMembership.isTypeOf("ConjugatedPortTyping"))){
		var object = owningMembership.getDeclaredName();
		if (object == "" or object == null){
			if (owningMembership.isTypeOf("Redefinition")){
				if (owningMembership.redefinedFeature.declaredName !=  null){
					object = owningMembership.redefinedFeature.declaredName;
				}
				else if (owningMembership.redefinedFeature.isTypeOf("Feature")){
					object = owningMembership.redefinedFeature.FeatureChain();
				}
				else{
					object = owningMembership.redefinedFeature.equivalent().featureSpecialization;
				}
			}
			else if (owningMembership.isTypeOf("FeatureTyping")){
				if (owningMembership.type.declaredName !=  null){
					object = owningMembership.type.declaredName;
				}
				else if (owningMembership.type.isTypeOf("Feature")){
					object = owningMembership.type.FeatureChain();
				}
				else{
					object = owningMembership.type.equivalent().featureSpecialization;
				}
			}
			else if (owningMembership.isTypeOf("Subsetting")){
				if (owningMembership.subsettedFeature.declaredName !=  null){
					object = owningMembership.subsettedFeature.declaredName;
				}
				else if (owningMembership.subsettedFeature.isTypeOf("Feature")){
					object = owningMembership.subsettedFeature.FeatureChain();
				}
				else{
					object = owningMembership.subsettedFeature.equivalent().featureSpecialization;
				}
			}
			else if (owningMembership.isTypeOf("ReferenceSubsetting")){
				if (owningMembership.referencedFeature.declaredName !=  null){
					object = owningMembership.referencedFeature.declaredName;
				}
				else if (owningMembership.referencedFeature.isTypeOf("Feature")){
					object = owningMembership.referencedFeature.FeatureChain();
				}
				else{
					object = owningMembership.referencedFeature.equivalent().featureSpecialization;
				}
			}
		}
		return object;
	}
}

operation XMIni!Element TransitionSourceMember() : String {
	var membership = self.ownedRelationship.getElementOf("Membership").first();
	return membership.memberElement.declaredName.space();
}

operation XMIni!Element EmptyParameterMember() : String {
	return "";
}

operation XMIni!Element TriggerActionMember() : String {
	return "";
}

operation XMIni!Element GuardExpressionMember() : String {
	return "";
}

operation XMIni!Element EffectBehaviorMember() : String {
	return "";
}

operation XMIni!Element TransitionSuccessionMember() : String {
	return "";
}

operation XMIni!Specialization getDeclaredName(){
	if (self.declaredName != null){
		return self.declaredName;
	}
	else if (self.type.isTypeOf(XMIni!EClass)){
		return "";
	}
	else {
		return self.type.declaredName;
	}
}

operation XMIni!PortUsage getReferenceSubsetting(){
	return self.getConnectorEnd();
}

operation XMIni!FeatureMembership getFlowEndMember(){
	for (ownedRelatedElement in self.ownedRelatedElement){
		if (ownedRelatedElement.isTypeOf("ItemFlowEnd")){
			var itemFlowEnd = ownedRelatedElement;
			var str = "";
			for (o in itemFlowEnd.ownedRelationship){
				if (o.isTypeOf("ReferenceSubsetting")){
					str += o.referencedFeature.declaredName;
					str += ".";
					o.tag();
				}
				else if (o.isTypeOf("FeatureMembership") and o.ownedRelatedElement.size() == 1){
					var featureChainPrefix = o.ownedRelatedElement.first();
					str += featureChainPrefix.ownedRelationship.first().redefinedFeature.declaredName;
					featureChainPrefix.tag();
				}
			}
			return str;
		}
		else if (ownedRelatedElement.isTypeOf("EventOccurrenceUsage")){
			return ownedRelatedElement.OwnedReferenceSubsetting();
		}
	}
}

operation XMIni!FeatureMembership getItemFeatureMember(){
	var itemFeature = self.ownedRelatedElement.first();
	for (ownedRelationship in itemFeature.ownedRelationship){
		if (ownedRelationship.isTypeOf("FeatureTyping")){
			ownedRelationship.tag();
			return ownedRelationship.type.declaredName;
		}
		else {
			itemFeature.tag();
			return itemFeature.getMultiplicityRange();
		}
	}
}

operation XMIni!Usage getConnectorEnd(){
	var str = "";
	if (self.declaredName != null and self.declaredName != ""){
		str += self.declaredName;
		str += " ::> ";
	}
	str += self.OwnedReferenceSubsetting();
	str += self.getMultiplicityRange();
	return str;
}

operation XMIni!SuccessionAsUsage getTypeOfSuccessionAsUsage() : String{
// TBD
//	var endFeatureMemberships = self.ownedRelationship.getElementOf("EndFeatureMembership");
//	var first = endFeatureMemberships.first();
//	var second = endFeatureMemberships.second();
//	"".println();
//	if (first.ownedRelatedElement.first().ownedRelationship.getElementOf("ReferenceSubsetting").size() > 0){
//		first.ownedRelatedElement.first().ownedRelationship.getElementOf("ReferenceSubsetting").println("first: ");
//	}
//	if (second.ownedRelatedElement.first().ownedRelationship.getElementOf("ReferenceSubsetting").size() > 0){
//		second.ownedRelatedElement.first().ownedRelationship.getElementOf("ReferenceSubsetting").println("second:");
//	}
	return "SuccessionAsUsage";
}

operation XMIni!EndFeatureMembership getEndFeatureMembership(){
	return self.ownedRelatedElement.first().getConnectorEnd();
	interfaceEnd.tag();
}

operation XMIni!ReferenceUsage getTypeOfReferenceUsage(){
	var ownedRelationship = self.ownedRelationship;
	if (self.eContainer().isTypeOf(XMIni!SubjectMembership)){
		return "SubjectUsage";
	}
	if (self.eContainer().isTypeOf(XMIni!FeatureMembership)){
		return "MetadataBodyUsage";
	}
	else{
		return "ReferenceUsage";
	}
}

operation XMIni!RenderingUsage getTypeOfRenderingUsage(){
	if (self.eContainer().isTypeOf(XMIni!ViewRenderingMembership)){
		return "ViewRenderingUsage";
	}
	else{
		return "RenderingUsage";
	}
}

operation XMIni!Element OwnedReferenceSubsetting() : String {
	if (self.ownedRelationship.first().isTypeOf("ReferenceSubsetting")){
		var referenceSubsetting = self.ownedRelationship.first();
		if (referenceSubsetting.referencedFeature == null){
			return "";
		}
		else if (referenceSubsetting.referencedFeature.declaredName != null){
			self.tag();
			return referenceSubsetting.referencedFeature.declaredName;
		}
		else{
			if (referenceSubsetting.ownedRelatedElement.size() == 0){
				return "";
			}
			else{
				self.tag();
				return referenceSubsetting.ownedRelatedElement.first().FeatureChain();
			}
		}
	}
}

operation XMIni!Feature FeatureChain(){
	var str = "";
	for (featureChain in self.ownedRelationship.getElementOf("FeatureChaining")){
		if (featureChain.chainingFeature != null and featureChain.chainingFeature.declaredName != null){
			str += featureChain.chainingFeature.declaredName;
			str += ".";
		}
		else if (featureChain.chainingFeature != null and featureChain.chainingFeature.equivalent().declaredName != null){
			str += featureChain.chainingFeature.equivalent().declaredName;
			str += ".";

		}
		else if (featureChain.chainingFeature != null and featureChain.chainingFeature.equivalent().featureSpecialization != null){
			str += featureChain.chainingFeature.equivalent().featureSpecialization;
			str += ".";

		}
		else if (featureChain.chainingFeature != null and featureChain.chainingFeature.ownedRelationship.first().isTypeOf("Redefinition")){								str += featureChain.chainingFeature.ownedRelationship.first().redefinedFeature.declaredName;
			str += ".";
		}
		else{
			str += featureChain.declaredName;
			str += ".";
		}
	}
	if (str == "" or str == null){
		return "";
	}
	else{
		self.tag();
		return str.substring(0, str.length()-1);
	}
}

operation Any space(){
	if (self == null or self == ""){
		return "";
	}
	else{
		return self.asString()+" ";
	}
}

operation XMIni!Element getExpression(){
	if (self.ownedRelatedElement.first().isKindOf(XMIni!Expression)){
		return self.ownedRelatedElement.first().OwnedExpression();
	}
	else{
		return "";
	}
}

operation XMIni!Expression OwnedExpression(){
	var str = "";
	switch (self.type().name){
		case "LiteralBoolean":                     str = self.LiteralBoolean();
		case "LiteralString":                      str = self.LiteralString();
		case "LiteralInteger":                     str = self.LiteralInteger();
		case "LiteralRational":                    str = self.LiteralRational();
		case "LiteralInfinity":                    str = self.LiteralInfinity();
		case "NullExpression":                     str = self.NullExpression();
		case "InvocationExpression":               str = self.InvocationExpression();
		case "MetadataAccessExpression":           str = self.MetadataAccessExpression();
		case "FeatureReferenceExpression":         str = self.FeatureReferenceExpression();
		case "FeatureChainExpression":             str = self.FeatureChainExpression();
		case "SelectExpression":                   str = self.SelectExpression();
		case "CollectExpression":                  str = self.CollectExpression();
		case "OperatorExpression":                 str = self.OperatorExpression();
	}
	self.tagAllOwnedElement();
	return str;
}

operation XMIni!Expression LiteralBoolean(){
	return self.value.asString();
}

operation XMIni!Expression LiteralString(){
	return self.value.asString();
}

operation XMIni!Expression LiteralInteger(){
	return self.value.asString();
}

operation XMIni!Expression LiteralRational(){
	return self.value.asString();
}

operation XMIni!Expression LiteralInfinity(){
	return "*";
}

operation XMIni!Expression LiteralExpression(){
	var str = "[LiteralExpression]";
	switch (expression.type().name){
		case "LiteralBoolean":      str = self.LiteralBoolean();
		case "LiteralString":       str = self.LiteralString();
		case "LiteralInteger":      str = self.LiteralInteger();
		case "LiteralRational":     str = self.LiteralRational();
		case "LiteralInfinity":     str = self.LiteralInfinity();
	}
	return str;
}

operation XMIni!Expression NullExpression(){
	return "null";
}

operation XMIni!Expression InvocationExpression(){
	var str = "";
	var ownedFeatureTyping = self.ownedRelationship.getElementOf("FeatureTyping").first();
	if (ownedFeatureTyping.declaredName != null){
		str += ownedFeatureTyping.declaredName;
	}
	else if (ownedFeatureTyping.type != null){
		str += ownedFeatureTyping.type.declaredName;
	}
	else{
		str += ownedFeatureTyping.ownedRelatedElement.first().FeatureChain();
	}
	str += self.ArgumentList();
	return str;
}

operation XMIni!Expression ArgumentList(){
	if (self.ownedRelationship.getElementOf("ParameterMembership").size() == 0){
		return "()";
	}
	var str = "";
	for (t in self.ownedRelationship.getElementOf("ParameterMembership")){
		if (t.ownedRelatedElement.first().ownedRelationship.size() == 2){
			//NamedArgument
			var strr = "";
			var parameterRedefinition = t.ownedRelatedElement.first().ownedRelationship.getElementOf("Redefinition").first();
			if (parameterRedefinition.declaredName != null){
				strr += parameterRedefinition.declaredName;
			}
			else if (parameterRedefinition.redefinedFeature.declaredName != null){
				strr += parameterRedefinition.redefinedFeature.declaredName;
			}
			else{
			}
			strr += "=";
			var argumentValue = t.ownedRelatedElement.first().ownedRelationship.getElementOf("FeatureValue").first();
			strr += argumentValue.getExpression();
			if (strr.split("=").size() == 2 and strr.split("=").first() == strr.split("=").second()){
				strr = strr.split("=").first();
			}
			else if (strr.split("=").size() == 2 and strr.split("=").first() == ""){
				strr = strr.split("=").second();
			}
			str += strr;
		}
		else {
			//Argument
			var argumentValue = t.ownedRelatedElement.first().ownedRelationship.first();
			str += argumentValue.getExpression();
		}
		str += ", ";
	}
	str = str.substring(0, str.length()-2);
	return "(" + str + ")";
}

operation XMIni!Expression MetadataAccessExpression(){
	if (self.declaredName != null){
		return self.declaredName+".metadata";
	}
	else if (self.referencedElement.declaredName != null){
		return self.referencedElement.declaredName+".metadata";
	}
	else{
		return "[MetadataAccessExpression]";
	}
}

operation XMIni!Expression FeatureReferenceExpression(){
	if (self.ownedRelationship.first().isTypeOf("Membership")){
		//FeatureReferenceExpression
		var featureReferenceExpression = self.ownedRelationship.getElementOf("Membership").first();
		featureReferenceExpression.tag();
		return featureReferenceExpression.Membership();
	}
	else if (self.ownedRelationship.first().isTypeOf("OwningMembership")){
		var owningMembership = self.ownedRelationship.getElementOf("OwningMembership").first();
		owningMembership.tag();
		return owningMembership.ownedRelatedElement.first().FeatureChain();
	}
	else if (self.ownedRelationship.first().isTypeOf("FeatureMembership")){
		var featureMembership = self.ownedRelationship.first();
		return featureMembership.ownedRelatedElement.first().OwnedExpression();
	}
	else{
		return "[FeatureReferenceExpression]";
	}
}

operation XMIni!Membership Membership(){
	if (self.declaredName != null){
		return self.declaredName;
	}
	else if (self.memberElement.declaredName != null){
		return self.memberElement.declaredName;
	}
	else if (self.memberElement.equivalent().featureSpecialization != null){
		return self.memberElement.equivalent().featureSpecialization;
	}
	else{
		"[Membership NULL]".println();
		return "[Membership NULL]";
	}
}

operation XMIni!Expression BaseExpression(){
	var str = "[BaseExpression]";
	switch (expression.type().name){
		case "NullExpression":              str = self.NullExpression();
		case "LiteralExpression":           str = self.LiteralExpression();
		case "FeatureReferenceExpression":  str = self.FeatureReferenceExpression();
		case "MetadataAccessExpression":    str = self.MetadataAccessExpression();
		case "InvocationExpression":        str = self.InvocationExpression();
		case "Expression":                  str = "(" + self.SequenceExpression() + ")";
	}
	return str;
}

operation XMIni!Expression FeatureChainExpression(){
	if (self.hasProperty("memberElement")){
		return self.memberElement.declaredName;
	}
	else if (self.ownedRelationship.getElementOf("ParameterMembership").size() == 1){
		var str = "";
		str += self.ownedRelationship.getElementOf("ParameterMembership").first().ParameterMembership();
		if (self.ownedRelationship.getElementOf("Membership").size() == 1){
			var membership = self.ownedRelationship.getElementOf("Membership").first();
			str += "."+membership.Membership();
		}
		return str;
	}
	else if (self.ownedRelationship.getElementOf("OwningMembership").size() == 1){
		return self.ownedRelationship.getElementOf("OwningMembership").first().ownedRelatedElement.first().FeatureChain();
	}
	else if (self.ownedRelationship.getElementOf("Membership").size() == 1){
		var membership = self.ownedRelationship.getElementOf("Membership").first();
		return membership.Membership();
	}
	else{
		return "[FeatureChainExpression]";
	}
	
}

operation XMIni!Expression SequenceExpression(){
	var parameterMemberships = self.ownedRelationship.getElementOf("ParameterMembership");
	var frontPart = parameterMemberships.first().ParameterMembership();
	var backPart = parameterMemberships.second().ParameterMembership();
	if ((frontPart != null and backPart != null)){
		if (frontPart.startsWith("(") and frontPart.endsWith(")")){
			frontPart = frontPart.substring(1, frontPart.length()-1);
		}
		if (backPart.startsWith("(") and backPart.endsWith(")")){
			backPart = backPart.substring(1, backPart.length()-1);
		}
	}
	return "("+frontPart+","+backPart+")";
}

operation XMIni!Expression SelectExpression(){
 	return "[SelectExpression]";
}

operation XMIni!Expression CollectExpression(){
	return "[CollectExpression]";
}

operation XMIni!Expression OperatorExpression(){
	switch(self.operator){
//		case "if":      return self.ConditionalOperator();	
//		case "??":      return self.NullCoalescingOperator();
//		case "implies": return self.ImpliesOperator();
		case "|":       return self.ConditionalOrOperator();
		case "or":      return self.ConditionalOrOperator();	
		case "xor":     return self.XorOperator();
		case "and":     return self.ConditionalAndOperator();
		case "&":       return self.ConditionalAndOperator();
		case "==":      return self.EqualityOperator();
		case "!=":      return self.EqualityOperator();
		case "===":     return self.EqualityOperator();
		case "!==":     return self.EqualityOperator();
		case "hastype": return self.ClassificationTestOperator();
		case "istype":  return self.ClassificationTestOperator();
		case "@":       return self.ClassificationTestOperator();
//		case "@@":      return self.MetaClassificationTestOperator();
//		case "as":      return self.CastOperator();
		case "meta":    return self.MetaCastOperator();
		case "<":       return self.RelationalOperator();
		case ">":       return self.RelationalOperator();
		case "<=":      return self.RelationalOperator();
		case ">=":      return self.RelationalOperator();
		case "/":       return self.MultiplicativeOperator();
		case "*":       return self.MultiplicativeOperator();
		case "%":       return self.MultiplicativeOperator();
		case "**":      return self.ExponentiationOperator();
		case "^":       return self.ExponentiationOperator();
		case "+":       return self.UnaryOperator();
		case "-":       return self.UnaryOperator();
		case "~":       return self.UnaryOperator();
		case "not":     return self.UnaryOperator();
		case "#":       return self.SquareBracketOperator();
		case "[":       return self.SquareBracketOperator();
		case ",":       return self.SequenceExpression();
	}
	return "[OperatorExpression]";
}

operation XMIni!Expression SquareBracketOperator(){
	var parameterMemberships = self.ownedRelationship.getElementOf("ParameterMembership");
	var frontPart = parameterMemberships.first().ParameterMembership();
	var backPart = parameterMemberships.second().ParameterMembership();
	if (self.operator == "["){
		return frontPart+"["+backPart+"]";
	}
	else{
		return frontPart+"#("+backPart+")";
	}
}

operation XMIni!ParameterMembership ParameterMembership(){
	self.tag();
	if (self.ownedRelatedElement.first().ownedRelationship.first().ownedRelatedElement.first() != null){
		return self.ownedRelatedElement.first().ownedRelationship.first().ownedRelatedElement.first().OwnedExpression();
	}
	return "";
}

operation XMIni!ReturnParameterMembership ReturnParameterMembership(){
	return self.ownedRelatedElement.first().ownedRelationship.first().declaredName;
}

operation XMIni!Expression MultiplicativeOperator(){
	var parameterMemberships = self.ownedRelationship.getElementOf("ParameterMembership");
	var frontPart = parameterMemberships.first().ParameterMembership();
	var backPart = parameterMemberships.second().ParameterMembership();
	return frontPart+self.operator+backPart;
}

operation XMIni!Expression ExponentiationOperator(){
	var parameterMemberships = self.ownedRelationship.getElementOf("ParameterMembership");
	var frontPart = parameterMemberships.first().ParameterMembership();
	var backPart = parameterMemberships.second().ParameterMembership();
	return frontPart+self.operator+backPart;
}

operation XMIni!Expression MetaCastOperator(){
	var frontPart = self.ownedRelationship.getElementOf("ParameterMembership").first().ParameterMembership().split(".metadata").first();
	var backPart = self.ownedRelationship.getElementOf("ReturnParameterMembership").first().ReturnParameterMembership();
	return frontPart.space()+"meta".space()+backPart;
}

operation XMIni!Expression ClassificationTestOperator(){
	var featureTyping = self.ownedRelationship.getElementOf("FeatureMembership").first().ownedRelatedElement.first().ownedRelationship.first();
	if (featureTyping.declaredName != null){
		return self.operator+featureTyping.declaredName;
	}
	else{
		return self.operator+featureTyping.type.declaredName;
	}
}

operation XMIni!Expression ConditionalAndOperator(){
	var parameterMemberships = self.ownedRelationship.getElementOf("ParameterMembership");
	var frontPart = parameterMemberships.first().ParameterMembership();
	var backPart = parameterMemberships.second().ParameterMembership();
	return frontPart.space()+"and".space()+backPart;
}

operation XMIni!Expression ConditionalOrOperator(){
	var parameterMemberships = self.ownedRelationship.getElementOf("ParameterMembership");
	var frontPart = parameterMemberships.first().ParameterMembership();
	var backPart = parameterMemberships.second().ParameterMembership();
	return frontPart.space()+"or".space()+backPart;
}

operation XMIni!Expression XorOperator(){
	var parameterMemberships = self.ownedRelationship.getElementOf("ParameterMembership");
	var frontPart = parameterMemberships.first().ParameterMembership();
	var backPart = parameterMemberships.second().ParameterMembership();
	return frontPart.space()+"xor".space()+backPart;
}

operation XMIni!Expression RelationalOperator(){
	var parameterMemberships = self.ownedRelationship.getElementOf("ParameterMembership");
	var frontPart = parameterMemberships.first().ParameterMembership();
	var backPart = parameterMemberships.second().ParameterMembership();
	return frontPart.space()+self.operator.space()+backPart;
}

operation XMIni!Expression UnaryOperator(){
	var parameterMemberships = self.ownedRelationship.getElementOf("ParameterMembership");
	if (parameterMemberships.size() == 1){
		var part = parameterMemberships.first().ParameterMembership();
		return "("+self.operator+part+")";
	}
	else{
		var frontPart = parameterMemberships.first().ParameterMembership();
		var backPart = parameterMemberships.second().ParameterMembership();
		return frontPart.space()+self.operator.space()+backPart;
	}
}

operation XMIni!Expression EqualityOperator(){
	var parameterMemberships = self.ownedRelationship.getElementOf("ParameterMembership");
	var frontPart = parameterMemberships.first().ParameterMembership();
	var backPart = parameterMemberships.second().ParameterMembership();
	return frontPart.space()+self.operator.space()+backPart;
}

operation XMIni!Element tagAllOwnedElement(){
	self.tag();
	for (o in self.eContents()){
		o.tag();
	}
}