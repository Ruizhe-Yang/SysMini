import "DSL2SysMini-util.eol";

pre{
	"------------------ ETL Start ------------------".println();
	var eObjectSequence = new Sequence;
	var eEReferenceSequence = new Sequence;
	init_bpmdi();
	main_bpmdi();
}

post{
	"------------------ ETL Over  ------------------".println();
	for (ee in eEReferenceSequence){
		ee.println();
	}
}

operation init_bpmdi(){
	var idBPMNPlane = 0;
	for (eBPMNPlane in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNPlane))){
		var eBPMNPlaneTuple = Tuple{"key"=eBPMNPlane.type().name.asString()+"_"+(idBPMNPlane++).asString(),"value"= eBPMNPlane};
		eObjectSequence.add(eBPMNPlaneTuple);
	}
	var eowningDiagramTuple = Tuple{"key"='owningDiagram', "value"='Diagram'};
	eEReferenceSequence.add(eowningDiagramTuple);
	var eowningElementTuple = Tuple{"key"='owningElement', "value"='DiagramElement'};
	eEReferenceSequence.add(eowningElementTuple);
	var eownedElementTuple = Tuple{"key"='ownedElement', "value"='DiagramElement'};
	eEReferenceSequence.add(eownedElementTuple);
	var emodelElementTuple = Tuple{"key"='modelElement', "value"='EObject'};
	eEReferenceSequence.add(emodelElementTuple);
	var estyleTuple = Tuple{"key"='style', "value"='Style'};
	eEReferenceSequence.add(estyleTuple);
	var eplaneElementTuple = Tuple{"key"='planeElement', "value"='DiagramElement'};
	eEReferenceSequence.add(eplaneElementTuple);
	var ebpmnElementTuple = Tuple{"key"='bpmnElement', "value"='BaseElement'};
	eEReferenceSequence.add(ebpmnElementTuple);
	var idBPMNShape = 0;
	for (eBPMNShape in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNShape))){
		var eBPMNShapeTuple = Tuple{"key"=eBPMNShape.type().name.asString()+"_"+(idBPMNShape++).asString(),"value"= eBPMNShape};
		eObjectSequence.add(eBPMNShapeTuple);
	}
	var eowningDiagramTuple = Tuple{"key"='owningDiagram', "value"='Diagram'};
	eEReferenceSequence.add(eowningDiagramTuple);
	var eowningElementTuple = Tuple{"key"='owningElement', "value"='DiagramElement'};
	eEReferenceSequence.add(eowningElementTuple);
	var eownedElementTuple = Tuple{"key"='ownedElement', "value"='DiagramElement'};
	eEReferenceSequence.add(eownedElementTuple);
	var emodelElementTuple = Tuple{"key"='modelElement', "value"='EObject'};
	eEReferenceSequence.add(emodelElementTuple);
	var estyleTuple = Tuple{"key"='style', "value"='Style'};
	eEReferenceSequence.add(estyleTuple);
	var eboundsTuple = Tuple{"key"='bounds', "value"='Bounds'};
	eEReferenceSequence.add(eboundsTuple);
	var eownedLabelTuple = Tuple{"key"='ownedLabel', "value"='Label'};
	eEReferenceSequence.add(eownedLabelTuple);
	var ebpmnElementTuple = Tuple{"key"='bpmnElement', "value"='BaseElement'};
	eEReferenceSequence.add(ebpmnElementTuple);
	var elabelTuple = Tuple{"key"='label', "value"='BPMNLabel'};
	eEReferenceSequence.add(elabelTuple);
	var echoreographyActivityShapeTuple = Tuple{"key"='choreographyActivityShape', "value"='BPMNShape'};
	eEReferenceSequence.add(echoreographyActivityShapeTuple);
	var idBPMNLabel = 0;
	for (eBPMNLabel in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNLabel))){
		var eBPMNLabelTuple = Tuple{"key"=eBPMNLabel.type().name.asString()+"_"+(idBPMNLabel++).asString(),"value"= eBPMNLabel};
		eObjectSequence.add(eBPMNLabelTuple);
	}
	var eowningDiagramTuple = Tuple{"key"='owningDiagram', "value"='Diagram'};
	eEReferenceSequence.add(eowningDiagramTuple);
	var eowningElementTuple = Tuple{"key"='owningElement', "value"='DiagramElement'};
	eEReferenceSequence.add(eowningElementTuple);
	var eownedElementTuple = Tuple{"key"='ownedElement', "value"='DiagramElement'};
	eEReferenceSequence.add(eownedElementTuple);
	var emodelElementTuple = Tuple{"key"='modelElement', "value"='EObject'};
	eEReferenceSequence.add(emodelElementTuple);
	var estyleTuple = Tuple{"key"='style', "value"='Style'};
	eEReferenceSequence.add(estyleTuple);
	var eboundsTuple = Tuple{"key"='bounds', "value"='Bounds'};
	eEReferenceSequence.add(eboundsTuple);
	var elabelStyleTuple = Tuple{"key"='labelStyle', "value"='BPMNLabelStyle'};
	eEReferenceSequence.add(elabelStyleTuple);
	var idBPMNLabelStyle = 0;
	for (eBPMNLabelStyle in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNLabelStyle))){
		var eBPMNLabelStyleTuple = Tuple{"key"=eBPMNLabelStyle.type().name.asString()+"_"+(idBPMNLabelStyle++).asString(),"value"= eBPMNLabelStyle};
		eObjectSequence.add(eBPMNLabelStyleTuple);
	}
	var efontTuple = Tuple{"key"='font', "value"='Font'};
	eEReferenceSequence.add(efontTuple);
	var idBPMNEdge = 0;
	for (eBPMNEdge in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNEdge))){
		var eBPMNEdgeTuple = Tuple{"key"=eBPMNEdge.type().name.asString()+"_"+(idBPMNEdge++).asString(),"value"= eBPMNEdge};
		eObjectSequence.add(eBPMNEdgeTuple);
	}
	var eowningDiagramTuple = Tuple{"key"='owningDiagram', "value"='Diagram'};
	eEReferenceSequence.add(eowningDiagramTuple);
	var eowningElementTuple = Tuple{"key"='owningElement', "value"='DiagramElement'};
	eEReferenceSequence.add(eowningElementTuple);
	var eownedElementTuple = Tuple{"key"='ownedElement', "value"='DiagramElement'};
	eEReferenceSequence.add(eownedElementTuple);
	var emodelElementTuple = Tuple{"key"='modelElement', "value"='EObject'};
	eEReferenceSequence.add(emodelElementTuple);
	var estyleTuple = Tuple{"key"='style', "value"='Style'};
	eEReferenceSequence.add(estyleTuple);
	var esourceTuple = Tuple{"key"='source', "value"='DiagramElement'};
	eEReferenceSequence.add(esourceTuple);
	var etargetTuple = Tuple{"key"='target', "value"='DiagramElement'};
	eEReferenceSequence.add(etargetTuple);
	var ewaypointTuple = Tuple{"key"='waypoint', "value"='Point'};
	eEReferenceSequence.add(ewaypointTuple);
	var eownedLabelTuple = Tuple{"key"='ownedLabel', "value"='Label'};
	eEReferenceSequence.add(eownedLabelTuple);
	var elabelTuple = Tuple{"key"='label', "value"='BPMNLabel'};
	eEReferenceSequence.add(elabelTuple);
	var ebpmnElementTuple = Tuple{"key"='bpmnElement', "value"='BaseElement'};
	eEReferenceSequence.add(ebpmnElementTuple);
	var esourceElementTuple = Tuple{"key"='sourceElement', "value"='DiagramElement'};
	eEReferenceSequence.add(esourceElementTuple);
	var etargetElementTuple = Tuple{"key"='targetElement', "value"='DiagramElement'};
	eEReferenceSequence.add(etargetElementTuple);
	var idBPMNDiagram = 0;
	for (eBPMNDiagram in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNDiagram))){
		var eBPMNDiagramTuple = Tuple{"key"=eBPMNDiagram.type().name.asString()+"_"+(idBPMNDiagram++).asString(),"value"= eBPMNDiagram};
		eObjectSequence.add(eBPMNDiagramTuple);
	}
	var eownedStyleTuple = Tuple{"key"='ownedStyle', "value"='Style'};
	eEReferenceSequence.add(eownedStyleTuple);
	var erootElementTuple = Tuple{"key"='rootElement', "value"='DiagramElement'};
	eEReferenceSequence.add(erootElementTuple);
	var eplaneTuple = Tuple{"key"='plane', "value"='BPMNPlane'};
	eEReferenceSequence.add(eplaneTuple);
	var elabelStyleTuple = Tuple{"key"='labelStyle', "value"='BPMNLabelStyle'};
	eEReferenceSequence.add(elabelStyleTuple);
}

operation main_bpmdi(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMini = new SysMini!Namespace;
	var rootPackage = new SysMini!Package;
	rootPackage.declaredName = "bpmdi";
	rootSysMini.body.add(rootPackage);
	rootEcore.addNodeTo(rootPackage);
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMini!PartUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
}
	
@lazy
rule BPMNPlane
	transform s : DSL!BPMNPlane
	to t : SysMini!PartUsage
	extends Base{
}

@lazy
rule BPMNShape
	transform s : DSL!BPMNShape
	to t : SysMini!PartUsage
	extends Base{
	if (s.isHorizontal.getEAttribute() != null){
		var isHorizontal = new SysMini!AttributeUsage;
		isHorizontal.featureNote.add(":>>");
		isHorizontal.featureSpecialization.add("isHorizontal");
		isHorizontal.valuePart = s.isHorizontal.getEAttribute();
		t.body.add(isHorizontal);
	}
	if (s.isExpanded.getEAttribute() != null){
		var isExpanded = new SysMini!AttributeUsage;
		isExpanded.featureNote.add(":>>");
		isExpanded.featureSpecialization.add("isExpanded");
		isExpanded.valuePart = s.isExpanded.getEAttribute();
		t.body.add(isExpanded);
	}
	if (s.isMarkerVisible.getEAttribute() != null){
		var isMarkerVisible = new SysMini!AttributeUsage;
		isMarkerVisible.featureNote.add(":>>");
		isMarkerVisible.featureSpecialization.add("isMarkerVisible");
		isMarkerVisible.valuePart = s.isMarkerVisible.getEAttribute();
		t.body.add(isMarkerVisible);
	}
	if (s.isMessageVisible.getEAttribute() != null){
		var isMessageVisible = new SysMini!AttributeUsage;
		isMessageVisible.featureNote.add(":>>");
		isMessageVisible.featureSpecialization.add("isMessageVisible");
		isMessageVisible.valuePart = s.isMessageVisible.getEAttribute();
		t.body.add(isMessageVisible);
	}
	if (s.participantBandKind.getEAttribute() != null){
		var participantBandKind = new SysMini!AttributeUsage;
		participantBandKind.featureNote.add(":>>");
		participantBandKind.featureSpecialization.add("participantBandKind");
		participantBandKind.valuePart = s.participantBandKind.getEAttribute();
		t.body.add(participantBandKind);
	}
}

@lazy
rule BPMNLabel
	transform s : DSL!BPMNLabel
	to t : SysMini!PartUsage
	extends Base{
}

@lazy
rule BPMNLabelStyle
	transform s : DSL!BPMNLabelStyle
	to t : SysMini!PartUsage
	extends Base{
}

@lazy
rule BPMNEdge
	transform s : DSL!BPMNEdge
	to t : SysMini!PartUsage
	extends Base{
	if (s.messageVisibleKind.getEAttribute() != null){
		var messageVisibleKind = new SysMini!AttributeUsage;
		messageVisibleKind.featureNote.add(":>>");
		messageVisibleKind.featureSpecialization.add("messageVisibleKind");
		messageVisibleKind.valuePart = s.messageVisibleKind.getEAttribute();
		t.body.add(messageVisibleKind);
	}
}

@lazy
rule BPMNDiagram
	transform s : DSL!BPMNDiagram
	to t : SysMini!PartUsage
	extends Base{
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.documentation.getEAttribute() != null){
		var documentation = new SysMini!AttributeUsage;
		documentation.featureNote.add(":>>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEAttribute();
		t.body.add(documentation);
	}
	if (s.resolution.getEAttribute() != null){
		var resolution = new SysMini!AttributeUsage;
		resolution.featureNote.add(":>>");
		resolution.featureSpecialization.add("resolution");
		resolution.valuePart = s.resolution.getEAttribute();
		t.body.add(resolution);
	}
}


