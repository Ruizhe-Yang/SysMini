import "DSL2SysMini-util.eol";

pre{
	"------------------ ETL Start ------------------".println();
	var eObjectSequence = new Sequence;
	var KeyWords = Sequence{"default", "event", "value", "import", "language", "from", "to", "interface"};
	init_bpmdi();
	main_bpmdi();
}

post{
	"------------------ ETL Over  ------------------".println();
}

operation main_bpmdi(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMini = new SysMini!Namespace;
	var rootPackage = new SysMini!Package;
	rootPackage.declaredName = "bpmdi_model";
	rootSysMini.body.add(rootPackage);
	var namespaceImport = new SysMini!NamespaceImport;
	namespaceImport.declaredName = "bpmdi";
	rootPackage.body.add(namespaceImport);
	rootEcore.addNodeTo(rootPackage);
}

operation init_bpmdi(){
	//BPMNPlane -> Instantiation
	var idBPMNPlane = 0;
	for (eBPMNPlane in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNPlane))){
		var eBPMNPlaneTuple = Tuple{"key"=eBPMNPlane.type().name.asString()+"_"+(idBPMNPlane++).asString(),"value"= eBPMNPlane};
		eObjectSequence.add(eBPMNPlaneTuple);
	}
	//BPMNShape -> Instantiation
	var idBPMNShape = 0;
	for (eBPMNShape in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNShape))){
		var eBPMNShapeTuple = Tuple{"key"=eBPMNShape.type().name.asString()+"_"+(idBPMNShape++).asString(),"value"= eBPMNShape};
		eObjectSequence.add(eBPMNShapeTuple);
	}
	//BPMNLabel -> Instantiation
	var idBPMNLabel = 0;
	for (eBPMNLabel in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNLabel))){
		var eBPMNLabelTuple = Tuple{"key"=eBPMNLabel.type().name.asString()+"_"+(idBPMNLabel++).asString(),"value"= eBPMNLabel};
		eObjectSequence.add(eBPMNLabelTuple);
	}
	//BPMNLabelStyle -> Instantiation
	var idBPMNLabelStyle = 0;
	for (eBPMNLabelStyle in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNLabelStyle))){
		var eBPMNLabelStyleTuple = Tuple{"key"=eBPMNLabelStyle.type().name.asString()+"_"+(idBPMNLabelStyle++).asString(),"value"= eBPMNLabelStyle};
		eObjectSequence.add(eBPMNLabelStyleTuple);
	}
	//BPMNEdge -> Instantiation
	var idBPMNEdge = 0;
	for (eBPMNEdge in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNEdge))){
		var eBPMNEdgeTuple = Tuple{"key"=eBPMNEdge.type().name.asString()+"_"+(idBPMNEdge++).asString(),"value"= eBPMNEdge};
		eObjectSequence.add(eBPMNEdgeTuple);
	}
	//BPMNDiagram -> Instantiation
	var idBPMNDiagram = 0;
	for (eBPMNDiagram in DSL!EObject.all.select(s|s.isTypeOf(DSL!BPMNDiagram))){
		var eBPMNDiagramTuple = Tuple{"key"=eBPMNDiagram.type().name.asString()+"_"+(idBPMNDiagram++).asString(),"value"= eBPMNDiagram};
		eObjectSequence.add(eBPMNDiagramTuple);
	}
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMini!PartUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}
	
@lazy
rule BPMNPlane
	transform s : DSL!BPMNPlane
	to t : SysMini!PartUsage
	extends Base{
	//BPMNPlane -> EReference : owningDiagram
	if (s.owningDiagram.getEReference() != null){
		var owningDiagram = new SysMini!PartUsage;
		owningDiagram.isReference = true;
		owningDiagram.featureNote.add(":>");
		owningDiagram.featureSpecialization.add("owningDiagram");
		owningDiagram.valuePart = s.owningDiagram.getEReference();
		t.body.add(owningDiagram);
	}
	//BPMNPlane -> EReference : owningElement
	if (s.owningElement.getEReference() != null){
		var owningElement = new SysMini!PartUsage;
		owningElement.isReference = true;
		owningElement.featureNote.add(":>");
		owningElement.featureSpecialization.add("owningElement");
		owningElement.valuePart = s.owningElement.getEReference();
		t.body.add(owningElement);
	}
	//BPMNPlane -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null){
		var ownedElement = new SysMini!PartUsage;
		ownedElement.isReference = true;
		ownedElement.featureNote.add(":>");
		ownedElement.featureSpecialization.add("ownedElement");
		ownedElement.valuePart = s.ownedElement.getEReference();
		t.body.add(ownedElement);
	}
	//BPMNPlane -> EReference : modelElement
	if (s.modelElement.getEReference() != null){
		var modelElement = new SysMini!PartUsage;
		modelElement.isReference = true;
		modelElement.featureNote.add(":>");
		modelElement.featureSpecialization.add("modelElement");
		modelElement.valuePart = s.modelElement.getEReference();
		t.body.add(modelElement);
	}
	//BPMNPlane -> EReference : style
	if (s.style.getEReference() != null){
		var style = new SysMini!PartUsage;
		style.isReference = true;
		style.featureNote.add(":>");
		style.featureSpecialization.add("style");
		style.valuePart = s.style.getEReference();
		t.body.add(style);
	}
	//BPMNPlane -> EReference : planeElement
	if (s.planeElement.getEReference() != null){
		var planeElement = new SysMini!PartUsage;
		planeElement.isReference = true;
		planeElement.featureNote.add(":>");
		planeElement.featureSpecialization.add("planeElement");
		planeElement.valuePart = s.planeElement.getEReference();
		t.body.add(planeElement);
	}
	//BPMNPlane -> EReference : bpmnElement
	if (s.bpmnElement.getEReference() != null){
		var bpmnElement = new SysMini!PartUsage;
		bpmnElement.isReference = true;
		bpmnElement.featureNote.add(":>");
		bpmnElement.featureSpecialization.add("bpmnElement");
		bpmnElement.valuePart = s.bpmnElement.getEReference();
		t.body.add(bpmnElement);
	}
}

@lazy
rule BPMNShape
	transform s : DSL!BPMNShape
	to t : SysMini!PartUsage
	extends Base{
	//BPMNShape -> EAttribute : isHorizontal
	if (s.isHorizontal.getEAttribute() != null){
		var isHorizontal = new SysMini!AttributeUsage;
		isHorizontal.featureNote.add(":>>");
		isHorizontal.featureSpecialization.add("isHorizontal");
		isHorizontal.valuePart = s.isHorizontal.getEAttribute();
		t.body.add(isHorizontal);
	}
	//BPMNShape -> EAttribute : isExpanded
	if (s.isExpanded.getEAttribute() != null){
		var isExpanded = new SysMini!AttributeUsage;
		isExpanded.featureNote.add(":>>");
		isExpanded.featureSpecialization.add("isExpanded");
		isExpanded.valuePart = s.isExpanded.getEAttribute();
		t.body.add(isExpanded);
	}
	//BPMNShape -> EAttribute : isMarkerVisible
	if (s.isMarkerVisible.getEAttribute() != null){
		var isMarkerVisible = new SysMini!AttributeUsage;
		isMarkerVisible.featureNote.add(":>>");
		isMarkerVisible.featureSpecialization.add("isMarkerVisible");
		isMarkerVisible.valuePart = s.isMarkerVisible.getEAttribute();
		t.body.add(isMarkerVisible);
	}
	//BPMNShape -> EAttribute : isMessageVisible
	if (s.isMessageVisible.getEAttribute() != null){
		var isMessageVisible = new SysMini!AttributeUsage;
		isMessageVisible.featureNote.add(":>>");
		isMessageVisible.featureSpecialization.add("isMessageVisible");
		isMessageVisible.valuePart = s.isMessageVisible.getEAttribute();
		t.body.add(isMessageVisible);
	}
	//BPMNShape -> EAttribute : participantBandKind
	if (s.participantBandKind.getEAttribute() != null){
		var participantBandKind = new SysMini!AttributeUsage;
		participantBandKind.featureNote.add(":>>");
		participantBandKind.featureSpecialization.add("participantBandKind");
		participantBandKind.valuePart = s.participantBandKind.getEAttribute();
		t.body.add(participantBandKind);
	}
	//BPMNShape -> EReference : owningDiagram
	if (s.owningDiagram.getEReference() != null){
		var owningDiagram = new SysMini!PartUsage;
		owningDiagram.isReference = true;
		owningDiagram.featureNote.add(":>");
		owningDiagram.featureSpecialization.add("owningDiagram");
		owningDiagram.valuePart = s.owningDiagram.getEReference();
		t.body.add(owningDiagram);
	}
	//BPMNShape -> EReference : owningElement
	if (s.owningElement.getEReference() != null){
		var owningElement = new SysMini!PartUsage;
		owningElement.isReference = true;
		owningElement.featureNote.add(":>");
		owningElement.featureSpecialization.add("owningElement");
		owningElement.valuePart = s.owningElement.getEReference();
		t.body.add(owningElement);
	}
	//BPMNShape -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null){
		var ownedElement = new SysMini!PartUsage;
		ownedElement.isReference = true;
		ownedElement.featureNote.add(":>");
		ownedElement.featureSpecialization.add("ownedElement");
		ownedElement.valuePart = s.ownedElement.getEReference();
		t.body.add(ownedElement);
	}
	//BPMNShape -> EReference : modelElement
	if (s.modelElement.getEReference() != null){
		var modelElement = new SysMini!PartUsage;
		modelElement.isReference = true;
		modelElement.featureNote.add(":>");
		modelElement.featureSpecialization.add("modelElement");
		modelElement.valuePart = s.modelElement.getEReference();
		t.body.add(modelElement);
	}
	//BPMNShape -> EReference : style
	if (s.style.getEReference() != null){
		var style = new SysMini!PartUsage;
		style.isReference = true;
		style.featureNote.add(":>");
		style.featureSpecialization.add("style");
		style.valuePart = s.style.getEReference();
		t.body.add(style);
	}
	//BPMNShape -> EReference : bounds
	if (s.bounds.getEReference() != null){
		var bounds = new SysMini!PartUsage;
		bounds.isReference = true;
		bounds.featureNote.add(":>");
		bounds.featureSpecialization.add("bounds");
		bounds.valuePart = s.bounds.getEReference();
		t.body.add(bounds);
	}
	//BPMNShape -> EReference : ownedLabel
	if (s.ownedLabel.getEReference() != null){
		var ownedLabel = new SysMini!PartUsage;
		ownedLabel.isReference = true;
		ownedLabel.featureNote.add(":>");
		ownedLabel.featureSpecialization.add("ownedLabel");
		ownedLabel.valuePart = s.ownedLabel.getEReference();
		t.body.add(ownedLabel);
	}
	//BPMNShape -> EReference : bpmnElement
	if (s.bpmnElement.getEReference() != null){
		var bpmnElement = new SysMini!PartUsage;
		bpmnElement.isReference = true;
		bpmnElement.featureNote.add(":>");
		bpmnElement.featureSpecialization.add("bpmnElement");
		bpmnElement.valuePart = s.bpmnElement.getEReference();
		t.body.add(bpmnElement);
	}
	//BPMNShape -> EReference : label
	if (s.label.getEReference() != null){
		var label = new SysMini!PartUsage;
		label.isReference = true;
		label.featureNote.add(":>");
		label.featureSpecialization.add("label");
		label.valuePart = s.label.getEReference();
		t.body.add(label);
	}
	//BPMNShape -> EReference : choreographyActivityShape
	if (s.choreographyActivityShape.getEReference() != null){
		var choreographyActivityShape = new SysMini!PartUsage;
		choreographyActivityShape.isReference = true;
		choreographyActivityShape.featureNote.add(":>");
		choreographyActivityShape.featureSpecialization.add("choreographyActivityShape");
		choreographyActivityShape.valuePart = s.choreographyActivityShape.getEReference();
		t.body.add(choreographyActivityShape);
	}
}

@lazy
rule BPMNLabel
	transform s : DSL!BPMNLabel
	to t : SysMini!PartUsage
	extends Base{
	//BPMNLabel -> EReference : owningDiagram
	if (s.owningDiagram.getEReference() != null){
		var owningDiagram = new SysMini!PartUsage;
		owningDiagram.isReference = true;
		owningDiagram.featureNote.add(":>");
		owningDiagram.featureSpecialization.add("owningDiagram");
		owningDiagram.valuePart = s.owningDiagram.getEReference();
		t.body.add(owningDiagram);
	}
	//BPMNLabel -> EReference : owningElement
	if (s.owningElement.getEReference() != null){
		var owningElement = new SysMini!PartUsage;
		owningElement.isReference = true;
		owningElement.featureNote.add(":>");
		owningElement.featureSpecialization.add("owningElement");
		owningElement.valuePart = s.owningElement.getEReference();
		t.body.add(owningElement);
	}
	//BPMNLabel -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null){
		var ownedElement = new SysMini!PartUsage;
		ownedElement.isReference = true;
		ownedElement.featureNote.add(":>");
		ownedElement.featureSpecialization.add("ownedElement");
		ownedElement.valuePart = s.ownedElement.getEReference();
		t.body.add(ownedElement);
	}
	//BPMNLabel -> EReference : modelElement
	if (s.modelElement.getEReference() != null){
		var modelElement = new SysMini!PartUsage;
		modelElement.isReference = true;
		modelElement.featureNote.add(":>");
		modelElement.featureSpecialization.add("modelElement");
		modelElement.valuePart = s.modelElement.getEReference();
		t.body.add(modelElement);
	}
	//BPMNLabel -> EReference : style
	if (s.style.getEReference() != null){
		var style = new SysMini!PartUsage;
		style.isReference = true;
		style.featureNote.add(":>");
		style.featureSpecialization.add("style");
		style.valuePart = s.style.getEReference();
		t.body.add(style);
	}
	//BPMNLabel -> EReference : bounds
	if (s.bounds.getEReference() != null){
		var bounds = new SysMini!PartUsage;
		bounds.isReference = true;
		bounds.featureNote.add(":>");
		bounds.featureSpecialization.add("bounds");
		bounds.valuePart = s.bounds.getEReference();
		t.body.add(bounds);
	}
	//BPMNLabel -> EReference : labelStyle
	if (s.labelStyle.getEReference() != null){
		var labelStyle = new SysMini!PartUsage;
		labelStyle.isReference = true;
		labelStyle.featureNote.add(":>");
		labelStyle.featureSpecialization.add("labelStyle");
		labelStyle.valuePart = s.labelStyle.getEReference();
		t.body.add(labelStyle);
	}
}

@lazy
rule BPMNLabelStyle
	transform s : DSL!BPMNLabelStyle
	to t : SysMini!PartUsage
	extends Base{
	//BPMNLabelStyle -> EReference : font
	if (s.font.getEReference() != null){
		var font = new SysMini!PartUsage;
		font.isReference = true;
		font.featureNote.add(":>");
		font.featureSpecialization.add("font");
		font.valuePart = s.font.getEReference();
		t.body.add(font);
	}
}

@lazy
rule BPMNEdge
	transform s : DSL!BPMNEdge
	to t : SysMini!PartUsage
	extends Base{
	//BPMNEdge -> EAttribute : messageVisibleKind
	if (s.messageVisibleKind.getEAttribute() != null){
		var messageVisibleKind = new SysMini!AttributeUsage;
		messageVisibleKind.featureNote.add(":>>");
		messageVisibleKind.featureSpecialization.add("messageVisibleKind");
		messageVisibleKind.valuePart = s.messageVisibleKind.getEAttribute();
		t.body.add(messageVisibleKind);
	}
	//BPMNEdge -> EReference : owningDiagram
	if (s.owningDiagram.getEReference() != null){
		var owningDiagram = new SysMini!PartUsage;
		owningDiagram.isReference = true;
		owningDiagram.featureNote.add(":>");
		owningDiagram.featureSpecialization.add("owningDiagram");
		owningDiagram.valuePart = s.owningDiagram.getEReference();
		t.body.add(owningDiagram);
	}
	//BPMNEdge -> EReference : owningElement
	if (s.owningElement.getEReference() != null){
		var owningElement = new SysMini!PartUsage;
		owningElement.isReference = true;
		owningElement.featureNote.add(":>");
		owningElement.featureSpecialization.add("owningElement");
		owningElement.valuePart = s.owningElement.getEReference();
		t.body.add(owningElement);
	}
	//BPMNEdge -> EReference : ownedElement
	if (s.ownedElement.getEReference() != null){
		var ownedElement = new SysMini!PartUsage;
		ownedElement.isReference = true;
		ownedElement.featureNote.add(":>");
		ownedElement.featureSpecialization.add("ownedElement");
		ownedElement.valuePart = s.ownedElement.getEReference();
		t.body.add(ownedElement);
	}
	//BPMNEdge -> EReference : modelElement
	if (s.modelElement.getEReference() != null){
		var modelElement = new SysMini!PartUsage;
		modelElement.isReference = true;
		modelElement.featureNote.add(":>");
		modelElement.featureSpecialization.add("modelElement");
		modelElement.valuePart = s.modelElement.getEReference();
		t.body.add(modelElement);
	}
	//BPMNEdge -> EReference : style
	if (s.style.getEReference() != null){
		var style = new SysMini!PartUsage;
		style.isReference = true;
		style.featureNote.add(":>");
		style.featureSpecialization.add("style");
		style.valuePart = s.style.getEReference();
		t.body.add(style);
	}
	//BPMNEdge -> EReference : source
	if (s.source.getEReference() != null){
		var source = new SysMini!PartUsage;
		source.isReference = true;
		source.featureNote.add(":>");
		source.featureSpecialization.add("source");
		source.valuePart = s.source.getEReference();
		t.body.add(source);
	}
	//BPMNEdge -> EReference : target
	if (s.target.getEReference() != null){
		var target = new SysMini!PartUsage;
		target.isReference = true;
		target.featureNote.add(":>");
		target.featureSpecialization.add("target");
		target.valuePart = s.target.getEReference();
		t.body.add(target);
	}
	//BPMNEdge -> EReference : waypoint
	if (s.waypoint.getEReference() != null){
		var waypoint = new SysMini!PartUsage;
		waypoint.isReference = true;
		waypoint.featureNote.add(":>");
		waypoint.featureSpecialization.add("waypoint");
		waypoint.valuePart = s.waypoint.getEReference();
		t.body.add(waypoint);
	}
	//BPMNEdge -> EReference : ownedLabel
	if (s.ownedLabel.getEReference() != null){
		var ownedLabel = new SysMini!PartUsage;
		ownedLabel.isReference = true;
		ownedLabel.featureNote.add(":>");
		ownedLabel.featureSpecialization.add("ownedLabel");
		ownedLabel.valuePart = s.ownedLabel.getEReference();
		t.body.add(ownedLabel);
	}
	//BPMNEdge -> EReference : label
	if (s.label.getEReference() != null){
		var label = new SysMini!PartUsage;
		label.isReference = true;
		label.featureNote.add(":>");
		label.featureSpecialization.add("label");
		label.valuePart = s.label.getEReference();
		t.body.add(label);
	}
	//BPMNEdge -> EReference : bpmnElement
	if (s.bpmnElement.getEReference() != null){
		var bpmnElement = new SysMini!PartUsage;
		bpmnElement.isReference = true;
		bpmnElement.featureNote.add(":>");
		bpmnElement.featureSpecialization.add("bpmnElement");
		bpmnElement.valuePart = s.bpmnElement.getEReference();
		t.body.add(bpmnElement);
	}
	//BPMNEdge -> EReference : sourceElement
	if (s.sourceElement.getEReference() != null){
		var sourceElement = new SysMini!PartUsage;
		sourceElement.isReference = true;
		sourceElement.featureNote.add(":>");
		sourceElement.featureSpecialization.add("sourceElement");
		sourceElement.valuePart = s.sourceElement.getEReference();
		t.body.add(sourceElement);
	}
	//BPMNEdge -> EReference : targetElement
	if (s.targetElement.getEReference() != null){
		var targetElement = new SysMini!PartUsage;
		targetElement.isReference = true;
		targetElement.featureNote.add(":>");
		targetElement.featureSpecialization.add("targetElement");
		targetElement.valuePart = s.targetElement.getEReference();
		t.body.add(targetElement);
	}
}

@lazy
rule BPMNDiagram
	transform s : DSL!BPMNDiagram
	to t : SysMini!PartUsage
	extends Base{
	//BPMNDiagram -> EAttribute : name
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	//BPMNDiagram -> EAttribute : documentation
	if (s.documentation.getEAttribute() != null){
		var documentation = new SysMini!AttributeUsage;
		documentation.featureNote.add(":>>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEAttribute();
		t.body.add(documentation);
	}
	//BPMNDiagram -> EAttribute : resolution
	if (s.resolution.getEAttribute() != null){
		var resolution = new SysMini!AttributeUsage;
		resolution.featureNote.add(":>>");
		resolution.featureSpecialization.add("resolution");
		resolution.valuePart = s.resolution.getEAttribute();
		t.body.add(resolution);
	}
	//BPMNDiagram -> EReference : ownedStyle
	if (s.ownedStyle.getEReference() != null){
		var ownedStyle = new SysMini!PartUsage;
		ownedStyle.isReference = true;
		ownedStyle.featureNote.add(":>");
		ownedStyle.featureSpecialization.add("ownedStyle");
		ownedStyle.valuePart = s.ownedStyle.getEReference();
		t.body.add(ownedStyle);
	}
	//BPMNDiagram -> EReference : rootElement
	if (s.rootElement.getEReference() != null){
		var rootElement = new SysMini!PartUsage;
		rootElement.isReference = true;
		rootElement.featureNote.add(":>");
		rootElement.featureSpecialization.add("rootElement");
		rootElement.valuePart = s.rootElement.getEReference();
		t.body.add(rootElement);
	}
	//BPMNDiagram -> EReference : plane
	if (s.plane.getEReference() != null){
		var plane = new SysMini!PartUsage;
		plane.isReference = true;
		plane.featureNote.add(":>");
		plane.featureSpecialization.add("plane");
		plane.valuePart = s.plane.getEReference();
		t.body.add(plane);
	}
	//BPMNDiagram -> EReference : labelStyle
	if (s.labelStyle.getEReference() != null){
		var labelStyle = new SysMini!PartUsage;
		labelStyle.isReference = true;
		labelStyle.featureNote.add(":>");
		labelStyle.featureSpecialization.add("labelStyle");
		labelStyle.valuePart = s.labelStyle.getEReference();
		t.body.add(labelStyle);
	}
}


