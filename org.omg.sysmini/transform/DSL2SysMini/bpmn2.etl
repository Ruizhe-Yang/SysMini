import "DSL2SysMini-util.eol";

pre{
	"------------------ ETL Start ------------------".println();
	var eObjectSequence = new Sequence;
	var eEReferenceSequence = new Sequence;
	var KeyWords = Sequence{"default", "event", "value", "import", "language", "from", "to", "interface"};
	init_bpmn2();
	main_bpmn2();
}

post{
	"------------------ ETL Over  ------------------".println();
	for (ee in eEReferenceSequence){
		ee.println();
	}
}

operation init_bpmn2(){
	var idInterface = 0;
	for (eInterface in DSL!EObject.all.select(s|s.isTypeOf(DSL!Interface))){
		var eInterfaceTuple = Tuple{"key"=eInterface.type().name.asString()+"_"+(idInterface++).asString(),"value"= eInterface};
		eObjectSequence.add(eInterfaceTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eoperationsTuple = Tuple{"key"='operations', "value"='Operation'};
	eEReferenceSequence.add(eoperationsTuple);
	var eimplementationRefTuple = Tuple{"key"='implementationRef', "value"='EObject'};
	eEReferenceSequence.add(eimplementationRefTuple);
	var idRootElement = 0;
	for (eRootElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!RootElement))){
		var eRootElementTuple = Tuple{"key"=eRootElement.type().name.asString()+"_"+(idRootElement++).asString(),"value"= eRootElement};
		eObjectSequence.add(eRootElementTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idBaseElement = 0;
	for (eBaseElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!BaseElement))){
		var eBaseElementTuple = Tuple{"key"=eBaseElement.type().name.asString()+"_"+(idBaseElement++).asString(),"value"= eBaseElement};
		eObjectSequence.add(eBaseElementTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idExtensionDefinition = 0;
	for (eExtensionDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExtensionDefinition))){
		var eExtensionDefinitionTuple = Tuple{"key"=eExtensionDefinition.type().name.asString()+"_"+(idExtensionDefinition++).asString(),"value"= eExtensionDefinition};
		eObjectSequence.add(eExtensionDefinitionTuple);
	}
	var eextensionAttributeDefinitionsTuple = Tuple{"key"='extensionAttributeDefinitions', "value"='ExtensionAttributeDefinition'};
	eEReferenceSequence.add(eextensionAttributeDefinitionsTuple);
	var idExtensionAttributeDefinition = 0;
	for (eExtensionAttributeDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExtensionAttributeDefinition))){
		var eExtensionAttributeDefinitionTuple = Tuple{"key"=eExtensionAttributeDefinition.type().name.asString()+"_"+(idExtensionAttributeDefinition++).asString(),"value"= eExtensionAttributeDefinition};
		eObjectSequence.add(eExtensionAttributeDefinitionTuple);
	}
	var eextensionDefinitionTuple = Tuple{"key"='extensionDefinition', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionTuple);
	var idExtensionAttributeValue = 0;
	for (eExtensionAttributeValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExtensionAttributeValue))){
		var eExtensionAttributeValueTuple = Tuple{"key"=eExtensionAttributeValue.type().name.asString()+"_"+(idExtensionAttributeValue++).asString(),"value"= eExtensionAttributeValue};
		eObjectSequence.add(eExtensionAttributeValueTuple);
	}
	var evalueRefTuple = Tuple{"key"='valueRef', "value"='EObject'};
	eEReferenceSequence.add(evalueRefTuple);
	var evalueTuple = Tuple{"key"='value', "value"='EObject'};
	eEReferenceSequence.add(evalueTuple);
	var eextensionAttributeDefinitionTuple = Tuple{"key"='extensionAttributeDefinition', "value"='ExtensionAttributeDefinition'};
	eEReferenceSequence.add(eextensionAttributeDefinitionTuple);
	var idDocumentation = 0;
	for (eDocumentation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Documentation))){
		var eDocumentationTuple = Tuple{"key"=eDocumentation.type().name.asString()+"_"+(idDocumentation++).asString(),"value"= eDocumentation};
		eObjectSequence.add(eDocumentationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idOperation = 0;
	for (eOperation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Operation))){
		var eOperationTuple = Tuple{"key"=eOperation.type().name.asString()+"_"+(idOperation++).asString(),"value"= eOperation};
		eObjectSequence.add(eOperationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var einMessageRefTuple = Tuple{"key"='inMessageRef', "value"='Message'};
	eEReferenceSequence.add(einMessageRefTuple);
	var eoutMessageRefTuple = Tuple{"key"='outMessageRef', "value"='Message'};
	eEReferenceSequence.add(eoutMessageRefTuple);
	var eerrorRefsTuple = Tuple{"key"='errorRefs', "value"='Error'};
	eEReferenceSequence.add(eerrorRefsTuple);
	var eimplementationRefTuple = Tuple{"key"='implementationRef', "value"='EObject'};
	eEReferenceSequence.add(eimplementationRefTuple);
	var idMessage = 0;
	for (eMessage in DSL!EObject.all.select(s|s.isTypeOf(DSL!Message))){
		var eMessageTuple = Tuple{"key"=eMessage.type().name.asString()+"_"+(idMessage++).asString(),"value"= eMessage};
		eObjectSequence.add(eMessageTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eitemRefTuple = Tuple{"key"='itemRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(eitemRefTuple);
	var idItemDefinition = 0;
	for (eItemDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!ItemDefinition))){
		var eItemDefinitionTuple = Tuple{"key"=eItemDefinition.type().name.asString()+"_"+(idItemDefinition++).asString(),"value"= eItemDefinition};
		eObjectSequence.add(eItemDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var estructureRefTuple = Tuple{"key"='structureRef', "value"='EObject'};
	eEReferenceSequence.add(estructureRefTuple);
	var eimportTuple = Tuple{"key"='import', "value"='Import'};
	eEReferenceSequence.add(eimportTuple);
	var idImport = 0;
	for (eImport in DSL!EObject.all.select(s|s.isTypeOf(DSL!Import))){
		var eImportTuple = Tuple{"key"=eImport.type().name.asString()+"_"+(idImport++).asString(),"value"= eImport};
		eObjectSequence.add(eImportTuple);
	}
	var idError = 0;
	for (eError in DSL!EObject.all.select(s|s.isTypeOf(DSL!Error))){
		var eErrorTuple = Tuple{"key"=eError.type().name.asString()+"_"+(idError++).asString(),"value"= eError};
		eObjectSequence.add(eErrorTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var estructureRefTuple = Tuple{"key"='structureRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(estructureRefTuple);
	var idEndPoint = 0;
	for (eEndPoint in DSL!EObject.all.select(s|s.isTypeOf(DSL!EndPoint))){
		var eEndPointTuple = Tuple{"key"=eEndPoint.type().name.asString()+"_"+(idEndPoint++).asString(),"value"= eEndPoint};
		eObjectSequence.add(eEndPointTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idAuditing = 0;
	for (eAuditing in DSL!EObject.all.select(s|s.isTypeOf(DSL!Auditing))){
		var eAuditingTuple = Tuple{"key"=eAuditing.type().name.asString()+"_"+(idAuditing++).asString(),"value"= eAuditing};
		eObjectSequence.add(eAuditingTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idGlobalTask = 0;
	for (eGlobalTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!GlobalTask))){
		var eGlobalTaskTuple = Tuple{"key"=eGlobalTask.type().name.asString()+"_"+(idGlobalTask++).asString(),"value"= eGlobalTask};
		eObjectSequence.add(eGlobalTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var esupportedInterfaceRefsTuple = Tuple{"key"='supportedInterfaceRefs', "value"='Interface'};
	eEReferenceSequence.add(esupportedInterfaceRefsTuple);
	var eioBindingTuple = Tuple{"key"='ioBinding', "value"='InputOutputBinding'};
	eEReferenceSequence.add(eioBindingTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var idCallableElement = 0;
	for (eCallableElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!CallableElement))){
		var eCallableElementTuple = Tuple{"key"=eCallableElement.type().name.asString()+"_"+(idCallableElement++).asString(),"value"= eCallableElement};
		eObjectSequence.add(eCallableElementTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var esupportedInterfaceRefsTuple = Tuple{"key"='supportedInterfaceRefs', "value"='Interface'};
	eEReferenceSequence.add(esupportedInterfaceRefsTuple);
	var eioBindingTuple = Tuple{"key"='ioBinding', "value"='InputOutputBinding'};
	eEReferenceSequence.add(eioBindingTuple);
	var idInputOutputSpecification = 0;
	for (eInputOutputSpecification in DSL!EObject.all.select(s|s.isTypeOf(DSL!InputOutputSpecification))){
		var eInputOutputSpecificationTuple = Tuple{"key"=eInputOutputSpecification.type().name.asString()+"_"+(idInputOutputSpecification++).asString(),"value"= eInputOutputSpecification};
		eObjectSequence.add(eInputOutputSpecificationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var einputSetsTuple = Tuple{"key"='inputSets', "value"='InputSet'};
	eEReferenceSequence.add(einputSetsTuple);
	var eoutputSetsTuple = Tuple{"key"='outputSets', "value"='OutputSet'};
	eEReferenceSequence.add(eoutputSetsTuple);
	var edataInputsTuple = Tuple{"key"='dataInputs', "value"='DataInput'};
	eEReferenceSequence.add(edataInputsTuple);
	var edataOutputsTuple = Tuple{"key"='dataOutputs', "value"='DataOutput'};
	eEReferenceSequence.add(edataOutputsTuple);
	var idInputSet = 0;
	for (eInputSet in DSL!EObject.all.select(s|s.isTypeOf(DSL!InputSet))){
		var eInputSetTuple = Tuple{"key"=eInputSet.type().name.asString()+"_"+(idInputSet++).asString(),"value"= eInputSet};
		eObjectSequence.add(eInputSetTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var edataInputRefsTuple = Tuple{"key"='dataInputRefs', "value"='DataInput'};
	eEReferenceSequence.add(edataInputRefsTuple);
	var eoptionalInputRefsTuple = Tuple{"key"='optionalInputRefs', "value"='DataInput'};
	eEReferenceSequence.add(eoptionalInputRefsTuple);
	var ewhileExecutingInputRefsTuple = Tuple{"key"='whileExecutingInputRefs', "value"='DataInput'};
	eEReferenceSequence.add(ewhileExecutingInputRefsTuple);
	var eoutputSetRefsTuple = Tuple{"key"='outputSetRefs', "value"='OutputSet'};
	eEReferenceSequence.add(eoutputSetRefsTuple);
	var idDataInput = 0;
	for (eDataInput in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataInput))){
		var eDataInputTuple = Tuple{"key"=eDataInput.type().name.asString()+"_"+(idDataInput++).asString(),"value"= eDataInput};
		eObjectSequence.add(eDataInputTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eitemSubjectRefTuple = Tuple{"key"='itemSubjectRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(eitemSubjectRefTuple);
	var edataStateTuple = Tuple{"key"='dataState', "value"='DataState'};
	eEReferenceSequence.add(edataStateTuple);
	var einputSetWithOptionalTuple = Tuple{"key"='inputSetWithOptional', "value"='InputSet'};
	eEReferenceSequence.add(einputSetWithOptionalTuple);
	var einputSetWithWhileExecutingTuple = Tuple{"key"='inputSetWithWhileExecuting', "value"='InputSet'};
	eEReferenceSequence.add(einputSetWithWhileExecutingTuple);
	var einputSetRefsTuple = Tuple{"key"='inputSetRefs', "value"='InputSet'};
	eEReferenceSequence.add(einputSetRefsTuple);
	var idItemAwareElement = 0;
	for (eItemAwareElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!ItemAwareElement))){
		var eItemAwareElementTuple = Tuple{"key"=eItemAwareElement.type().name.asString()+"_"+(idItemAwareElement++).asString(),"value"= eItemAwareElement};
		eObjectSequence.add(eItemAwareElementTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eitemSubjectRefTuple = Tuple{"key"='itemSubjectRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(eitemSubjectRefTuple);
	var edataStateTuple = Tuple{"key"='dataState', "value"='DataState'};
	eEReferenceSequence.add(edataStateTuple);
	var idDataState = 0;
	for (eDataState in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataState))){
		var eDataStateTuple = Tuple{"key"=eDataState.type().name.asString()+"_"+(idDataState++).asString(),"value"= eDataState};
		eObjectSequence.add(eDataStateTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idOutputSet = 0;
	for (eOutputSet in DSL!EObject.all.select(s|s.isTypeOf(DSL!OutputSet))){
		var eOutputSetTuple = Tuple{"key"=eOutputSet.type().name.asString()+"_"+(idOutputSet++).asString(),"value"= eOutputSet};
		eObjectSequence.add(eOutputSetTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var edataOutputRefsTuple = Tuple{"key"='dataOutputRefs', "value"='DataOutput'};
	eEReferenceSequence.add(edataOutputRefsTuple);
	var eoptionalOutputRefsTuple = Tuple{"key"='optionalOutputRefs', "value"='DataOutput'};
	eEReferenceSequence.add(eoptionalOutputRefsTuple);
	var ewhileExecutingOutputRefsTuple = Tuple{"key"='whileExecutingOutputRefs', "value"='DataOutput'};
	eEReferenceSequence.add(ewhileExecutingOutputRefsTuple);
	var einputSetRefsTuple = Tuple{"key"='inputSetRefs', "value"='InputSet'};
	eEReferenceSequence.add(einputSetRefsTuple);
	var idDataOutput = 0;
	for (eDataOutput in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataOutput))){
		var eDataOutputTuple = Tuple{"key"=eDataOutput.type().name.asString()+"_"+(idDataOutput++).asString(),"value"= eDataOutput};
		eObjectSequence.add(eDataOutputTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eitemSubjectRefTuple = Tuple{"key"='itemSubjectRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(eitemSubjectRefTuple);
	var edataStateTuple = Tuple{"key"='dataState', "value"='DataState'};
	eEReferenceSequence.add(edataStateTuple);
	var eoutputSetWithOptionalTuple = Tuple{"key"='outputSetWithOptional', "value"='OutputSet'};
	eEReferenceSequence.add(eoutputSetWithOptionalTuple);
	var eoutputSetWithWhileExecutingTuple = Tuple{"key"='outputSetWithWhileExecuting', "value"='OutputSet'};
	eEReferenceSequence.add(eoutputSetWithWhileExecutingTuple);
	var eoutputSetRefsTuple = Tuple{"key"='outputSetRefs', "value"='OutputSet'};
	eEReferenceSequence.add(eoutputSetRefsTuple);
	var idInputOutputBinding = 0;
	for (eInputOutputBinding in DSL!EObject.all.select(s|s.isTypeOf(DSL!InputOutputBinding))){
		var eInputOutputBindingTuple = Tuple{"key"=eInputOutputBinding.type().name.asString()+"_"+(idInputOutputBinding++).asString(),"value"= eInputOutputBinding};
		eObjectSequence.add(eInputOutputBindingTuple);
	}
	var einputDataRefTuple = Tuple{"key"='inputDataRef', "value"='InputSet'};
	eEReferenceSequence.add(einputDataRefTuple);
	var eoutputDataRefTuple = Tuple{"key"='outputDataRef', "value"='OutputSet'};
	eEReferenceSequence.add(eoutputDataRefTuple);
	var eoperationRefTuple = Tuple{"key"='operationRef', "value"='Operation'};
	eEReferenceSequence.add(eoperationRefTuple);
	var idResourceRole = 0;
	for (eResourceRole in DSL!EObject.all.select(s|s.isTypeOf(DSL!ResourceRole))){
		var eResourceRoleTuple = Tuple{"key"=eResourceRole.type().name.asString()+"_"+(idResourceRole++).asString(),"value"= eResourceRole};
		eObjectSequence.add(eResourceRoleTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eresourceRefTuple = Tuple{"key"='resourceRef', "value"='Resource'};
	eEReferenceSequence.add(eresourceRefTuple);
	var eresourceParameterBindingsTuple = Tuple{"key"='resourceParameterBindings', "value"='ResourceParameterBinding'};
	eEReferenceSequence.add(eresourceParameterBindingsTuple);
	var eresourceAssignmentExpressionTuple = Tuple{"key"='resourceAssignmentExpression', "value"='ResourceAssignmentExpression'};
	eEReferenceSequence.add(eresourceAssignmentExpressionTuple);
	var idResource = 0;
	for (eResource in DSL!EObject.all.select(s|s.isTypeOf(DSL!Resource))){
		var eResourceTuple = Tuple{"key"=eResource.type().name.asString()+"_"+(idResource++).asString(),"value"= eResource};
		eObjectSequence.add(eResourceTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eresourceParametersTuple = Tuple{"key"='resourceParameters', "value"='ResourceParameter'};
	eEReferenceSequence.add(eresourceParametersTuple);
	var idResourceParameter = 0;
	for (eResourceParameter in DSL!EObject.all.select(s|s.isTypeOf(DSL!ResourceParameter))){
		var eResourceParameterTuple = Tuple{"key"=eResourceParameter.type().name.asString()+"_"+(idResourceParameter++).asString(),"value"= eResourceParameter};
		eObjectSequence.add(eResourceParameterTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var etypeTuple = Tuple{"key"='type', "value"='ItemDefinition'};
	eEReferenceSequence.add(etypeTuple);
	var idResourceParameterBinding = 0;
	for (eResourceParameterBinding in DSL!EObject.all.select(s|s.isTypeOf(DSL!ResourceParameterBinding))){
		var eResourceParameterBindingTuple = Tuple{"key"=eResourceParameterBinding.type().name.asString()+"_"+(idResourceParameterBinding++).asString(),"value"= eResourceParameterBinding};
		eObjectSequence.add(eResourceParameterBindingTuple);
	}
	var eexpressionTuple = Tuple{"key"='expression', "value"='Expression'};
	eEReferenceSequence.add(eexpressionTuple);
	var eparameterRefTuple = Tuple{"key"='parameterRef', "value"='ResourceParameter'};
	eEReferenceSequence.add(eparameterRefTuple);
	var idExpression = 0;
	for (eExpression in DSL!EObject.all.select(s|s.isTypeOf(DSL!Expression))){
		var eExpressionTuple = Tuple{"key"=eExpression.type().name.asString()+"_"+(idExpression++).asString(),"value"= eExpression};
		eObjectSequence.add(eExpressionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idResourceAssignmentExpression = 0;
	for (eResourceAssignmentExpression in DSL!EObject.all.select(s|s.isTypeOf(DSL!ResourceAssignmentExpression))){
		var eResourceAssignmentExpressionTuple = Tuple{"key"=eResourceAssignmentExpression.type().name.asString()+"_"+(idResourceAssignmentExpression++).asString(),"value"= eResourceAssignmentExpression};
		eObjectSequence.add(eResourceAssignmentExpressionTuple);
	}
	var eexpressionTuple = Tuple{"key"='expression', "value"='Expression'};
	eEReferenceSequence.add(eexpressionTuple);
	var idMonitoring = 0;
	for (eMonitoring in DSL!EObject.all.select(s|s.isTypeOf(DSL!Monitoring))){
		var eMonitoringTuple = Tuple{"key"=eMonitoring.type().name.asString()+"_"+(idMonitoring++).asString(),"value"= eMonitoring};
		eObjectSequence.add(eMonitoringTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idPerformer = 0;
	for (ePerformer in DSL!EObject.all.select(s|s.isTypeOf(DSL!Performer))){
		var ePerformerTuple = Tuple{"key"=ePerformer.type().name.asString()+"_"+(idPerformer++).asString(),"value"= ePerformer};
		eObjectSequence.add(ePerformerTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eresourceRefTuple = Tuple{"key"='resourceRef', "value"='Resource'};
	eEReferenceSequence.add(eresourceRefTuple);
	var eresourceParameterBindingsTuple = Tuple{"key"='resourceParameterBindings', "value"='ResourceParameterBinding'};
	eEReferenceSequence.add(eresourceParameterBindingsTuple);
	var eresourceAssignmentExpressionTuple = Tuple{"key"='resourceAssignmentExpression', "value"='ResourceAssignmentExpression'};
	eEReferenceSequence.add(eresourceAssignmentExpressionTuple);
	var idProcess = 0;
	for (eProcess in DSL!EObject.all.select(s|s.isTypeOf(DSL!Process))){
		var eProcessTuple = Tuple{"key"=eProcess.type().name.asString()+"_"+(idProcess++).asString(),"value"= eProcess};
		eObjectSequence.add(eProcessTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var esupportedInterfaceRefsTuple = Tuple{"key"='supportedInterfaceRefs', "value"='Interface'};
	eEReferenceSequence.add(esupportedInterfaceRefsTuple);
	var eioBindingTuple = Tuple{"key"='ioBinding', "value"='InputOutputBinding'};
	eEReferenceSequence.add(eioBindingTuple);
	var eflowElementsTuple = Tuple{"key"='flowElements', "value"='FlowElement'};
	eEReferenceSequence.add(eflowElementsTuple);
	var elaneSetsTuple = Tuple{"key"='laneSets', "value"='LaneSet'};
	eEReferenceSequence.add(elaneSetsTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var esupportsTuple = Tuple{"key"='supports', "value"='Process'};
	eEReferenceSequence.add(esupportsTuple);
	var edefinitionalCollaborationRefTuple = Tuple{"key"='definitionalCollaborationRef', "value"='Collaboration'};
	eEReferenceSequence.add(edefinitionalCollaborationRefTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var eartifactsTuple = Tuple{"key"='artifacts', "value"='Artifact'};
	eEReferenceSequence.add(eartifactsTuple);
	var ecorrelationSubscriptionsTuple = Tuple{"key"='correlationSubscriptions', "value"='CorrelationSubscription'};
	eEReferenceSequence.add(ecorrelationSubscriptionsTuple);
	var edecomposedByTuple = Tuple{"key"='decomposedBy', "value"='Process'};
	eEReferenceSequence.add(edecomposedByTuple);
	var edecomposesTuple = Tuple{"key"='decomposes', "value"='Process'};
	eEReferenceSequence.add(edecomposesTuple);
	var idFlowElementsContainer = 0;
	for (eFlowElementsContainer in DSL!EObject.all.select(s|s.isTypeOf(DSL!FlowElementsContainer))){
		var eFlowElementsContainerTuple = Tuple{"key"=eFlowElementsContainer.type().name.asString()+"_"+(idFlowElementsContainer++).asString(),"value"= eFlowElementsContainer};
		eObjectSequence.add(eFlowElementsContainerTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eflowElementsTuple = Tuple{"key"='flowElements', "value"='FlowElement'};
	eEReferenceSequence.add(eflowElementsTuple);
	var elaneSetsTuple = Tuple{"key"='laneSets', "value"='LaneSet'};
	eEReferenceSequence.add(elaneSetsTuple);
	var idFlowElement = 0;
	for (eFlowElement in DSL!EObject.all.select(s|s.isTypeOf(DSL!FlowElement))){
		var eFlowElementTuple = Tuple{"key"=eFlowElement.type().name.asString()+"_"+(idFlowElement++).asString(),"value"= eFlowElement};
		eObjectSequence.add(eFlowElementTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var idCategoryValue = 0;
	for (eCategoryValue in DSL!EObject.all.select(s|s.isTypeOf(DSL!CategoryValue))){
		var eCategoryValueTuple = Tuple{"key"=eCategoryValue.type().name.asString()+"_"+(idCategoryValue++).asString(),"value"= eCategoryValue};
		eObjectSequence.add(eCategoryValueTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var ecategorizedFlowElementsTuple = Tuple{"key"='categorizedFlowElements', "value"='FlowElement'};
	eEReferenceSequence.add(ecategorizedFlowElementsTuple);
	var idLaneSet = 0;
	for (eLaneSet in DSL!EObject.all.select(s|s.isTypeOf(DSL!LaneSet))){
		var eLaneSetTuple = Tuple{"key"=eLaneSet.type().name.asString()+"_"+(idLaneSet++).asString(),"value"= eLaneSet};
		eObjectSequence.add(eLaneSetTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var idLane = 0;
	for (eLane in DSL!EObject.all.select(s|s.isTypeOf(DSL!Lane))){
		var eLaneTuple = Tuple{"key"=eLane.type().name.asString()+"_"+(idLane++).asString(),"value"= eLane};
		eObjectSequence.add(eLaneTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var echildLaneSetTuple = Tuple{"key"='childLaneSet', "value"='LaneSet'};
	eEReferenceSequence.add(echildLaneSetTuple);
	var epartitionElementRefTuple = Tuple{"key"='partitionElementRef', "value"='BaseElement'};
	eEReferenceSequence.add(epartitionElementRefTuple);
	var eflowNodeRefsTuple = Tuple{"key"='flowNodeRefs', "value"='FlowNode'};
	eEReferenceSequence.add(eflowNodeRefsTuple);
	var epartitionElementTuple = Tuple{"key"='partitionElement', "value"='BaseElement'};
	eEReferenceSequence.add(epartitionElementTuple);
	var idFlowNode = 0;
	for (eFlowNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!FlowNode))){
		var eFlowNodeTuple = Tuple{"key"=eFlowNode.type().name.asString()+"_"+(idFlowNode++).asString(),"value"= eFlowNode};
		eObjectSequence.add(eFlowNodeTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var idSequenceFlow = 0;
	for (eSequenceFlow in DSL!EObject.all.select(s|s.isTypeOf(DSL!SequenceFlow))){
		var eSequenceFlowTuple = Tuple{"key"=eSequenceFlow.type().name.asString()+"_"+(idSequenceFlow++).asString(),"value"= eSequenceFlow};
		eObjectSequence.add(eSequenceFlowTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var econditionExpressionTuple = Tuple{"key"='conditionExpression', "value"='Expression'};
	eEReferenceSequence.add(econditionExpressionTuple);
	var etargetRefTuple = Tuple{"key"='targetRef', "value"='FlowNode'};
	eEReferenceSequence.add(etargetRefTuple);
	var esourceRefTuple = Tuple{"key"='sourceRef', "value"='FlowNode'};
	eEReferenceSequence.add(esourceRefTuple);
	var idProperty = 0;
	for (eProperty in DSL!EObject.all.select(s|s.isTypeOf(DSL!Property))){
		var ePropertyTuple = Tuple{"key"=eProperty.type().name.asString()+"_"+(idProperty++).asString(),"value"= eProperty};
		eObjectSequence.add(ePropertyTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eitemSubjectRefTuple = Tuple{"key"='itemSubjectRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(eitemSubjectRefTuple);
	var edataStateTuple = Tuple{"key"='dataState', "value"='DataState'};
	eEReferenceSequence.add(edataStateTuple);
	var idCollaboration = 0;
	for (eCollaboration in DSL!EObject.all.select(s|s.isTypeOf(DSL!Collaboration))){
		var eCollaborationTuple = Tuple{"key"=eCollaboration.type().name.asString()+"_"+(idCollaboration++).asString(),"value"= eCollaboration};
		eObjectSequence.add(eCollaborationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var echoreographyRefTuple = Tuple{"key"='choreographyRef', "value"='Choreography'};
	eEReferenceSequence.add(echoreographyRefTuple);
	var eartifactsTuple = Tuple{"key"='artifacts', "value"='Artifact'};
	eEReferenceSequence.add(eartifactsTuple);
	var eparticipantAssociationsTuple = Tuple{"key"='participantAssociations', "value"='ParticipantAssociation'};
	eEReferenceSequence.add(eparticipantAssociationsTuple);
	var emessageFlowAssociationsTuple = Tuple{"key"='messageFlowAssociations', "value"='MessageFlowAssociation'};
	eEReferenceSequence.add(emessageFlowAssociationsTuple);
	var econversationAssociationsTuple = Tuple{"key"='conversationAssociations', "value"='ConversationAssociation'};
	eEReferenceSequence.add(econversationAssociationsTuple);
	var eparticipantsTuple = Tuple{"key"='participants', "value"='Participant'};
	eEReferenceSequence.add(eparticipantsTuple);
	var emessageFlowsTuple = Tuple{"key"='messageFlows', "value"='MessageFlow'};
	eEReferenceSequence.add(emessageFlowsTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var econversationsTuple = Tuple{"key"='conversations', "value"='ConversationNode'};
	eEReferenceSequence.add(econversationsTuple);
	var econversationLinksTuple = Tuple{"key"='conversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(econversationLinksTuple);
	var idChoreography = 0;
	for (eChoreography in DSL!EObject.all.select(s|s.isTypeOf(DSL!Choreography))){
		var eChoreographyTuple = Tuple{"key"=eChoreography.type().name.asString()+"_"+(idChoreography++).asString(),"value"= eChoreography};
		eObjectSequence.add(eChoreographyTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var echoreographyRefTuple = Tuple{"key"='choreographyRef', "value"='Choreography'};
	eEReferenceSequence.add(echoreographyRefTuple);
	var eartifactsTuple = Tuple{"key"='artifacts', "value"='Artifact'};
	eEReferenceSequence.add(eartifactsTuple);
	var eparticipantAssociationsTuple = Tuple{"key"='participantAssociations', "value"='ParticipantAssociation'};
	eEReferenceSequence.add(eparticipantAssociationsTuple);
	var emessageFlowAssociationsTuple = Tuple{"key"='messageFlowAssociations', "value"='MessageFlowAssociation'};
	eEReferenceSequence.add(emessageFlowAssociationsTuple);
	var econversationAssociationsTuple = Tuple{"key"='conversationAssociations', "value"='ConversationAssociation'};
	eEReferenceSequence.add(econversationAssociationsTuple);
	var eparticipantsTuple = Tuple{"key"='participants', "value"='Participant'};
	eEReferenceSequence.add(eparticipantsTuple);
	var emessageFlowsTuple = Tuple{"key"='messageFlows', "value"='MessageFlow'};
	eEReferenceSequence.add(emessageFlowsTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var econversationsTuple = Tuple{"key"='conversations', "value"='ConversationNode'};
	eEReferenceSequence.add(econversationsTuple);
	var econversationLinksTuple = Tuple{"key"='conversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(econversationLinksTuple);
	var eflowElementsTuple = Tuple{"key"='flowElements', "value"='FlowElement'};
	eEReferenceSequence.add(eflowElementsTuple);
	var elaneSetsTuple = Tuple{"key"='laneSets', "value"='LaneSet'};
	eEReferenceSequence.add(elaneSetsTuple);
	var idArtifact = 0;
	for (eArtifact in DSL!EObject.all.select(s|s.isTypeOf(DSL!Artifact))){
		var eArtifactTuple = Tuple{"key"=eArtifact.type().name.asString()+"_"+(idArtifact++).asString(),"value"= eArtifact};
		eObjectSequence.add(eArtifactTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idParticipantAssociation = 0;
	for (eParticipantAssociation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ParticipantAssociation))){
		var eParticipantAssociationTuple = Tuple{"key"=eParticipantAssociation.type().name.asString()+"_"+(idParticipantAssociation++).asString(),"value"= eParticipantAssociation};
		eObjectSequence.add(eParticipantAssociationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var einnerParticipantRefTuple = Tuple{"key"='innerParticipantRef', "value"='Participant'};
	eEReferenceSequence.add(einnerParticipantRefTuple);
	var eouterParticipantRefTuple = Tuple{"key"='outerParticipantRef', "value"='Participant'};
	eEReferenceSequence.add(eouterParticipantRefTuple);
	var idParticipant = 0;
	for (eParticipant in DSL!EObject.all.select(s|s.isTypeOf(DSL!Participant))){
		var eParticipantTuple = Tuple{"key"=eParticipant.type().name.asString()+"_"+(idParticipant++).asString(),"value"= eParticipant};
		eObjectSequence.add(eParticipantTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var einterfaceRefsTuple = Tuple{"key"='interfaceRefs', "value"='Interface'};
	eEReferenceSequence.add(einterfaceRefsTuple);
	var eparticipantMultiplicityTuple = Tuple{"key"='participantMultiplicity', "value"='ParticipantMultiplicity'};
	eEReferenceSequence.add(eparticipantMultiplicityTuple);
	var eendPointRefsTuple = Tuple{"key"='endPointRefs', "value"='EndPoint'};
	eEReferenceSequence.add(eendPointRefsTuple);
	var eprocessRefTuple = Tuple{"key"='processRef', "value"='Process'};
	eEReferenceSequence.add(eprocessRefTuple);
	var idInteractionNode = 0;
	for (eInteractionNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!InteractionNode))){
		var eInteractionNodeTuple = Tuple{"key"=eInteractionNode.type().name.asString()+"_"+(idInteractionNode++).asString(),"value"= eInteractionNode};
		eObjectSequence.add(eInteractionNodeTuple);
	}
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var idConversationLink = 0;
	for (eConversationLink in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConversationLink))){
		var eConversationLinkTuple = Tuple{"key"=eConversationLink.type().name.asString()+"_"+(idConversationLink++).asString(),"value"= eConversationLink};
		eObjectSequence.add(eConversationLinkTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var esourceRefTuple = Tuple{"key"='sourceRef', "value"='InteractionNode'};
	eEReferenceSequence.add(esourceRefTuple);
	var etargetRefTuple = Tuple{"key"='targetRef', "value"='InteractionNode'};
	eEReferenceSequence.add(etargetRefTuple);
	var idParticipantMultiplicity = 0;
	for (eParticipantMultiplicity in DSL!EObject.all.select(s|s.isTypeOf(DSL!ParticipantMultiplicity))){
		var eParticipantMultiplicityTuple = Tuple{"key"=eParticipantMultiplicity.type().name.asString()+"_"+(idParticipantMultiplicity++).asString(),"value"= eParticipantMultiplicity};
		eObjectSequence.add(eParticipantMultiplicityTuple);
	}
	var idMessageFlowAssociation = 0;
	for (eMessageFlowAssociation in DSL!EObject.all.select(s|s.isTypeOf(DSL!MessageFlowAssociation))){
		var eMessageFlowAssociationTuple = Tuple{"key"=eMessageFlowAssociation.type().name.asString()+"_"+(idMessageFlowAssociation++).asString(),"value"= eMessageFlowAssociation};
		eObjectSequence.add(eMessageFlowAssociationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var einnerMessageFlowRefTuple = Tuple{"key"='innerMessageFlowRef', "value"='MessageFlow'};
	eEReferenceSequence.add(einnerMessageFlowRefTuple);
	var eouterMessageFlowRefTuple = Tuple{"key"='outerMessageFlowRef', "value"='MessageFlow'};
	eEReferenceSequence.add(eouterMessageFlowRefTuple);
	var idMessageFlow = 0;
	for (eMessageFlow in DSL!EObject.all.select(s|s.isTypeOf(DSL!MessageFlow))){
		var eMessageFlowTuple = Tuple{"key"=eMessageFlow.type().name.asString()+"_"+(idMessageFlow++).asString(),"value"= eMessageFlow};
		eObjectSequence.add(eMessageFlowTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var esourceRefTuple = Tuple{"key"='sourceRef', "value"='InteractionNode'};
	eEReferenceSequence.add(esourceRefTuple);
	var etargetRefTuple = Tuple{"key"='targetRef', "value"='InteractionNode'};
	eEReferenceSequence.add(etargetRefTuple);
	var emessageRefTuple = Tuple{"key"='messageRef', "value"='Message'};
	eEReferenceSequence.add(emessageRefTuple);
	var idConversationAssociation = 0;
	for (eConversationAssociation in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConversationAssociation))){
		var eConversationAssociationTuple = Tuple{"key"=eConversationAssociation.type().name.asString()+"_"+(idConversationAssociation++).asString(),"value"= eConversationAssociation};
		eObjectSequence.add(eConversationAssociationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var einnerConversationNodeRefTuple = Tuple{"key"='innerConversationNodeRef', "value"='ConversationNode'};
	eEReferenceSequence.add(einnerConversationNodeRefTuple);
	var eouterConversationNodeRefTuple = Tuple{"key"='outerConversationNodeRef', "value"='ConversationNode'};
	eEReferenceSequence.add(eouterConversationNodeRefTuple);
	var idConversationNode = 0;
	for (eConversationNode in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConversationNode))){
		var eConversationNodeTuple = Tuple{"key"=eConversationNode.type().name.asString()+"_"+(idConversationNode++).asString(),"value"= eConversationNode};
		eObjectSequence.add(eConversationNodeTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eparticipantRefsTuple = Tuple{"key"='participantRefs', "value"='Participant'};
	eEReferenceSequence.add(eparticipantRefsTuple);
	var emessageFlowRefsTuple = Tuple{"key"='messageFlowRefs', "value"='MessageFlow'};
	eEReferenceSequence.add(emessageFlowRefsTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var idCorrelationKey = 0;
	for (eCorrelationKey in DSL!EObject.all.select(s|s.isTypeOf(DSL!CorrelationKey))){
		var eCorrelationKeyTuple = Tuple{"key"=eCorrelationKey.type().name.asString()+"_"+(idCorrelationKey++).asString(),"value"= eCorrelationKey};
		eObjectSequence.add(eCorrelationKeyTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var ecorrelationPropertyRefTuple = Tuple{"key"='correlationPropertyRef', "value"='CorrelationProperty'};
	eEReferenceSequence.add(ecorrelationPropertyRefTuple);
	var idCorrelationProperty = 0;
	for (eCorrelationProperty in DSL!EObject.all.select(s|s.isTypeOf(DSL!CorrelationProperty))){
		var eCorrelationPropertyTuple = Tuple{"key"=eCorrelationProperty.type().name.asString()+"_"+(idCorrelationProperty++).asString(),"value"= eCorrelationProperty};
		eObjectSequence.add(eCorrelationPropertyTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var ecorrelationPropertyRetrievalExpressionTuple = Tuple{"key"='correlationPropertyRetrievalExpression', "value"='CorrelationPropertyRetrievalExpression'};
	eEReferenceSequence.add(ecorrelationPropertyRetrievalExpressionTuple);
	var etypeTuple = Tuple{"key"='type', "value"='ItemDefinition'};
	eEReferenceSequence.add(etypeTuple);
	var idCorrelationPropertyRetrievalExpression = 0;
	for (eCorrelationPropertyRetrievalExpression in DSL!EObject.all.select(s|s.isTypeOf(DSL!CorrelationPropertyRetrievalExpression))){
		var eCorrelationPropertyRetrievalExpressionTuple = Tuple{"key"=eCorrelationPropertyRetrievalExpression.type().name.asString()+"_"+(idCorrelationPropertyRetrievalExpression++).asString(),"value"= eCorrelationPropertyRetrievalExpression};
		eObjectSequence.add(eCorrelationPropertyRetrievalExpressionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var emessagePathTuple = Tuple{"key"='messagePath', "value"='FormalExpression'};
	eEReferenceSequence.add(emessagePathTuple);
	var emessageRefTuple = Tuple{"key"='messageRef', "value"='Message'};
	eEReferenceSequence.add(emessageRefTuple);
	var idFormalExpression = 0;
	for (eFormalExpression in DSL!EObject.all.select(s|s.isTypeOf(DSL!FormalExpression))){
		var eFormalExpressionTuple = Tuple{"key"=eFormalExpression.type().name.asString()+"_"+(idFormalExpression++).asString(),"value"= eFormalExpression};
		eObjectSequence.add(eFormalExpressionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var ebodyTuple = Tuple{"key"='body', "value"='EObject'};
	eEReferenceSequence.add(ebodyTuple);
	var eevaluatesToTypeRefTuple = Tuple{"key"='evaluatesToTypeRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(eevaluatesToTypeRefTuple);
	var idCorrelationSubscription = 0;
	for (eCorrelationSubscription in DSL!EObject.all.select(s|s.isTypeOf(DSL!CorrelationSubscription))){
		var eCorrelationSubscriptionTuple = Tuple{"key"=eCorrelationSubscription.type().name.asString()+"_"+(idCorrelationSubscription++).asString(),"value"= eCorrelationSubscription};
		eObjectSequence.add(eCorrelationSubscriptionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var ecorrelationKeyRefTuple = Tuple{"key"='correlationKeyRef', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeyRefTuple);
	var ecorrelationPropertyBindingTuple = Tuple{"key"='correlationPropertyBinding', "value"='CorrelationPropertyBinding'};
	eEReferenceSequence.add(ecorrelationPropertyBindingTuple);
	var idCorrelationPropertyBinding = 0;
	for (eCorrelationPropertyBinding in DSL!EObject.all.select(s|s.isTypeOf(DSL!CorrelationPropertyBinding))){
		var eCorrelationPropertyBindingTuple = Tuple{"key"=eCorrelationPropertyBinding.type().name.asString()+"_"+(idCorrelationPropertyBinding++).asString(),"value"= eCorrelationPropertyBinding};
		eObjectSequence.add(eCorrelationPropertyBindingTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var edataPathTuple = Tuple{"key"='dataPath', "value"='FormalExpression'};
	eEReferenceSequence.add(edataPathTuple);
	var ecorrelationPropertyRefTuple = Tuple{"key"='correlationPropertyRef', "value"='CorrelationProperty'};
	eEReferenceSequence.add(ecorrelationPropertyRefTuple);
	var idGlobalManualTask = 0;
	for (eGlobalManualTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!GlobalManualTask))){
		var eGlobalManualTaskTuple = Tuple{"key"=eGlobalManualTask.type().name.asString()+"_"+(idGlobalManualTask++).asString(),"value"= eGlobalManualTask};
		eObjectSequence.add(eGlobalManualTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var esupportedInterfaceRefsTuple = Tuple{"key"='supportedInterfaceRefs', "value"='Interface'};
	eEReferenceSequence.add(esupportedInterfaceRefsTuple);
	var eioBindingTuple = Tuple{"key"='ioBinding', "value"='InputOutputBinding'};
	eEReferenceSequence.add(eioBindingTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var idManualTask = 0;
	for (eManualTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!ManualTask))){
		var eManualTaskTuple = Tuple{"key"=eManualTask.type().name.asString()+"_"+(idManualTask++).asString(),"value"= eManualTask};
		eObjectSequence.add(eManualTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var idTask = 0;
	for (eTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!Task))){
		var eTaskTuple = Tuple{"key"=eTask.type().name.asString()+"_"+(idTask++).asString(),"value"= eTask};
		eObjectSequence.add(eTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var idActivity = 0;
	for (eActivity in DSL!EObject.all.select(s|s.isTypeOf(DSL!Activity))){
		var eActivityTuple = Tuple{"key"=eActivity.type().name.asString()+"_"+(idActivity++).asString(),"value"= eActivity};
		eObjectSequence.add(eActivityTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var idLoopCharacteristics = 0;
	for (eLoopCharacteristics in DSL!EObject.all.select(s|s.isTypeOf(DSL!LoopCharacteristics))){
		var eLoopCharacteristicsTuple = Tuple{"key"=eLoopCharacteristics.type().name.asString()+"_"+(idLoopCharacteristics++).asString(),"value"= eLoopCharacteristics};
		eObjectSequence.add(eLoopCharacteristicsTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idBoundaryEvent = 0;
	for (eBoundaryEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!BoundaryEvent))){
		var eBoundaryEventTuple = Tuple{"key"=eBoundaryEvent.type().name.asString()+"_"+(idBoundaryEvent++).asString(),"value"= eBoundaryEvent};
		eObjectSequence.add(eBoundaryEventTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eoutputSetTuple = Tuple{"key"='outputSet', "value"='OutputSet'};
	eEReferenceSequence.add(eoutputSetTuple);
	var eeventDefinitionRefsTuple = Tuple{"key"='eventDefinitionRefs', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionRefsTuple);
	var edataOutputAssociationTuple = Tuple{"key"='dataOutputAssociation', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationTuple);
	var edataOutputsTuple = Tuple{"key"='dataOutputs', "value"='DataOutput'};
	eEReferenceSequence.add(edataOutputsTuple);
	var eeventDefinitionsTuple = Tuple{"key"='eventDefinitions', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionsTuple);
	var eattachedToRefTuple = Tuple{"key"='attachedToRef', "value"='Activity'};
	eEReferenceSequence.add(eattachedToRefTuple);
	var idCatchEvent = 0;
	for (eCatchEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!CatchEvent))){
		var eCatchEventTuple = Tuple{"key"=eCatchEvent.type().name.asString()+"_"+(idCatchEvent++).asString(),"value"= eCatchEvent};
		eObjectSequence.add(eCatchEventTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eoutputSetTuple = Tuple{"key"='outputSet', "value"='OutputSet'};
	eEReferenceSequence.add(eoutputSetTuple);
	var eeventDefinitionRefsTuple = Tuple{"key"='eventDefinitionRefs', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionRefsTuple);
	var edataOutputAssociationTuple = Tuple{"key"='dataOutputAssociation', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationTuple);
	var edataOutputsTuple = Tuple{"key"='dataOutputs', "value"='DataOutput'};
	eEReferenceSequence.add(edataOutputsTuple);
	var eeventDefinitionsTuple = Tuple{"key"='eventDefinitions', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionsTuple);
	var idEvent = 0;
	for (eEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!Event))){
		var eEventTuple = Tuple{"key"=eEvent.type().name.asString()+"_"+(idEvent++).asString(),"value"= eEvent};
		eObjectSequence.add(eEventTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var idEventDefinition = 0;
	for (eEventDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!EventDefinition))){
		var eEventDefinitionTuple = Tuple{"key"=eEventDefinition.type().name.asString()+"_"+(idEventDefinition++).asString(),"value"= eEventDefinition};
		eObjectSequence.add(eEventDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idDataOutputAssociation = 0;
	for (eDataOutputAssociation in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataOutputAssociation))){
		var eDataOutputAssociationTuple = Tuple{"key"=eDataOutputAssociation.type().name.asString()+"_"+(idDataOutputAssociation++).asString(),"value"= eDataOutputAssociation};
		eObjectSequence.add(eDataOutputAssociationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var etransformationTuple = Tuple{"key"='transformation', "value"='FormalExpression'};
	eEReferenceSequence.add(etransformationTuple);
	var eassignmentTuple = Tuple{"key"='assignment', "value"='Assignment'};
	eEReferenceSequence.add(eassignmentTuple);
	var etargetRefTuple = Tuple{"key"='targetRef', "value"='ItemAwareElement'};
	eEReferenceSequence.add(etargetRefTuple);
	var esourceRefTuple = Tuple{"key"='sourceRef', "value"='ItemAwareElement'};
	eEReferenceSequence.add(esourceRefTuple);
	var idDataAssociation = 0;
	for (eDataAssociation in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataAssociation))){
		var eDataAssociationTuple = Tuple{"key"=eDataAssociation.type().name.asString()+"_"+(idDataAssociation++).asString(),"value"= eDataAssociation};
		eObjectSequence.add(eDataAssociationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var etransformationTuple = Tuple{"key"='transformation', "value"='FormalExpression'};
	eEReferenceSequence.add(etransformationTuple);
	var eassignmentTuple = Tuple{"key"='assignment', "value"='Assignment'};
	eEReferenceSequence.add(eassignmentTuple);
	var etargetRefTuple = Tuple{"key"='targetRef', "value"='ItemAwareElement'};
	eEReferenceSequence.add(etargetRefTuple);
	var esourceRefTuple = Tuple{"key"='sourceRef', "value"='ItemAwareElement'};
	eEReferenceSequence.add(esourceRefTuple);
	var idAssignment = 0;
	for (eAssignment in DSL!EObject.all.select(s|s.isTypeOf(DSL!Assignment))){
		var eAssignmentTuple = Tuple{"key"=eAssignment.type().name.asString()+"_"+(idAssignment++).asString(),"value"= eAssignment};
		eObjectSequence.add(eAssignmentTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var efromTuple = Tuple{"key"='from', "value"='Expression'};
	eEReferenceSequence.add(efromTuple);
	var etoTuple = Tuple{"key"='to', "value"='Expression'};
	eEReferenceSequence.add(etoTuple);
	var idDataInputAssociation = 0;
	for (eDataInputAssociation in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataInputAssociation))){
		var eDataInputAssociationTuple = Tuple{"key"=eDataInputAssociation.type().name.asString()+"_"+(idDataInputAssociation++).asString(),"value"= eDataInputAssociation};
		eObjectSequence.add(eDataInputAssociationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var etransformationTuple = Tuple{"key"='transformation', "value"='FormalExpression'};
	eEReferenceSequence.add(etransformationTuple);
	var eassignmentTuple = Tuple{"key"='assignment', "value"='Assignment'};
	eEReferenceSequence.add(eassignmentTuple);
	var etargetRefTuple = Tuple{"key"='targetRef', "value"='ItemAwareElement'};
	eEReferenceSequence.add(etargetRefTuple);
	var esourceRefTuple = Tuple{"key"='sourceRef', "value"='ItemAwareElement'};
	eEReferenceSequence.add(esourceRefTuple);
	var idUserTask = 0;
	for (eUserTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!UserTask))){
		var eUserTaskTuple = Tuple{"key"=eUserTask.type().name.asString()+"_"+(idUserTask++).asString(),"value"= eUserTask};
		eObjectSequence.add(eUserTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var erenderingsTuple = Tuple{"key"='renderings', "value"='Rendering'};
	eEReferenceSequence.add(erenderingsTuple);
	var idRendering = 0;
	for (eRendering in DSL!EObject.all.select(s|s.isTypeOf(DSL!Rendering))){
		var eRenderingTuple = Tuple{"key"=eRendering.type().name.asString()+"_"+(idRendering++).asString(),"value"= eRendering};
		eObjectSequence.add(eRenderingTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idHumanPerformer = 0;
	for (eHumanPerformer in DSL!EObject.all.select(s|s.isTypeOf(DSL!HumanPerformer))){
		var eHumanPerformerTuple = Tuple{"key"=eHumanPerformer.type().name.asString()+"_"+(idHumanPerformer++).asString(),"value"= eHumanPerformer};
		eObjectSequence.add(eHumanPerformerTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eresourceRefTuple = Tuple{"key"='resourceRef', "value"='Resource'};
	eEReferenceSequence.add(eresourceRefTuple);
	var eresourceParameterBindingsTuple = Tuple{"key"='resourceParameterBindings', "value"='ResourceParameterBinding'};
	eEReferenceSequence.add(eresourceParameterBindingsTuple);
	var eresourceAssignmentExpressionTuple = Tuple{"key"='resourceAssignmentExpression', "value"='ResourceAssignmentExpression'};
	eEReferenceSequence.add(eresourceAssignmentExpressionTuple);
	var idPotentialOwner = 0;
	for (ePotentialOwner in DSL!EObject.all.select(s|s.isTypeOf(DSL!PotentialOwner))){
		var ePotentialOwnerTuple = Tuple{"key"=ePotentialOwner.type().name.asString()+"_"+(idPotentialOwner++).asString(),"value"= ePotentialOwner};
		eObjectSequence.add(ePotentialOwnerTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eresourceRefTuple = Tuple{"key"='resourceRef', "value"='Resource'};
	eEReferenceSequence.add(eresourceRefTuple);
	var eresourceParameterBindingsTuple = Tuple{"key"='resourceParameterBindings', "value"='ResourceParameterBinding'};
	eEReferenceSequence.add(eresourceParameterBindingsTuple);
	var eresourceAssignmentExpressionTuple = Tuple{"key"='resourceAssignmentExpression', "value"='ResourceAssignmentExpression'};
	eEReferenceSequence.add(eresourceAssignmentExpressionTuple);
	var idGlobalUserTask = 0;
	for (eGlobalUserTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!GlobalUserTask))){
		var eGlobalUserTaskTuple = Tuple{"key"=eGlobalUserTask.type().name.asString()+"_"+(idGlobalUserTask++).asString(),"value"= eGlobalUserTask};
		eObjectSequence.add(eGlobalUserTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var esupportedInterfaceRefsTuple = Tuple{"key"='supportedInterfaceRefs', "value"='Interface'};
	eEReferenceSequence.add(esupportedInterfaceRefsTuple);
	var eioBindingTuple = Tuple{"key"='ioBinding', "value"='InputOutputBinding'};
	eEReferenceSequence.add(eioBindingTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var erenderingsTuple = Tuple{"key"='renderings', "value"='Rendering'};
	eEReferenceSequence.add(erenderingsTuple);
	var idGateway = 0;
	for (eGateway in DSL!EObject.all.select(s|s.isTypeOf(DSL!Gateway))){
		var eGatewayTuple = Tuple{"key"=eGateway.type().name.asString()+"_"+(idGateway++).asString(),"value"= eGateway};
		eObjectSequence.add(eGatewayTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var idEventBasedGateway = 0;
	for (eEventBasedGateway in DSL!EObject.all.select(s|s.isTypeOf(DSL!EventBasedGateway))){
		var eEventBasedGatewayTuple = Tuple{"key"=eEventBasedGateway.type().name.asString()+"_"+(idEventBasedGateway++).asString(),"value"= eEventBasedGateway};
		eObjectSequence.add(eEventBasedGatewayTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var idComplexGateway = 0;
	for (eComplexGateway in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComplexGateway))){
		var eComplexGatewayTuple = Tuple{"key"=eComplexGateway.type().name.asString()+"_"+(idComplexGateway++).asString(),"value"= eComplexGateway};
		eObjectSequence.add(eComplexGatewayTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eactivationConditionTuple = Tuple{"key"='activationCondition', "value"='Expression'};
	eEReferenceSequence.add(eactivationConditionTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var idExclusiveGateway = 0;
	for (eExclusiveGateway in DSL!EObject.all.select(s|s.isTypeOf(DSL!ExclusiveGateway))){
		var eExclusiveGatewayTuple = Tuple{"key"=eExclusiveGateway.type().name.asString()+"_"+(idExclusiveGateway++).asString(),"value"= eExclusiveGateway};
		eObjectSequence.add(eExclusiveGatewayTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var idInclusiveGateway = 0;
	for (eInclusiveGateway in DSL!EObject.all.select(s|s.isTypeOf(DSL!InclusiveGateway))){
		var eInclusiveGatewayTuple = Tuple{"key"=eInclusiveGateway.type().name.asString()+"_"+(idInclusiveGateway++).asString(),"value"= eInclusiveGateway};
		eObjectSequence.add(eInclusiveGatewayTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var idParallelGateway = 0;
	for (eParallelGateway in DSL!EObject.all.select(s|s.isTypeOf(DSL!ParallelGateway))){
		var eParallelGatewayTuple = Tuple{"key"=eParallelGateway.type().name.asString()+"_"+(idParallelGateway++).asString(),"value"= eParallelGateway};
		eObjectSequence.add(eParallelGatewayTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var idRelationship = 0;
	for (eRelationship in DSL!EObject.all.select(s|s.isTypeOf(DSL!Relationship))){
		var eRelationshipTuple = Tuple{"key"=eRelationship.type().name.asString()+"_"+(idRelationship++).asString(),"value"= eRelationship};
		eObjectSequence.add(eRelationshipTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var esourcesTuple = Tuple{"key"='sources', "value"='EObject'};
	eEReferenceSequence.add(esourcesTuple);
	var etargetsTuple = Tuple{"key"='targets', "value"='EObject'};
	eEReferenceSequence.add(etargetsTuple);
	var idExtension = 0;
	for (eExtension in DSL!EObject.all.select(s|s.isTypeOf(DSL!Extension))){
		var eExtensionTuple = Tuple{"key"=eExtension.type().name.asString()+"_"+(idExtension++).asString(),"value"= eExtension};
		eObjectSequence.add(eExtensionTuple);
	}
	var edefinitionTuple = Tuple{"key"='definition', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(edefinitionTuple);
	var idIntermediateCatchEvent = 0;
	for (eIntermediateCatchEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!IntermediateCatchEvent))){
		var eIntermediateCatchEventTuple = Tuple{"key"=eIntermediateCatchEvent.type().name.asString()+"_"+(idIntermediateCatchEvent++).asString(),"value"= eIntermediateCatchEvent};
		eObjectSequence.add(eIntermediateCatchEventTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eoutputSetTuple = Tuple{"key"='outputSet', "value"='OutputSet'};
	eEReferenceSequence.add(eoutputSetTuple);
	var eeventDefinitionRefsTuple = Tuple{"key"='eventDefinitionRefs', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionRefsTuple);
	var edataOutputAssociationTuple = Tuple{"key"='dataOutputAssociation', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationTuple);
	var edataOutputsTuple = Tuple{"key"='dataOutputs', "value"='DataOutput'};
	eEReferenceSequence.add(edataOutputsTuple);
	var eeventDefinitionsTuple = Tuple{"key"='eventDefinitions', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionsTuple);
	var idIntermediateThrowEvent = 0;
	for (eIntermediateThrowEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!IntermediateThrowEvent))){
		var eIntermediateThrowEventTuple = Tuple{"key"=eIntermediateThrowEvent.type().name.asString()+"_"+(idIntermediateThrowEvent++).asString(),"value"= eIntermediateThrowEvent};
		eObjectSequence.add(eIntermediateThrowEventTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var einputSetTuple = Tuple{"key"='inputSet', "value"='InputSet'};
	eEReferenceSequence.add(einputSetTuple);
	var eeventDefinitionRefsTuple = Tuple{"key"='eventDefinitionRefs', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionRefsTuple);
	var edataInputAssociationTuple = Tuple{"key"='dataInputAssociation', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationTuple);
	var edataInputsTuple = Tuple{"key"='dataInputs', "value"='DataInput'};
	eEReferenceSequence.add(edataInputsTuple);
	var eeventDefinitionsTuple = Tuple{"key"='eventDefinitions', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionsTuple);
	var idThrowEvent = 0;
	for (eThrowEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!ThrowEvent))){
		var eThrowEventTuple = Tuple{"key"=eThrowEvent.type().name.asString()+"_"+(idThrowEvent++).asString(),"value"= eThrowEvent};
		eObjectSequence.add(eThrowEventTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var einputSetTuple = Tuple{"key"='inputSet', "value"='InputSet'};
	eEReferenceSequence.add(einputSetTuple);
	var eeventDefinitionRefsTuple = Tuple{"key"='eventDefinitionRefs', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionRefsTuple);
	var edataInputAssociationTuple = Tuple{"key"='dataInputAssociation', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationTuple);
	var edataInputsTuple = Tuple{"key"='dataInputs', "value"='DataInput'};
	eEReferenceSequence.add(edataInputsTuple);
	var eeventDefinitionsTuple = Tuple{"key"='eventDefinitions', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionsTuple);
	var idEndEvent = 0;
	for (eEndEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!EndEvent))){
		var eEndEventTuple = Tuple{"key"=eEndEvent.type().name.asString()+"_"+(idEndEvent++).asString(),"value"= eEndEvent};
		eObjectSequence.add(eEndEventTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var einputSetTuple = Tuple{"key"='inputSet', "value"='InputSet'};
	eEReferenceSequence.add(einputSetTuple);
	var eeventDefinitionRefsTuple = Tuple{"key"='eventDefinitionRefs', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionRefsTuple);
	var edataInputAssociationTuple = Tuple{"key"='dataInputAssociation', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationTuple);
	var edataInputsTuple = Tuple{"key"='dataInputs', "value"='DataInput'};
	eEReferenceSequence.add(edataInputsTuple);
	var eeventDefinitionsTuple = Tuple{"key"='eventDefinitions', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionsTuple);
	var idStartEvent = 0;
	for (eStartEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!StartEvent))){
		var eStartEventTuple = Tuple{"key"=eStartEvent.type().name.asString()+"_"+(idStartEvent++).asString(),"value"= eStartEvent};
		eObjectSequence.add(eStartEventTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eoutputSetTuple = Tuple{"key"='outputSet', "value"='OutputSet'};
	eEReferenceSequence.add(eoutputSetTuple);
	var eeventDefinitionRefsTuple = Tuple{"key"='eventDefinitionRefs', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionRefsTuple);
	var edataOutputAssociationTuple = Tuple{"key"='dataOutputAssociation', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationTuple);
	var edataOutputsTuple = Tuple{"key"='dataOutputs', "value"='DataOutput'};
	eEReferenceSequence.add(edataOutputsTuple);
	var eeventDefinitionsTuple = Tuple{"key"='eventDefinitions', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionsTuple);
	var idCancelEventDefinition = 0;
	for (eCancelEventDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!CancelEventDefinition))){
		var eCancelEventDefinitionTuple = Tuple{"key"=eCancelEventDefinition.type().name.asString()+"_"+(idCancelEventDefinition++).asString(),"value"= eCancelEventDefinition};
		eObjectSequence.add(eCancelEventDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idErrorEventDefinition = 0;
	for (eErrorEventDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!ErrorEventDefinition))){
		var eErrorEventDefinitionTuple = Tuple{"key"=eErrorEventDefinition.type().name.asString()+"_"+(idErrorEventDefinition++).asString(),"value"= eErrorEventDefinition};
		eObjectSequence.add(eErrorEventDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eerrorRefTuple = Tuple{"key"='errorRef', "value"='Error'};
	eEReferenceSequence.add(eerrorRefTuple);
	var idTerminateEventDefinition = 0;
	for (eTerminateEventDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!TerminateEventDefinition))){
		var eTerminateEventDefinitionTuple = Tuple{"key"=eTerminateEventDefinition.type().name.asString()+"_"+(idTerminateEventDefinition++).asString(),"value"= eTerminateEventDefinition};
		eObjectSequence.add(eTerminateEventDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idEscalationEventDefinition = 0;
	for (eEscalationEventDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!EscalationEventDefinition))){
		var eEscalationEventDefinitionTuple = Tuple{"key"=eEscalationEventDefinition.type().name.asString()+"_"+(idEscalationEventDefinition++).asString(),"value"= eEscalationEventDefinition};
		eObjectSequence.add(eEscalationEventDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eescalationRefTuple = Tuple{"key"='escalationRef', "value"='Escalation'};
	eEReferenceSequence.add(eescalationRefTuple);
	var idEscalation = 0;
	for (eEscalation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Escalation))){
		var eEscalationTuple = Tuple{"key"=eEscalation.type().name.asString()+"_"+(idEscalation++).asString(),"value"= eEscalation};
		eObjectSequence.add(eEscalationTuple);
	}
	var estructureRefTuple = Tuple{"key"='structureRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(estructureRefTuple);
	var idCompensateEventDefinition = 0;
	for (eCompensateEventDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!CompensateEventDefinition))){
		var eCompensateEventDefinitionTuple = Tuple{"key"=eCompensateEventDefinition.type().name.asString()+"_"+(idCompensateEventDefinition++).asString(),"value"= eCompensateEventDefinition};
		eObjectSequence.add(eCompensateEventDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eactivityRefTuple = Tuple{"key"='activityRef', "value"='Activity'};
	eEReferenceSequence.add(eactivityRefTuple);
	var idTimerEventDefinition = 0;
	for (eTimerEventDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!TimerEventDefinition))){
		var eTimerEventDefinitionTuple = Tuple{"key"=eTimerEventDefinition.type().name.asString()+"_"+(idTimerEventDefinition++).asString(),"value"= eTimerEventDefinition};
		eObjectSequence.add(eTimerEventDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var etimeDateTuple = Tuple{"key"='timeDate', "value"='Expression'};
	eEReferenceSequence.add(etimeDateTuple);
	var etimeCycleTuple = Tuple{"key"='timeCycle', "value"='Expression'};
	eEReferenceSequence.add(etimeCycleTuple);
	var etimeDurationTuple = Tuple{"key"='timeDuration', "value"='Expression'};
	eEReferenceSequence.add(etimeDurationTuple);
	var idLinkEventDefinition = 0;
	for (eLinkEventDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!LinkEventDefinition))){
		var eLinkEventDefinitionTuple = Tuple{"key"=eLinkEventDefinition.type().name.asString()+"_"+(idLinkEventDefinition++).asString(),"value"= eLinkEventDefinition};
		eObjectSequence.add(eLinkEventDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var etargetTuple = Tuple{"key"='target', "value"='LinkEventDefinition'};
	eEReferenceSequence.add(etargetTuple);
	var esourceTuple = Tuple{"key"='source', "value"='LinkEventDefinition'};
	eEReferenceSequence.add(esourceTuple);
	var idMessageEventDefinition = 0;
	for (eMessageEventDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!MessageEventDefinition))){
		var eMessageEventDefinitionTuple = Tuple{"key"=eMessageEventDefinition.type().name.asString()+"_"+(idMessageEventDefinition++).asString(),"value"= eMessageEventDefinition};
		eObjectSequence.add(eMessageEventDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var emessageRefTuple = Tuple{"key"='messageRef', "value"='Message'};
	eEReferenceSequence.add(emessageRefTuple);
	var eoperationRefTuple = Tuple{"key"='operationRef', "value"='Operation'};
	eEReferenceSequence.add(eoperationRefTuple);
	var idConditionalEventDefinition = 0;
	for (eConditionalEventDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!ConditionalEventDefinition))){
		var eConditionalEventDefinitionTuple = Tuple{"key"=eConditionalEventDefinition.type().name.asString()+"_"+(idConditionalEventDefinition++).asString(),"value"= eConditionalEventDefinition};
		eObjectSequence.add(eConditionalEventDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var econditionTuple = Tuple{"key"='condition', "value"='Expression'};
	eEReferenceSequence.add(econditionTuple);
	var idSignalEventDefinition = 0;
	for (eSignalEventDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!SignalEventDefinition))){
		var eSignalEventDefinitionTuple = Tuple{"key"=eSignalEventDefinition.type().name.asString()+"_"+(idSignalEventDefinition++).asString(),"value"= eSignalEventDefinition};
		eObjectSequence.add(eSignalEventDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var esignalRefTuple = Tuple{"key"='signalRef', "value"='Signal'};
	eEReferenceSequence.add(esignalRefTuple);
	var idSignal = 0;
	for (eSignal in DSL!EObject.all.select(s|s.isTypeOf(DSL!Signal))){
		var eSignalTuple = Tuple{"key"=eSignal.type().name.asString()+"_"+(idSignal++).asString(),"value"= eSignal};
		eObjectSequence.add(eSignalTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var estructureRefTuple = Tuple{"key"='structureRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(estructureRefTuple);
	var idImplicitThrowEvent = 0;
	for (eImplicitThrowEvent in DSL!EObject.all.select(s|s.isTypeOf(DSL!ImplicitThrowEvent))){
		var eImplicitThrowEventTuple = Tuple{"key"=eImplicitThrowEvent.type().name.asString()+"_"+(idImplicitThrowEvent++).asString(),"value"= eImplicitThrowEvent};
		eObjectSequence.add(eImplicitThrowEventTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var einputSetTuple = Tuple{"key"='inputSet', "value"='InputSet'};
	eEReferenceSequence.add(einputSetTuple);
	var eeventDefinitionRefsTuple = Tuple{"key"='eventDefinitionRefs', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionRefsTuple);
	var edataInputAssociationTuple = Tuple{"key"='dataInputAssociation', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationTuple);
	var edataInputsTuple = Tuple{"key"='dataInputs', "value"='DataInput'};
	eEReferenceSequence.add(edataInputsTuple);
	var eeventDefinitionsTuple = Tuple{"key"='eventDefinitions', "value"='EventDefinition'};
	eEReferenceSequence.add(eeventDefinitionsTuple);
	var idDataObject = 0;
	for (eDataObject in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataObject))){
		var eDataObjectTuple = Tuple{"key"=eDataObject.type().name.asString()+"_"+(idDataObject++).asString(),"value"= eDataObject};
		eObjectSequence.add(eDataObjectTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eitemSubjectRefTuple = Tuple{"key"='itemSubjectRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(eitemSubjectRefTuple);
	var edataStateTuple = Tuple{"key"='dataState', "value"='DataState'};
	eEReferenceSequence.add(edataStateTuple);
	var idDataStore = 0;
	for (eDataStore in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataStore))){
		var eDataStoreTuple = Tuple{"key"=eDataStore.type().name.asString()+"_"+(idDataStore++).asString(),"value"= eDataStore};
		eObjectSequence.add(eDataStoreTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eitemSubjectRefTuple = Tuple{"key"='itemSubjectRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(eitemSubjectRefTuple);
	var edataStateTuple = Tuple{"key"='dataState', "value"='DataState'};
	eEReferenceSequence.add(edataStateTuple);
	var idDataStoreReference = 0;
	for (eDataStoreReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataStoreReference))){
		var eDataStoreReferenceTuple = Tuple{"key"=eDataStoreReference.type().name.asString()+"_"+(idDataStoreReference++).asString(),"value"= eDataStoreReference};
		eObjectSequence.add(eDataStoreReferenceTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eitemSubjectRefTuple = Tuple{"key"='itemSubjectRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(eitemSubjectRefTuple);
	var edataStateTuple = Tuple{"key"='dataState', "value"='DataState'};
	eEReferenceSequence.add(edataStateTuple);
	var edataStoreRefTuple = Tuple{"key"='dataStoreRef', "value"='DataStore'};
	eEReferenceSequence.add(edataStoreRefTuple);
	var idDataObjectReference = 0;
	for (eDataObjectReference in DSL!EObject.all.select(s|s.isTypeOf(DSL!DataObjectReference))){
		var eDataObjectReferenceTuple = Tuple{"key"=eDataObjectReference.type().name.asString()+"_"+(idDataObjectReference++).asString(),"value"= eDataObjectReference};
		eObjectSequence.add(eDataObjectReferenceTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eitemSubjectRefTuple = Tuple{"key"='itemSubjectRef', "value"='ItemDefinition'};
	eEReferenceSequence.add(eitemSubjectRefTuple);
	var edataStateTuple = Tuple{"key"='dataState', "value"='DataState'};
	eEReferenceSequence.add(edataStateTuple);
	var edataObjectRefTuple = Tuple{"key"='dataObjectRef', "value"='DataObject'};
	eEReferenceSequence.add(edataObjectRefTuple);
	var idCallConversation = 0;
	for (eCallConversation in DSL!EObject.all.select(s|s.isTypeOf(DSL!CallConversation))){
		var eCallConversationTuple = Tuple{"key"=eCallConversation.type().name.asString()+"_"+(idCallConversation++).asString(),"value"= eCallConversation};
		eObjectSequence.add(eCallConversationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eparticipantRefsTuple = Tuple{"key"='participantRefs', "value"='Participant'};
	eEReferenceSequence.add(eparticipantRefsTuple);
	var emessageFlowRefsTuple = Tuple{"key"='messageFlowRefs', "value"='MessageFlow'};
	eEReferenceSequence.add(emessageFlowRefsTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var ecalledCollaborationRefTuple = Tuple{"key"='calledCollaborationRef', "value"='Collaboration'};
	eEReferenceSequence.add(ecalledCollaborationRefTuple);
	var eparticipantAssociationsTuple = Tuple{"key"='participantAssociations', "value"='ParticipantAssociation'};
	eEReferenceSequence.add(eparticipantAssociationsTuple);
	var idConversation = 0;
	for (eConversation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Conversation))){
		var eConversationTuple = Tuple{"key"=eConversation.type().name.asString()+"_"+(idConversation++).asString(),"value"= eConversation};
		eObjectSequence.add(eConversationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eparticipantRefsTuple = Tuple{"key"='participantRefs', "value"='Participant'};
	eEReferenceSequence.add(eparticipantRefsTuple);
	var emessageFlowRefsTuple = Tuple{"key"='messageFlowRefs', "value"='MessageFlow'};
	eEReferenceSequence.add(emessageFlowRefsTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var idSubConversation = 0;
	for (eSubConversation in DSL!EObject.all.select(s|s.isTypeOf(DSL!SubConversation))){
		var eSubConversationTuple = Tuple{"key"=eSubConversation.type().name.asString()+"_"+(idSubConversation++).asString(),"value"= eSubConversation};
		eObjectSequence.add(eSubConversationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eparticipantRefsTuple = Tuple{"key"='participantRefs', "value"='Participant'};
	eEReferenceSequence.add(eparticipantRefsTuple);
	var emessageFlowRefsTuple = Tuple{"key"='messageFlowRefs', "value"='MessageFlow'};
	eEReferenceSequence.add(emessageFlowRefsTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var econversationNodesTuple = Tuple{"key"='conversationNodes', "value"='ConversationNode'};
	eEReferenceSequence.add(econversationNodesTuple);
	var idGlobalConversation = 0;
	for (eGlobalConversation in DSL!EObject.all.select(s|s.isTypeOf(DSL!GlobalConversation))){
		var eGlobalConversationTuple = Tuple{"key"=eGlobalConversation.type().name.asString()+"_"+(idGlobalConversation++).asString(),"value"= eGlobalConversation};
		eObjectSequence.add(eGlobalConversationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var echoreographyRefTuple = Tuple{"key"='choreographyRef', "value"='Choreography'};
	eEReferenceSequence.add(echoreographyRefTuple);
	var eartifactsTuple = Tuple{"key"='artifacts', "value"='Artifact'};
	eEReferenceSequence.add(eartifactsTuple);
	var eparticipantAssociationsTuple = Tuple{"key"='participantAssociations', "value"='ParticipantAssociation'};
	eEReferenceSequence.add(eparticipantAssociationsTuple);
	var emessageFlowAssociationsTuple = Tuple{"key"='messageFlowAssociations', "value"='MessageFlowAssociation'};
	eEReferenceSequence.add(emessageFlowAssociationsTuple);
	var econversationAssociationsTuple = Tuple{"key"='conversationAssociations', "value"='ConversationAssociation'};
	eEReferenceSequence.add(econversationAssociationsTuple);
	var eparticipantsTuple = Tuple{"key"='participants', "value"='Participant'};
	eEReferenceSequence.add(eparticipantsTuple);
	var emessageFlowsTuple = Tuple{"key"='messageFlows', "value"='MessageFlow'};
	eEReferenceSequence.add(emessageFlowsTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var econversationsTuple = Tuple{"key"='conversations', "value"='ConversationNode'};
	eEReferenceSequence.add(econversationsTuple);
	var econversationLinksTuple = Tuple{"key"='conversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(econversationLinksTuple);
	var idPartnerEntity = 0;
	for (ePartnerEntity in DSL!EObject.all.select(s|s.isTypeOf(DSL!PartnerEntity))){
		var ePartnerEntityTuple = Tuple{"key"=ePartnerEntity.type().name.asString()+"_"+(idPartnerEntity++).asString(),"value"= ePartnerEntity};
		eObjectSequence.add(ePartnerEntityTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eparticipantRefTuple = Tuple{"key"='participantRef', "value"='Participant'};
	eEReferenceSequence.add(eparticipantRefTuple);
	var idPartnerRole = 0;
	for (ePartnerRole in DSL!EObject.all.select(s|s.isTypeOf(DSL!PartnerRole))){
		var ePartnerRoleTuple = Tuple{"key"=ePartnerRole.type().name.asString()+"_"+(idPartnerRole++).asString(),"value"= ePartnerRole};
		eObjectSequence.add(ePartnerRoleTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eparticipantRefTuple = Tuple{"key"='participantRef', "value"='Participant'};
	eEReferenceSequence.add(eparticipantRefTuple);
	var idChoreographyActivity = 0;
	for (eChoreographyActivity in DSL!EObject.all.select(s|s.isTypeOf(DSL!ChoreographyActivity))){
		var eChoreographyActivityTuple = Tuple{"key"=eChoreographyActivity.type().name.asString()+"_"+(idChoreographyActivity++).asString(),"value"= eChoreographyActivity};
		eObjectSequence.add(eChoreographyActivityTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eparticipantRefsTuple = Tuple{"key"='participantRefs', "value"='Participant'};
	eEReferenceSequence.add(eparticipantRefsTuple);
	var einitiatingParticipantRefTuple = Tuple{"key"='initiatingParticipantRef', "value"='Participant'};
	eEReferenceSequence.add(einitiatingParticipantRefTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var idCallChoreography = 0;
	for (eCallChoreography in DSL!EObject.all.select(s|s.isTypeOf(DSL!CallChoreography))){
		var eCallChoreographyTuple = Tuple{"key"=eCallChoreography.type().name.asString()+"_"+(idCallChoreography++).asString(),"value"= eCallChoreography};
		eObjectSequence.add(eCallChoreographyTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eparticipantRefsTuple = Tuple{"key"='participantRefs', "value"='Participant'};
	eEReferenceSequence.add(eparticipantRefsTuple);
	var einitiatingParticipantRefTuple = Tuple{"key"='initiatingParticipantRef', "value"='Participant'};
	eEReferenceSequence.add(einitiatingParticipantRefTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var ecalledChoreographyRefTuple = Tuple{"key"='calledChoreographyRef', "value"='Choreography'};
	eEReferenceSequence.add(ecalledChoreographyRefTuple);
	var eparticipantAssociationsTuple = Tuple{"key"='participantAssociations', "value"='ParticipantAssociation'};
	eEReferenceSequence.add(eparticipantAssociationsTuple);
	var idSubChoreography = 0;
	for (eSubChoreography in DSL!EObject.all.select(s|s.isTypeOf(DSL!SubChoreography))){
		var eSubChoreographyTuple = Tuple{"key"=eSubChoreography.type().name.asString()+"_"+(idSubChoreography++).asString(),"value"= eSubChoreography};
		eObjectSequence.add(eSubChoreographyTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eparticipantRefsTuple = Tuple{"key"='participantRefs', "value"='Participant'};
	eEReferenceSequence.add(eparticipantRefsTuple);
	var einitiatingParticipantRefTuple = Tuple{"key"='initiatingParticipantRef', "value"='Participant'};
	eEReferenceSequence.add(einitiatingParticipantRefTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var eflowElementsTuple = Tuple{"key"='flowElements', "value"='FlowElement'};
	eEReferenceSequence.add(eflowElementsTuple);
	var elaneSetsTuple = Tuple{"key"='laneSets', "value"='LaneSet'};
	eEReferenceSequence.add(elaneSetsTuple);
	var eartifactsTuple = Tuple{"key"='artifacts', "value"='Artifact'};
	eEReferenceSequence.add(eartifactsTuple);
	var idChoreographyTask = 0;
	for (eChoreographyTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!ChoreographyTask))){
		var eChoreographyTaskTuple = Tuple{"key"=eChoreographyTask.type().name.asString()+"_"+(idChoreographyTask++).asString(),"value"= eChoreographyTask};
		eObjectSequence.add(eChoreographyTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eparticipantRefsTuple = Tuple{"key"='participantRefs', "value"='Participant'};
	eEReferenceSequence.add(eparticipantRefsTuple);
	var einitiatingParticipantRefTuple = Tuple{"key"='initiatingParticipantRef', "value"='Participant'};
	eEReferenceSequence.add(einitiatingParticipantRefTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var emessageFlowRefTuple = Tuple{"key"='messageFlowRef', "value"='MessageFlow'};
	eEReferenceSequence.add(emessageFlowRefTuple);
	var idGlobalChoreographyTask = 0;
	for (eGlobalChoreographyTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!GlobalChoreographyTask))){
		var eGlobalChoreographyTaskTuple = Tuple{"key"=eGlobalChoreographyTask.type().name.asString()+"_"+(idGlobalChoreographyTask++).asString(),"value"= eGlobalChoreographyTask};
		eObjectSequence.add(eGlobalChoreographyTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var echoreographyRefTuple = Tuple{"key"='choreographyRef', "value"='Choreography'};
	eEReferenceSequence.add(echoreographyRefTuple);
	var eartifactsTuple = Tuple{"key"='artifacts', "value"='Artifact'};
	eEReferenceSequence.add(eartifactsTuple);
	var eparticipantAssociationsTuple = Tuple{"key"='participantAssociations', "value"='ParticipantAssociation'};
	eEReferenceSequence.add(eparticipantAssociationsTuple);
	var emessageFlowAssociationsTuple = Tuple{"key"='messageFlowAssociations', "value"='MessageFlowAssociation'};
	eEReferenceSequence.add(emessageFlowAssociationsTuple);
	var econversationAssociationsTuple = Tuple{"key"='conversationAssociations', "value"='ConversationAssociation'};
	eEReferenceSequence.add(econversationAssociationsTuple);
	var eparticipantsTuple = Tuple{"key"='participants', "value"='Participant'};
	eEReferenceSequence.add(eparticipantsTuple);
	var emessageFlowsTuple = Tuple{"key"='messageFlows', "value"='MessageFlow'};
	eEReferenceSequence.add(emessageFlowsTuple);
	var ecorrelationKeysTuple = Tuple{"key"='correlationKeys', "value"='CorrelationKey'};
	eEReferenceSequence.add(ecorrelationKeysTuple);
	var econversationsTuple = Tuple{"key"='conversations', "value"='ConversationNode'};
	eEReferenceSequence.add(econversationsTuple);
	var econversationLinksTuple = Tuple{"key"='conversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(econversationLinksTuple);
	var eflowElementsTuple = Tuple{"key"='flowElements', "value"='FlowElement'};
	eEReferenceSequence.add(eflowElementsTuple);
	var elaneSetsTuple = Tuple{"key"='laneSets', "value"='LaneSet'};
	eEReferenceSequence.add(elaneSetsTuple);
	var einitiatingParticipantRefTuple = Tuple{"key"='initiatingParticipantRef', "value"='Participant'};
	eEReferenceSequence.add(einitiatingParticipantRefTuple);
	var idTextAnnotation = 0;
	for (eTextAnnotation in DSL!EObject.all.select(s|s.isTypeOf(DSL!TextAnnotation))){
		var eTextAnnotationTuple = Tuple{"key"=eTextAnnotation.type().name.asString()+"_"+(idTextAnnotation++).asString(),"value"= eTextAnnotation};
		eObjectSequence.add(eTextAnnotationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var idGroup = 0;
	for (eGroup in DSL!EObject.all.select(s|s.isTypeOf(DSL!Group))){
		var eGroupTuple = Tuple{"key"=eGroup.type().name.asString()+"_"+(idGroup++).asString(),"value"= eGroup};
		eObjectSequence.add(eGroupTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var idAssociation = 0;
	for (eAssociation in DSL!EObject.all.select(s|s.isTypeOf(DSL!Association))){
		var eAssociationTuple = Tuple{"key"=eAssociation.type().name.asString()+"_"+(idAssociation++).asString(),"value"= eAssociation};
		eObjectSequence.add(eAssociationTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var esourceRefTuple = Tuple{"key"='sourceRef', "value"='BaseElement'};
	eEReferenceSequence.add(esourceRefTuple);
	var etargetRefTuple = Tuple{"key"='targetRef', "value"='BaseElement'};
	eEReferenceSequence.add(etargetRefTuple);
	var idCategory = 0;
	for (eCategory in DSL!EObject.all.select(s|s.isTypeOf(DSL!Category))){
		var eCategoryTuple = Tuple{"key"=eCategory.type().name.asString()+"_"+(idCategory++).asString(),"value"= eCategory};
		eObjectSequence.add(eCategoryTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var ecategoryValueTuple = Tuple{"key"='categoryValue', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueTuple);
	var idServiceTask = 0;
	for (eServiceTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!ServiceTask))){
		var eServiceTaskTuple = Tuple{"key"=eServiceTask.type().name.asString()+"_"+(idServiceTask++).asString(),"value"= eServiceTask};
		eObjectSequence.add(eServiceTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var eoperationRefTuple = Tuple{"key"='operationRef', "value"='Operation'};
	eEReferenceSequence.add(eoperationRefTuple);
	var idSubProcess = 0;
	for (eSubProcess in DSL!EObject.all.select(s|s.isTypeOf(DSL!SubProcess))){
		var eSubProcessTuple = Tuple{"key"=eSubProcess.type().name.asString()+"_"+(idSubProcess++).asString(),"value"= eSubProcess};
		eObjectSequence.add(eSubProcessTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var eflowElementsTuple = Tuple{"key"='flowElements', "value"='FlowElement'};
	eEReferenceSequence.add(eflowElementsTuple);
	var elaneSetsTuple = Tuple{"key"='laneSets', "value"='LaneSet'};
	eEReferenceSequence.add(elaneSetsTuple);
	var eartifactsTuple = Tuple{"key"='artifacts', "value"='Artifact'};
	eEReferenceSequence.add(eartifactsTuple);
	var idMultiInstanceLoopCharacteristics = 0;
	for (eMultiInstanceLoopCharacteristics in DSL!EObject.all.select(s|s.isTypeOf(DSL!MultiInstanceLoopCharacteristics))){
		var eMultiInstanceLoopCharacteristicsTuple = Tuple{"key"=eMultiInstanceLoopCharacteristics.type().name.asString()+"_"+(idMultiInstanceLoopCharacteristics++).asString(),"value"= eMultiInstanceLoopCharacteristics};
		eObjectSequence.add(eMultiInstanceLoopCharacteristicsTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eloopCardinalityTuple = Tuple{"key"='loopCardinality', "value"='Expression'};
	eEReferenceSequence.add(eloopCardinalityTuple);
	var eloopDataInputRefTuple = Tuple{"key"='loopDataInputRef', "value"='ItemAwareElement'};
	eEReferenceSequence.add(eloopDataInputRefTuple);
	var eloopDataOutputRefTuple = Tuple{"key"='loopDataOutputRef', "value"='ItemAwareElement'};
	eEReferenceSequence.add(eloopDataOutputRefTuple);
	var einputDataItemTuple = Tuple{"key"='inputDataItem', "value"='DataInput'};
	eEReferenceSequence.add(einputDataItemTuple);
	var eoutputDataItemTuple = Tuple{"key"='outputDataItem', "value"='DataOutput'};
	eEReferenceSequence.add(eoutputDataItemTuple);
	var ecompletionConditionTuple = Tuple{"key"='completionCondition', "value"='Expression'};
	eEReferenceSequence.add(ecompletionConditionTuple);
	var ecomplexBehaviorDefinitionTuple = Tuple{"key"='complexBehaviorDefinition', "value"='ComplexBehaviorDefinition'};
	eEReferenceSequence.add(ecomplexBehaviorDefinitionTuple);
	var eoneBehaviorEventRefTuple = Tuple{"key"='oneBehaviorEventRef', "value"='EventDefinition'};
	eEReferenceSequence.add(eoneBehaviorEventRefTuple);
	var enoneBehaviorEventRefTuple = Tuple{"key"='noneBehaviorEventRef', "value"='EventDefinition'};
	eEReferenceSequence.add(enoneBehaviorEventRefTuple);
	var idComplexBehaviorDefinition = 0;
	for (eComplexBehaviorDefinition in DSL!EObject.all.select(s|s.isTypeOf(DSL!ComplexBehaviorDefinition))){
		var eComplexBehaviorDefinitionTuple = Tuple{"key"=eComplexBehaviorDefinition.type().name.asString()+"_"+(idComplexBehaviorDefinition++).asString(),"value"= eComplexBehaviorDefinition};
		eObjectSequence.add(eComplexBehaviorDefinitionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var econditionTuple = Tuple{"key"='condition', "value"='FormalExpression'};
	eEReferenceSequence.add(econditionTuple);
	var eeventTuple = Tuple{"key"='event', "value"='ImplicitThrowEvent'};
	eEReferenceSequence.add(eeventTuple);
	var idStandardLoopCharacteristics = 0;
	for (eStandardLoopCharacteristics in DSL!EObject.all.select(s|s.isTypeOf(DSL!StandardLoopCharacteristics))){
		var eStandardLoopCharacteristicsTuple = Tuple{"key"=eStandardLoopCharacteristics.type().name.asString()+"_"+(idStandardLoopCharacteristics++).asString(),"value"= eStandardLoopCharacteristics};
		eObjectSequence.add(eStandardLoopCharacteristicsTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eloopConditionTuple = Tuple{"key"='loopCondition', "value"='Expression'};
	eEReferenceSequence.add(eloopConditionTuple);
	var eloopMaximumTuple = Tuple{"key"='loopMaximum', "value"='Expression'};
	eEReferenceSequence.add(eloopMaximumTuple);
	var idCallActivity = 0;
	for (eCallActivity in DSL!EObject.all.select(s|s.isTypeOf(DSL!CallActivity))){
		var eCallActivityTuple = Tuple{"key"=eCallActivity.type().name.asString()+"_"+(idCallActivity++).asString(),"value"= eCallActivity};
		eObjectSequence.add(eCallActivityTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var ecalledElementRefTuple = Tuple{"key"='calledElementRef', "value"='CallableElement'};
	eEReferenceSequence.add(ecalledElementRefTuple);
	var idSendTask = 0;
	for (eSendTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!SendTask))){
		var eSendTaskTuple = Tuple{"key"=eSendTask.type().name.asString()+"_"+(idSendTask++).asString(),"value"= eSendTask};
		eObjectSequence.add(eSendTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var eoperationRefTuple = Tuple{"key"='operationRef', "value"='Operation'};
	eEReferenceSequence.add(eoperationRefTuple);
	var emessageRefTuple = Tuple{"key"='messageRef', "value"='Message'};
	eEReferenceSequence.add(emessageRefTuple);
	var idReceiveTask = 0;
	for (eReceiveTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!ReceiveTask))){
		var eReceiveTaskTuple = Tuple{"key"=eReceiveTask.type().name.asString()+"_"+(idReceiveTask++).asString(),"value"= eReceiveTask};
		eObjectSequence.add(eReceiveTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var eoperationRefTuple = Tuple{"key"='operationRef', "value"='Operation'};
	eEReferenceSequence.add(eoperationRefTuple);
	var emessageRefTuple = Tuple{"key"='messageRef', "value"='Message'};
	eEReferenceSequence.add(emessageRefTuple);
	var idScriptTask = 0;
	for (eScriptTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!ScriptTask))){
		var eScriptTaskTuple = Tuple{"key"=eScriptTask.type().name.asString()+"_"+(idScriptTask++).asString(),"value"= eScriptTask};
		eObjectSequence.add(eScriptTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var idBusinessRuleTask = 0;
	for (eBusinessRuleTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!BusinessRuleTask))){
		var eBusinessRuleTaskTuple = Tuple{"key"=eBusinessRuleTask.type().name.asString()+"_"+(idBusinessRuleTask++).asString(),"value"= eBusinessRuleTask};
		eObjectSequence.add(eBusinessRuleTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var idAdHocSubProcess = 0;
	for (eAdHocSubProcess in DSL!EObject.all.select(s|s.isTypeOf(DSL!AdHocSubProcess))){
		var eAdHocSubProcessTuple = Tuple{"key"=eAdHocSubProcess.type().name.asString()+"_"+(idAdHocSubProcess++).asString(),"value"= eAdHocSubProcess};
		eObjectSequence.add(eAdHocSubProcessTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var eflowElementsTuple = Tuple{"key"='flowElements', "value"='FlowElement'};
	eEReferenceSequence.add(eflowElementsTuple);
	var elaneSetsTuple = Tuple{"key"='laneSets', "value"='LaneSet'};
	eEReferenceSequence.add(elaneSetsTuple);
	var eartifactsTuple = Tuple{"key"='artifacts', "value"='Artifact'};
	eEReferenceSequence.add(eartifactsTuple);
	var ecompletionConditionTuple = Tuple{"key"='completionCondition', "value"='Expression'};
	eEReferenceSequence.add(ecompletionConditionTuple);
	var idTransaction = 0;
	for (eTransaction in DSL!EObject.all.select(s|s.isTypeOf(DSL!Transaction))){
		var eTransactionTuple = Tuple{"key"=eTransaction.type().name.asString()+"_"+(idTransaction++).asString(),"value"= eTransaction};
		eObjectSequence.add(eTransactionTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eauditingTuple = Tuple{"key"='auditing', "value"='Auditing'};
	eEReferenceSequence.add(eauditingTuple);
	var emonitoringTuple = Tuple{"key"='monitoring', "value"='Monitoring'};
	eEReferenceSequence.add(emonitoringTuple);
	var ecategoryValueRefTuple = Tuple{"key"='categoryValueRef', "value"='CategoryValue'};
	eEReferenceSequence.add(ecategoryValueRefTuple);
	var eoutgoingTuple = Tuple{"key"='outgoing', "value"='SequenceFlow'};
	eEReferenceSequence.add(eoutgoingTuple);
	var eincomingTuple = Tuple{"key"='incoming', "value"='SequenceFlow'};
	eEReferenceSequence.add(eincomingTuple);
	var elanesTuple = Tuple{"key"='lanes', "value"='Lane'};
	eEReferenceSequence.add(elanesTuple);
	var eincomingConversationLinksTuple = Tuple{"key"='incomingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eincomingConversationLinksTuple);
	var eoutgoingConversationLinksTuple = Tuple{"key"='outgoingConversationLinks', "value"='ConversationLink'};
	eEReferenceSequence.add(eoutgoingConversationLinksTuple);
	var eloopCharacteristicsTuple = Tuple{"key"='loopCharacteristics', "value"='LoopCharacteristics'};
	eEReferenceSequence.add(eloopCharacteristicsTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var edefaultTuple = Tuple{"key"='default', "value"='SequenceFlow'};
	eEReferenceSequence.add(edefaultTuple);
	var epropertiesTuple = Tuple{"key"='properties', "value"='Property'};
	eEReferenceSequence.add(epropertiesTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var eboundaryEventRefsTuple = Tuple{"key"='boundaryEventRefs', "value"='BoundaryEvent'};
	eEReferenceSequence.add(eboundaryEventRefsTuple);
	var edataInputAssociationsTuple = Tuple{"key"='dataInputAssociations', "value"='DataInputAssociation'};
	eEReferenceSequence.add(edataInputAssociationsTuple);
	var edataOutputAssociationsTuple = Tuple{"key"='dataOutputAssociations', "value"='DataOutputAssociation'};
	eEReferenceSequence.add(edataOutputAssociationsTuple);
	var eflowElementsTuple = Tuple{"key"='flowElements', "value"='FlowElement'};
	eEReferenceSequence.add(eflowElementsTuple);
	var elaneSetsTuple = Tuple{"key"='laneSets', "value"='LaneSet'};
	eEReferenceSequence.add(elaneSetsTuple);
	var eartifactsTuple = Tuple{"key"='artifacts', "value"='Artifact'};
	eEReferenceSequence.add(eartifactsTuple);
	var idGlobalScriptTask = 0;
	for (eGlobalScriptTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!GlobalScriptTask))){
		var eGlobalScriptTaskTuple = Tuple{"key"=eGlobalScriptTask.type().name.asString()+"_"+(idGlobalScriptTask++).asString(),"value"= eGlobalScriptTask};
		eObjectSequence.add(eGlobalScriptTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var esupportedInterfaceRefsTuple = Tuple{"key"='supportedInterfaceRefs', "value"='Interface'};
	eEReferenceSequence.add(esupportedInterfaceRefsTuple);
	var eioBindingTuple = Tuple{"key"='ioBinding', "value"='InputOutputBinding'};
	eEReferenceSequence.add(eioBindingTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var idGlobalBusinessRuleTask = 0;
	for (eGlobalBusinessRuleTask in DSL!EObject.all.select(s|s.isTypeOf(DSL!GlobalBusinessRuleTask))){
		var eGlobalBusinessRuleTaskTuple = Tuple{"key"=eGlobalBusinessRuleTask.type().name.asString()+"_"+(idGlobalBusinessRuleTask++).asString(),"value"= eGlobalBusinessRuleTask};
		eObjectSequence.add(eGlobalBusinessRuleTaskTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eioSpecificationTuple = Tuple{"key"='ioSpecification', "value"='InputOutputSpecification'};
	eEReferenceSequence.add(eioSpecificationTuple);
	var esupportedInterfaceRefsTuple = Tuple{"key"='supportedInterfaceRefs', "value"='Interface'};
	eEReferenceSequence.add(esupportedInterfaceRefsTuple);
	var eioBindingTuple = Tuple{"key"='ioBinding', "value"='InputOutputBinding'};
	eEReferenceSequence.add(eioBindingTuple);
	var eresourcesTuple = Tuple{"key"='resources', "value"='ResourceRole'};
	eEReferenceSequence.add(eresourcesTuple);
	var idDefinitions = 0;
	for (eDefinitions in DSL!EObject.all.select(s|s.isTypeOf(DSL!Definitions))){
		var eDefinitionsTuple = Tuple{"key"=eDefinitions.type().name.asString()+"_"+(idDefinitions++).asString(),"value"= eDefinitions};
		eObjectSequence.add(eDefinitionsTuple);
	}
	var eextensionDefinitionsTuple = Tuple{"key"='extensionDefinitions', "value"='ExtensionDefinition'};
	eEReferenceSequence.add(eextensionDefinitionsTuple);
	var eextensionValuesTuple = Tuple{"key"='extensionValues', "value"='ExtensionAttributeValue'};
	eEReferenceSequence.add(eextensionValuesTuple);
	var edocumentationTuple = Tuple{"key"='documentation', "value"='Documentation'};
	eEReferenceSequence.add(edocumentationTuple);
	var eimportsTuple = Tuple{"key"='imports', "value"='Import'};
	eEReferenceSequence.add(eimportsTuple);
	var eextensionsTuple = Tuple{"key"='extensions', "value"='Extension'};
	eEReferenceSequence.add(eextensionsTuple);
	var erelationshipsTuple = Tuple{"key"='relationships', "value"='Relationship'};
	eEReferenceSequence.add(erelationshipsTuple);
	var erootElementsTuple = Tuple{"key"='rootElements', "value"='RootElement'};
	eEReferenceSequence.add(erootElementsTuple);
	var ediagramsTuple = Tuple{"key"='diagrams', "value"='BPMNDiagram'};
	eEReferenceSequence.add(ediagramsTuple);
}

operation main_bpmn2(){
	var rootEcore = DSL!EObject.all.first();
	var rootSysMini = new SysMini!Namespace;
	var rootPackage = new SysMini!Package;
	rootPackage.declaredName = "bpmn2";
	rootSysMini.body.add(rootPackage);
	rootEcore.addNodeTo(rootPackage);
}

@abstract
rule Base
	transform s : DSL!EObject
	to t : SysMini!PartUsage{
	t.declaredName = s.getDeclaredName();
	t.featureNote.add(":");
	t.featureSpecialization.add(s.getfeatureSpecialization());
	if (s.eContainingFeature != null and s.eContainingFeature.name != null){
		t.featureNote.add(":>");
		t.featureSpecialization.add(s.eContainingFeature().name);
	}
}
	
@lazy
rule Interface
	transform s : DSL!Interface
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.operations.getEReference() != null){
		var operations = new SysMini!PartUsage;
		operations.isReference = true;
		operations.featureNote.add(":>");
		operations.featureSpecialization.add("operations");
		operations.valuePart = s.operations.getEReference();
		t.body.add(operations);
	}
	if (s.implementationRef.getEReference() != null){
		var implementationRef = new SysMini!PartUsage;
		implementationRef.isReference = true;
		implementationRef.featureNote.add(":>");
		implementationRef.featureSpecialization.add("implementationRef");
		implementationRef.valuePart = s.implementationRef.getEReference();
		t.body.add(implementationRef);
	}
}

@lazy
rule RootElement
	transform s : DSL!RootElement
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule BaseElement
	transform s : DSL!BaseElement
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule ExtensionDefinition
	transform s : DSL!ExtensionDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.extensionAttributeDefinitions.getEReference() != null){
		var extensionAttributeDefinitions = new SysMini!PartUsage;
		extensionAttributeDefinitions.isReference = true;
		extensionAttributeDefinitions.featureNote.add(":>");
		extensionAttributeDefinitions.featureSpecialization.add("extensionAttributeDefinitions");
		extensionAttributeDefinitions.valuePart = s.extensionAttributeDefinitions.getEReference();
		t.body.add(extensionAttributeDefinitions);
	}
}

@lazy
rule ExtensionAttributeDefinition
	transform s : DSL!ExtensionAttributeDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.type.getEAttribute() != null){
		var type = new SysMini!AttributeUsage;
		type.featureNote.add(":>>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEAttribute();
		t.body.add(type);
	}
	if (s.isReference.getEAttribute() != null){
		var isReference = new SysMini!AttributeUsage;
		isReference.featureNote.add(":>>");
		isReference.featureSpecialization.add("isReference");
		isReference.valuePart = s.isReference.getEAttribute();
		t.body.add(isReference);
	}
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.extensionDefinition.getEReference() != null){
		var extensionDefinition = new SysMini!PartUsage;
		extensionDefinition.isReference = true;
		extensionDefinition.featureNote.add(":>");
		extensionDefinition.featureSpecialization.add("extensionDefinition");
		extensionDefinition.valuePart = s.extensionDefinition.getEReference();
		t.body.add(extensionDefinition);
	}
}

@lazy
rule ExtensionAttributeValue
	transform s : DSL!ExtensionAttributeValue
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.valueRef.getEReference() != null){
		var valueRef = new SysMini!PartUsage;
		valueRef.isReference = true;
		valueRef.featureNote.add(":>");
		valueRef.featureSpecialization.add("valueRef");
		valueRef.valuePart = s.valueRef.getEReference();
		t.body.add(valueRef);
	}
	if (s.value.getEReference() != null){
		var value = new SysMini!PartUsage;
		value.isReference = true;
		value.featureNote.add(":>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEReference();
		t.body.add(value);
	}
	if (s.extensionAttributeDefinition.getEReference() != null){
		var extensionAttributeDefinition = new SysMini!PartUsage;
		extensionAttributeDefinition.isReference = true;
		extensionAttributeDefinition.featureNote.add(":>");
		extensionAttributeDefinition.featureSpecialization.add("extensionAttributeDefinition");
		extensionAttributeDefinition.valuePart = s.extensionAttributeDefinition.getEReference();
		t.body.add(extensionAttributeDefinition);
	}
}

@lazy
rule Documentation
	transform s : DSL!Documentation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.text.getEAttribute() != null){
		var text = new SysMini!AttributeUsage;
		text.featureNote.add(":>>");
		text.featureSpecialization.add("text");
		text.valuePart = s.text.getEAttribute();
		t.body.add(text);
	}
	if (s.textFormat.getEAttribute() != null){
		var textFormat = new SysMini!AttributeUsage;
		textFormat.featureNote.add(":>>");
		textFormat.featureSpecialization.add("textFormat");
		textFormat.valuePart = s.textFormat.getEAttribute();
		t.body.add(textFormat);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule Operation
	transform s : DSL!Operation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.inMessageRef.getEReference() != null){
		var inMessageRef = new SysMini!PartUsage;
		inMessageRef.isReference = true;
		inMessageRef.featureNote.add(":>");
		inMessageRef.featureSpecialization.add("inMessageRef");
		inMessageRef.valuePart = s.inMessageRef.getEReference();
		t.body.add(inMessageRef);
	}
	if (s.outMessageRef.getEReference() != null){
		var outMessageRef = new SysMini!PartUsage;
		outMessageRef.isReference = true;
		outMessageRef.featureNote.add(":>");
		outMessageRef.featureSpecialization.add("outMessageRef");
		outMessageRef.valuePart = s.outMessageRef.getEReference();
		t.body.add(outMessageRef);
	}
	if (s.errorRefs.getEReference() != null){
		var errorRefs = new SysMini!PartUsage;
		errorRefs.isReference = true;
		errorRefs.featureNote.add(":>");
		errorRefs.featureSpecialization.add("errorRefs");
		errorRefs.valuePart = s.errorRefs.getEReference();
		t.body.add(errorRefs);
	}
	if (s.implementationRef.getEReference() != null){
		var implementationRef = new SysMini!PartUsage;
		implementationRef.isReference = true;
		implementationRef.featureNote.add(":>");
		implementationRef.featureSpecialization.add("implementationRef");
		implementationRef.valuePart = s.implementationRef.getEReference();
		t.body.add(implementationRef);
	}
}

@lazy
rule Message
	transform s : DSL!Message
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.itemRef.getEReference() != null){
		var itemRef = new SysMini!PartUsage;
		itemRef.isReference = true;
		itemRef.featureNote.add(":>");
		itemRef.featureSpecialization.add("itemRef");
		itemRef.valuePart = s.itemRef.getEReference();
		t.body.add(itemRef);
	}
}

@lazy
rule ItemDefinition
	transform s : DSL!ItemDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.itemKind.getEAttribute() != null){
		var itemKind = new SysMini!AttributeUsage;
		itemKind.featureNote.add(":>>");
		itemKind.featureSpecialization.add("itemKind");
		itemKind.valuePart = s.itemKind.getEAttribute();
		t.body.add(itemKind);
	}
	if (s.isCollection.getEAttribute() != null){
		var isCollection = new SysMini!AttributeUsage;
		isCollection.featureNote.add(":>>");
		isCollection.featureSpecialization.add("isCollection");
		isCollection.valuePart = s.isCollection.getEAttribute();
		t.body.add(isCollection);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.structureRef.getEReference() != null){
		var structureRef = new SysMini!PartUsage;
		structureRef.isReference = true;
		structureRef.featureNote.add(":>");
		structureRef.featureSpecialization.add("structureRef");
		structureRef.valuePart = s.structureRef.getEReference();
		t.body.add(structureRef);
	}
	if (s.~import.getEReference() != null){
		var import_ = new SysMini!PartUsage;
		import_.isReference = true;
		import_.featureNote.add(":>");
		import_.featureSpecialization.add("'import'");
		import_.valuePart = s.import_.getEReference();
		t.body.add(import_);
	}
}

@lazy
rule Import
	transform s : DSL!Import
	to t : SysMini!PartUsage
	extends Base{
	if (s.importType.getEAttribute() != null){
		var importType = new SysMini!AttributeUsage;
		importType.featureNote.add(":>>");
		importType.featureSpecialization.add("importType");
		importType.valuePart = s.importType.getEAttribute();
		t.body.add(importType);
	}
	if (s.location.getEAttribute() != null){
		var location = new SysMini!AttributeUsage;
		location.featureNote.add(":>>");
		location.featureSpecialization.add("location");
		location.valuePart = s.location.getEAttribute();
		t.body.add(location);
	}
	if (s.namespace.getEAttribute() != null){
		var namespace = new SysMini!AttributeUsage;
		namespace.featureNote.add(":>>");
		namespace.featureSpecialization.add("namespace");
		namespace.valuePart = s.namespace.getEAttribute();
		t.body.add(namespace);
	}
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
}

@lazy
rule Error
	transform s : DSL!Error
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.errorCode.getEAttribute() != null){
		var errorCode = new SysMini!AttributeUsage;
		errorCode.featureNote.add(":>>");
		errorCode.featureSpecialization.add("errorCode");
		errorCode.valuePart = s.errorCode.getEAttribute();
		t.body.add(errorCode);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.structureRef.getEReference() != null){
		var structureRef = new SysMini!PartUsage;
		structureRef.isReference = true;
		structureRef.featureNote.add(":>");
		structureRef.featureSpecialization.add("structureRef");
		structureRef.valuePart = s.structureRef.getEReference();
		t.body.add(structureRef);
	}
}

@lazy
rule EndPoint
	transform s : DSL!EndPoint
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule Auditing
	transform s : DSL!Auditing
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule GlobalTask
	transform s : DSL!GlobalTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.supportedInterfaceRefs.getEReference() != null){
		var supportedInterfaceRefs = new SysMini!PartUsage;
		supportedInterfaceRefs.isReference = true;
		supportedInterfaceRefs.featureNote.add(":>");
		supportedInterfaceRefs.featureSpecialization.add("supportedInterfaceRefs");
		supportedInterfaceRefs.valuePart = s.supportedInterfaceRefs.getEReference();
		t.body.add(supportedInterfaceRefs);
	}
	if (s.ioBinding.getEReference() != null){
		var ioBinding = new SysMini!PartUsage;
		ioBinding.isReference = true;
		ioBinding.featureNote.add(":>");
		ioBinding.featureSpecialization.add("ioBinding");
		ioBinding.valuePart = s.ioBinding.getEReference();
		t.body.add(ioBinding);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
}

@lazy
rule CallableElement
	transform s : DSL!CallableElement
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.supportedInterfaceRefs.getEReference() != null){
		var supportedInterfaceRefs = new SysMini!PartUsage;
		supportedInterfaceRefs.isReference = true;
		supportedInterfaceRefs.featureNote.add(":>");
		supportedInterfaceRefs.featureSpecialization.add("supportedInterfaceRefs");
		supportedInterfaceRefs.valuePart = s.supportedInterfaceRefs.getEReference();
		t.body.add(supportedInterfaceRefs);
	}
	if (s.ioBinding.getEReference() != null){
		var ioBinding = new SysMini!PartUsage;
		ioBinding.isReference = true;
		ioBinding.featureNote.add(":>");
		ioBinding.featureSpecialization.add("ioBinding");
		ioBinding.valuePart = s.ioBinding.getEReference();
		t.body.add(ioBinding);
	}
}

@lazy
rule InputOutputSpecification
	transform s : DSL!InputOutputSpecification
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.inputSets.getEReference() != null){
		var inputSets = new SysMini!PartUsage;
		inputSets.isReference = true;
		inputSets.featureNote.add(":>");
		inputSets.featureSpecialization.add("inputSets");
		inputSets.valuePart = s.inputSets.getEReference();
		t.body.add(inputSets);
	}
	if (s.outputSets.getEReference() != null){
		var outputSets = new SysMini!PartUsage;
		outputSets.isReference = true;
		outputSets.featureNote.add(":>");
		outputSets.featureSpecialization.add("outputSets");
		outputSets.valuePart = s.outputSets.getEReference();
		t.body.add(outputSets);
	}
	if (s.dataInputs.getEReference() != null){
		var dataInputs = new SysMini!PartUsage;
		dataInputs.isReference = true;
		dataInputs.featureNote.add(":>");
		dataInputs.featureSpecialization.add("dataInputs");
		dataInputs.valuePart = s.dataInputs.getEReference();
		t.body.add(dataInputs);
	}
	if (s.dataOutputs.getEReference() != null){
		var dataOutputs = new SysMini!PartUsage;
		dataOutputs.isReference = true;
		dataOutputs.featureNote.add(":>");
		dataOutputs.featureSpecialization.add("dataOutputs");
		dataOutputs.valuePart = s.dataOutputs.getEReference();
		t.body.add(dataOutputs);
	}
}

@lazy
rule InputSet
	transform s : DSL!InputSet
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.dataInputRefs.getEReference() != null){
		var dataInputRefs = new SysMini!PartUsage;
		dataInputRefs.isReference = true;
		dataInputRefs.featureNote.add(":>");
		dataInputRefs.featureSpecialization.add("dataInputRefs");
		dataInputRefs.valuePart = s.dataInputRefs.getEReference();
		t.body.add(dataInputRefs);
	}
	if (s.optionalInputRefs.getEReference() != null){
		var optionalInputRefs = new SysMini!PartUsage;
		optionalInputRefs.isReference = true;
		optionalInputRefs.featureNote.add(":>");
		optionalInputRefs.featureSpecialization.add("optionalInputRefs");
		optionalInputRefs.valuePart = s.optionalInputRefs.getEReference();
		t.body.add(optionalInputRefs);
	}
	if (s.whileExecutingInputRefs.getEReference() != null){
		var whileExecutingInputRefs = new SysMini!PartUsage;
		whileExecutingInputRefs.isReference = true;
		whileExecutingInputRefs.featureNote.add(":>");
		whileExecutingInputRefs.featureSpecialization.add("whileExecutingInputRefs");
		whileExecutingInputRefs.valuePart = s.whileExecutingInputRefs.getEReference();
		t.body.add(whileExecutingInputRefs);
	}
	if (s.outputSetRefs.getEReference() != null){
		var outputSetRefs = new SysMini!PartUsage;
		outputSetRefs.isReference = true;
		outputSetRefs.featureNote.add(":>");
		outputSetRefs.featureSpecialization.add("outputSetRefs");
		outputSetRefs.valuePart = s.outputSetRefs.getEReference();
		t.body.add(outputSetRefs);
	}
}

@lazy
rule DataInput
	transform s : DSL!DataInput
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isCollection.getEAttribute() != null){
		var isCollection = new SysMini!AttributeUsage;
		isCollection.featureNote.add(":>>");
		isCollection.featureSpecialization.add("isCollection");
		isCollection.valuePart = s.isCollection.getEAttribute();
		t.body.add(isCollection);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.itemSubjectRef.getEReference() != null){
		var itemSubjectRef = new SysMini!PartUsage;
		itemSubjectRef.isReference = true;
		itemSubjectRef.featureNote.add(":>");
		itemSubjectRef.featureSpecialization.add("itemSubjectRef");
		itemSubjectRef.valuePart = s.itemSubjectRef.getEReference();
		t.body.add(itemSubjectRef);
	}
	if (s.dataState.getEReference() != null){
		var dataState = new SysMini!PartUsage;
		dataState.isReference = true;
		dataState.featureNote.add(":>");
		dataState.featureSpecialization.add("dataState");
		dataState.valuePart = s.dataState.getEReference();
		t.body.add(dataState);
	}
	if (s.inputSetWithOptional.getEReference() != null){
		var inputSetWithOptional = new SysMini!PartUsage;
		inputSetWithOptional.isReference = true;
		inputSetWithOptional.featureNote.add(":>");
		inputSetWithOptional.featureSpecialization.add("inputSetWithOptional");
		inputSetWithOptional.valuePart = s.inputSetWithOptional.getEReference();
		t.body.add(inputSetWithOptional);
	}
	if (s.inputSetWithWhileExecuting.getEReference() != null){
		var inputSetWithWhileExecuting = new SysMini!PartUsage;
		inputSetWithWhileExecuting.isReference = true;
		inputSetWithWhileExecuting.featureNote.add(":>");
		inputSetWithWhileExecuting.featureSpecialization.add("inputSetWithWhileExecuting");
		inputSetWithWhileExecuting.valuePart = s.inputSetWithWhileExecuting.getEReference();
		t.body.add(inputSetWithWhileExecuting);
	}
	if (s.inputSetRefs.getEReference() != null){
		var inputSetRefs = new SysMini!PartUsage;
		inputSetRefs.isReference = true;
		inputSetRefs.featureNote.add(":>");
		inputSetRefs.featureSpecialization.add("inputSetRefs");
		inputSetRefs.valuePart = s.inputSetRefs.getEReference();
		t.body.add(inputSetRefs);
	}
}

@lazy
rule ItemAwareElement
	transform s : DSL!ItemAwareElement
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.itemSubjectRef.getEReference() != null){
		var itemSubjectRef = new SysMini!PartUsage;
		itemSubjectRef.isReference = true;
		itemSubjectRef.featureNote.add(":>");
		itemSubjectRef.featureSpecialization.add("itemSubjectRef");
		itemSubjectRef.valuePart = s.itemSubjectRef.getEReference();
		t.body.add(itemSubjectRef);
	}
	if (s.dataState.getEReference() != null){
		var dataState = new SysMini!PartUsage;
		dataState.isReference = true;
		dataState.featureNote.add(":>");
		dataState.featureSpecialization.add("dataState");
		dataState.valuePart = s.dataState.getEReference();
		t.body.add(dataState);
	}
}

@lazy
rule DataState
	transform s : DSL!DataState
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule OutputSet
	transform s : DSL!OutputSet
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.dataOutputRefs.getEReference() != null){
		var dataOutputRefs = new SysMini!PartUsage;
		dataOutputRefs.isReference = true;
		dataOutputRefs.featureNote.add(":>");
		dataOutputRefs.featureSpecialization.add("dataOutputRefs");
		dataOutputRefs.valuePart = s.dataOutputRefs.getEReference();
		t.body.add(dataOutputRefs);
	}
	if (s.optionalOutputRefs.getEReference() != null){
		var optionalOutputRefs = new SysMini!PartUsage;
		optionalOutputRefs.isReference = true;
		optionalOutputRefs.featureNote.add(":>");
		optionalOutputRefs.featureSpecialization.add("optionalOutputRefs");
		optionalOutputRefs.valuePart = s.optionalOutputRefs.getEReference();
		t.body.add(optionalOutputRefs);
	}
	if (s.whileExecutingOutputRefs.getEReference() != null){
		var whileExecutingOutputRefs = new SysMini!PartUsage;
		whileExecutingOutputRefs.isReference = true;
		whileExecutingOutputRefs.featureNote.add(":>");
		whileExecutingOutputRefs.featureSpecialization.add("whileExecutingOutputRefs");
		whileExecutingOutputRefs.valuePart = s.whileExecutingOutputRefs.getEReference();
		t.body.add(whileExecutingOutputRefs);
	}
	if (s.inputSetRefs.getEReference() != null){
		var inputSetRefs = new SysMini!PartUsage;
		inputSetRefs.isReference = true;
		inputSetRefs.featureNote.add(":>");
		inputSetRefs.featureSpecialization.add("inputSetRefs");
		inputSetRefs.valuePart = s.inputSetRefs.getEReference();
		t.body.add(inputSetRefs);
	}
}

@lazy
rule DataOutput
	transform s : DSL!DataOutput
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isCollection.getEAttribute() != null){
		var isCollection = new SysMini!AttributeUsage;
		isCollection.featureNote.add(":>>");
		isCollection.featureSpecialization.add("isCollection");
		isCollection.valuePart = s.isCollection.getEAttribute();
		t.body.add(isCollection);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.itemSubjectRef.getEReference() != null){
		var itemSubjectRef = new SysMini!PartUsage;
		itemSubjectRef.isReference = true;
		itemSubjectRef.featureNote.add(":>");
		itemSubjectRef.featureSpecialization.add("itemSubjectRef");
		itemSubjectRef.valuePart = s.itemSubjectRef.getEReference();
		t.body.add(itemSubjectRef);
	}
	if (s.dataState.getEReference() != null){
		var dataState = new SysMini!PartUsage;
		dataState.isReference = true;
		dataState.featureNote.add(":>");
		dataState.featureSpecialization.add("dataState");
		dataState.valuePart = s.dataState.getEReference();
		t.body.add(dataState);
	}
	if (s.outputSetWithOptional.getEReference() != null){
		var outputSetWithOptional = new SysMini!PartUsage;
		outputSetWithOptional.isReference = true;
		outputSetWithOptional.featureNote.add(":>");
		outputSetWithOptional.featureSpecialization.add("outputSetWithOptional");
		outputSetWithOptional.valuePart = s.outputSetWithOptional.getEReference();
		t.body.add(outputSetWithOptional);
	}
	if (s.outputSetWithWhileExecuting.getEReference() != null){
		var outputSetWithWhileExecuting = new SysMini!PartUsage;
		outputSetWithWhileExecuting.isReference = true;
		outputSetWithWhileExecuting.featureNote.add(":>");
		outputSetWithWhileExecuting.featureSpecialization.add("outputSetWithWhileExecuting");
		outputSetWithWhileExecuting.valuePart = s.outputSetWithWhileExecuting.getEReference();
		t.body.add(outputSetWithWhileExecuting);
	}
	if (s.outputSetRefs.getEReference() != null){
		var outputSetRefs = new SysMini!PartUsage;
		outputSetRefs.isReference = true;
		outputSetRefs.featureNote.add(":>");
		outputSetRefs.featureSpecialization.add("outputSetRefs");
		outputSetRefs.valuePart = s.outputSetRefs.getEReference();
		t.body.add(outputSetRefs);
	}
}

@lazy
rule InputOutputBinding
	transform s : DSL!InputOutputBinding
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.inputDataRef.getEReference() != null){
		var inputDataRef = new SysMini!PartUsage;
		inputDataRef.isReference = true;
		inputDataRef.featureNote.add(":>");
		inputDataRef.featureSpecialization.add("inputDataRef");
		inputDataRef.valuePart = s.inputDataRef.getEReference();
		t.body.add(inputDataRef);
	}
	if (s.outputDataRef.getEReference() != null){
		var outputDataRef = new SysMini!PartUsage;
		outputDataRef.isReference = true;
		outputDataRef.featureNote.add(":>");
		outputDataRef.featureSpecialization.add("outputDataRef");
		outputDataRef.valuePart = s.outputDataRef.getEReference();
		t.body.add(outputDataRef);
	}
	if (s.operationRef.getEReference() != null){
		var operationRef = new SysMini!PartUsage;
		operationRef.isReference = true;
		operationRef.featureNote.add(":>");
		operationRef.featureSpecialization.add("operationRef");
		operationRef.valuePart = s.operationRef.getEReference();
		t.body.add(operationRef);
	}
}

@lazy
rule ResourceRole
	transform s : DSL!ResourceRole
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.resourceRef.getEReference() != null){
		var resourceRef = new SysMini!PartUsage;
		resourceRef.isReference = true;
		resourceRef.featureNote.add(":>");
		resourceRef.featureSpecialization.add("resourceRef");
		resourceRef.valuePart = s.resourceRef.getEReference();
		t.body.add(resourceRef);
	}
	if (s.resourceParameterBindings.getEReference() != null){
		var resourceParameterBindings = new SysMini!PartUsage;
		resourceParameterBindings.isReference = true;
		resourceParameterBindings.featureNote.add(":>");
		resourceParameterBindings.featureSpecialization.add("resourceParameterBindings");
		resourceParameterBindings.valuePart = s.resourceParameterBindings.getEReference();
		t.body.add(resourceParameterBindings);
	}
	if (s.resourceAssignmentExpression.getEReference() != null){
		var resourceAssignmentExpression = new SysMini!PartUsage;
		resourceAssignmentExpression.isReference = true;
		resourceAssignmentExpression.featureNote.add(":>");
		resourceAssignmentExpression.featureSpecialization.add("resourceAssignmentExpression");
		resourceAssignmentExpression.valuePart = s.resourceAssignmentExpression.getEReference();
		t.body.add(resourceAssignmentExpression);
	}
}

@lazy
rule Resource
	transform s : DSL!Resource
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.resourceParameters.getEReference() != null){
		var resourceParameters = new SysMini!PartUsage;
		resourceParameters.isReference = true;
		resourceParameters.featureNote.add(":>");
		resourceParameters.featureSpecialization.add("resourceParameters");
		resourceParameters.valuePart = s.resourceParameters.getEReference();
		t.body.add(resourceParameters);
	}
}

@lazy
rule ResourceParameter
	transform s : DSL!ResourceParameter
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isRequired.getEAttribute() != null){
		var isRequired = new SysMini!AttributeUsage;
		isRequired.featureNote.add(":>>");
		isRequired.featureSpecialization.add("isRequired");
		isRequired.valuePart = s.isRequired.getEAttribute();
		t.body.add(isRequired);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.type.getEReference() != null){
		var type = new SysMini!PartUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
}

@lazy
rule ResourceParameterBinding
	transform s : DSL!ResourceParameterBinding
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.expression.getEReference() != null){
		var expression = new SysMini!PartUsage;
		expression.isReference = true;
		expression.featureNote.add(":>");
		expression.featureSpecialization.add("expression");
		expression.valuePart = s.expression.getEReference();
		t.body.add(expression);
	}
	if (s.parameterRef.getEReference() != null){
		var parameterRef = new SysMini!PartUsage;
		parameterRef.isReference = true;
		parameterRef.featureNote.add(":>");
		parameterRef.featureSpecialization.add("parameterRef");
		parameterRef.valuePart = s.parameterRef.getEReference();
		t.body.add(parameterRef);
	}
}

@lazy
rule Expression
	transform s : DSL!Expression
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule ResourceAssignmentExpression
	transform s : DSL!ResourceAssignmentExpression
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.expression.getEReference() != null){
		var expression = new SysMini!PartUsage;
		expression.isReference = true;
		expression.featureNote.add(":>");
		expression.featureSpecialization.add("expression");
		expression.valuePart = s.expression.getEReference();
		t.body.add(expression);
	}
}

@lazy
rule Monitoring
	transform s : DSL!Monitoring
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule Performer
	transform s : DSL!Performer
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != n){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.resourceRef.getEReference() != null){
		var resourceRef = new SysMini!PartUsage;
		resourceRef.isReference = true;
		resourceRef.featureNote.add(":>");
		resourceRef.featureSpecialization.add("resourceRef");
		resourceRef.valuePart = s.resourceRef.getEReference();
		t.body.add(resourceRef);
	}
	if (s.resourceParameterBindings.getEReference() != null){
		var resourceParameterBindings = new SysMini!PartUsage;
		resourceParameterBindings.isReference = true;
		resourceParameterBindings.featureNote.add(":>");
		resourceParameterBindings.featureSpecialization.add("resourceParameterBindings");
		resourceParameterBindings.valuePart = s.resourceParameterBindings.getEReference();
		t.body.add(resourceParameterBindings);
	}
	if (s.resourceAssignmentExpression.getEReference() != null){
		var resourceAssignmentExpression = new SysMini!PartUsage;
		resourceAssignmentExpression.isReference = true;
		resourceAssignmentExpression.featureNote.add(":>");
		resourceAssignmentExpression.featureSpecialization.add("resourceAssignmentExpression");
		resourceAssignmentExpression.valuePart = s.resourceAssignmentExpression.getEReference();
		t.body.add(resourceAssignmentExpression);
	}
}

@lazy
rule Process
	transform s : DSL!Process
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.processType.getEAttribute() != null){
		var processType = new SysMini!AttributeUsage;
		processType.featureNote.add(":>>");
		processType.featureSpecialization.add("processType");
		processType.valuePart = s.processType.getEAttribute();
		t.body.add(processType);
	}
	if (s.isClosed.getEAttribute() != null){
		var isClosed = new SysMini!AttributeUsage;
		isClosed.featureNote.add(":>>");
		isClosed.featureSpecialization.add("isClosed");
		isClosed.valuePart = s.isClosed.getEAttribute();
		t.body.add(isClosed);
	}
	if (s.isExecutable.getEAttribute() != null){
		var isExecutable = new SysMini!AttributeUsage;
		isExecutable.featureNote.add(":>>");
		isExecutable.featureSpecialization.add("isExecutable");
		isExecutable.valuePart = s.isExecutable.getEAttribute();
		t.body.add(isExecutable);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.supportedInterfaceRefs.getEReference() != null){
		var supportedInterfaceRefs = new SysMini!PartUsage;
		supportedInterfaceRefs.isReference = true;
		supportedInterfaceRefs.featureNote.add(":>");
		supportedInterfaceRefs.featureSpecialization.add("supportedInterfaceRefs");
		supportedInterfaceRefs.valuePart = s.supportedInterfaceRefs.getEReference();
		t.body.add(supportedInterfaceRefs);
	}
	if (s.ioBinding.getEReference() != null){
		var ioBinding = new SysMini!PartUsage;
		ioBinding.isReference = true;
		ioBinding.featureNote.add(":>");
		ioBinding.featureSpecialization.add("ioBinding");
		ioBinding.valuePart = s.ioBinding.getEReference();
		t.body.add(ioBinding);
	}
	if (s.flowElements.getEReference() != null){
		var flowElements = new SysMini!PartUsage;
		flowElements.isReference = true;
		flowElements.featureNote.add(":>");
		flowElements.featureSpecialization.add("flowElements");
		flowElements.valuePart = s.flowElements.getEReference();
		t.body.add(flowElements);
	}
	if (s.laneSets.getEReference() != null){
		var laneSets = new SysMini!PartUsage;
		laneSets.isReference = true;
		laneSets.featureNote.add(":>");
		laneSets.featureSpecialization.add("laneSets");
		laneSets.valuePart = s.laneSets.getEReference();
		t.body.add(laneSets);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.supports.getEReference() != null){
		var supports = new SysMini!PartUsage;
		supports.isReference = true;
		supports.featureNote.add(":>");
		supports.featureSpecialization.add("supports");
		supports.valuePart = s.supports.getEReference();
		t.body.add(supports);
	}
	if (s.definitionalCollaborationRef.getEReference() != null){
		var definitionalCollaborationRef = new SysMini!PartUsage;
		definitionalCollaborationRef.isReference = true;
		definitionalCollaborationRef.featureNote.add(":>");
		definitionalCollaborationRef.featureSpecialization.add("definitionalCollaborationRef");
		definitionalCollaborationRef.valuePart = s.definitionalCollaborationRef.getEReference();
		t.body.add(definitionalCollaborationRef);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.artifacts.getEReference() != null){
		var artifacts = new SysMini!PartUsage;
		artifacts.isReference = true;
		artifacts.featureNote.add(":>");
		artifacts.featureSpecialization.add("artifacts");
		artifacts.valuePart = s.artifacts.getEReference();
		t.body.add(artifacts);
	}
	if (s.correlationSubscriptions.getEReference() != null){
		var correlationSubscriptions = new SysMini!PartUsage;
		correlationSubscriptions.isReference = true;
		correlationSubscriptions.featureNote.add(":>");
		correlationSubscriptions.featureSpecialization.add("correlationSubscriptions");
		correlationSubscriptions.valuePart = s.correlationSubscriptions.getEReference();
		t.body.add(correlationSubscriptions);
	}
	if (s.decomposedBy.getEReference() != null){
		var decomposedBy = new SysMini!PartUsage;
		decomposedBy.isReference = true;
		decomposedBy.featureNote.add(":>");
		decomposedBy.featureSpecialization.add("decomposedBy");
		decomposedBy.valuePart = s.decomposedBy.getEReference();
		t.body.add(decomposedBy);
	}
	if (s.decomposes.getEReference() != null){
		var decomposes = new SysMini!PartUsage;
		decomposes.isReference = true;
		decomposes.featureNote.add(":>");
		decomposes.featureSpecialization.add("decomposes");
		decomposes.valuePart = s.decomposes.getEReference();
		t.body.add(decomposes);
	}
}

@lazy
rule FlowElementsContainer
	transform s : DSL!FlowElementsContainer
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.flowElements.getEReference() != null){
		var flowElements = new SysMini!PartUsage;
		flowElements.isReference = true;
		flowElements.featureNote.add(":>");
		flowElements.featureSpecialization.add("flowElements");
		flowElements.valuePart = s.flowElements.getEReference();
		t.body.add(flowElements);
	}
	if (s.laneSets.getEReference() != null){
		var laneSets = new SysMini!PartUsage;
		laneSets.isReference = true;
		laneSets.featureNote.add(":>");
		laneSets.featureSpecialization.add("laneSets");
		laneSets.valuePart = s.laneSets.getEReference();
		t.body.add(laneSets);
	}
}

@lazy
rule FlowElement
	transform s : DSL!FlowElement
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
}

@lazy
rule CategoryValue
	transform s : DSL!CategoryValue
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.value.getEAttribute() != null){
		var value = new SysMini!AttributeUsage;
		value.featureNote.add(":>>");
		value.featureSpecialization.add("value");
		value.valuePart = s.value.getEAttribute();
		t.body.add(value);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.categorizedFlowElements.getEReference() != null){
		var categorizedFlowElements = new SysMini!PartUsage;
		categorizedFlowElements.isReference = true;
		categorizedFlowElements.featureNote.add(":>");
		categorizedFlowElements.featureSpecialization.add("categorizedFlowElements");
		categorizedFlowElements.valuePart = s.categorizedFlowElements.getEReference();
		t.body.add(categorizedFlowElements);
	}
}

@lazy
rule LaneSet
	transform s : DSL!LaneSet
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
}

@lazy
rule Lane
	transform s : DSL!Lane
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.childLaneSet.getEReference() != null){
		var childLaneSet = new SysMini!PartUsage;
		childLaneSet.isReference = true;
		childLaneSet.featureNote.add(":>");
		childLaneSet.featureSpecialization.add("childLaneSet");
		childLaneSet.valuePart = s.childLaneSet.getEReference();
		t.body.add(childLaneSet);
	}
	if (s.partitionElementRef.getEReference() != null){
		var partitionElementRef = new SysMini!PartUsage;
		partitionElementRef.isReference = true;
		partitionElementRef.featureNote.add(":>");
		partitionElementRef.featureSpecialization.add("partitionElementRef");
		partitionElementRef.valuePart = s.partitionElementRef.getEReference();
		t.body.add(partitionElementRef);
	}
	if (s.flowNodeRefs.getEReference() != null){
		var flowNodeRefs = new SysMini!PartUsage;
		flowNodeRefs.isReference = true;
		flowNodeRefs.featureNote.add(":>");
		flowNodeRefs.featureSpecialization.add("flowNodeRefs");
		flowNodeRefs.valuePart = s.flowNodeRefs.getEReference();
		t.body.add(flowNodeRefs);
	}
	if (s.partitionElement.getEReference() != null){
		var partitionElement = new SysMini!PartUsage;
		partitionElement.isReference = true;
		partitionElement.featureNote.add(":>");
		partitionElement.featureSpecialization.add("partitionElement");
		partitionElement.valuePart = s.partitionElement.getEReference();
		t.body.add(partitionElement);
	}
}

@lazy
rule FlowNode
	transform s : DSL!FlowNode
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
}

@lazy
rule SequenceFlow
	transform s : DSL!SequenceFlow
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isImmediate.getEAttribute() != null){
		var isImmediate = new SysMini!AttributeUsage;
		isImmediate.featureNote.add(":>>");
		isImmediate.featureSpecialization.add("isImmediate");
		isImmediate.valuePart = s.isImmediate.getEAttribute();
		t.body.add(isImmediate);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.conditionExpression.getEReference() != null){
		var conditionExpression = new SysMini!PartUsage;
		conditionExpression.isReference = true;
		conditionExpression.featureNote.add(":>");
		conditionExpression.featureSpecialization.add("conditionExpression");
		conditionExpression.valuePart = s.conditionExpression.getEReference();
		t.body.add(conditionExpression);
	}
	if (s.targetRef.getEReference() != null){
		var targetRef = new SysMini!PartUsage;
		targetRef.isReference = true;
		targetRef.featureNote.add(":>");
		targetRef.featureSpecialization.add("targetRef");
		targetRef.valuePart = s.targetRef.getEReference();
		t.body.add(targetRef);
	}
	if (s.sourceRef.getEReference() != null){
		var sourceRef = new SysMini!PartUsage;
		sourceRef.isReference = true;
		sourceRef.featureNote.add(":>");
		sourceRef.featureSpecialization.add("sourceRef");
		sourceRef.valuePart = s.sourceRef.getEReference();
		t.body.add(sourceRef);
	}
}

@lazy
rule Property
	transform s : DSL!Property
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.itemSubjectRef.getEReference() != null){
		var itemSubjectRef = new SysMini!PartUsage;
		itemSubjectRef.isReference = true;
		itemSubjectRef.featureNote.add(":>");
		itemSubjectRef.featureSpecialization.add("itemSubjectRef");
		itemSubjectRef.valuePart = s.itemSubjectRef.getEReference();
		t.body.add(itemSubjectRef);
	}
	if (s.dataState.getEReference() != null){
		var dataState = new SysMini!PartUsage;
		dataState.isReference = true;
		dataState.featureNote.add(":>");
		dataState.featureSpecialization.add("dataState");
		dataState.valuePart = s.dataState.getEReference();
		t.body.add(dataState);
	}
}

@lazy
rule Collaboration
	transform s : DSL!Collaboration
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isClosed.getEAttribute() != null){
		var isClosed = new SysMini!AttributeUsage;
		isClosed.featureNote.add(":>>");
		isClosed.featureSpecialization.add("isClosed");
		isClosed.valuePart = s.isClosed.getEAttribute();
		t.body.add(isClosed);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.choreographyRef.getEReference() != null){
		var choreographyRef = new SysMini!PartUsage;
		choreographyRef.isReference = true;
		choreographyRef.featureNote.add(":>");
		choreographyRef.featureSpecialization.add("choreographyRef");
		choreographyRef.valuePart = s.choreographyRef.getEReference();
		t.body.add(choreographyRef);
	}
	if (s.artifacts.getEReference() != null){
		var artifacts = new SysMini!PartUsage;
		artifacts.isReference = true;
		artifacts.featureNote.add(":>");
		artifacts.featureSpecialization.add("artifacts");
		artifacts.valuePart = s.artifacts.getEReference();
		t.body.add(artifacts);
	}
	if (s.participantAssociations.getEReference() != null){
		var participantAssociations = new SysMini!PartUsage;
		participantAssociations.isReference = true;
		participantAssociations.featureNote.add(":>");
		participantAssociations.featureSpecialization.add("participantAssociations");
		participantAssociations.valuePart = s.participantAssociations.getEReference();
		t.body.add(participantAssociations);
	}
	if (s.messageFlowAssociations.getEReference() != null){
		var messageFlowAssociations = new SysMini!PartUsage;
		messageFlowAssociations.isReference = true;
		messageFlowAssociations.featureNote.add(":>");
		messageFlowAssociations.featureSpecialization.add("messageFlowAssociations");
		messageFlowAssociations.valuePart = s.messageFlowAssociations.getEReference();
		t.body.add(messageFlowAssociations);
	}
	if (s.conversationAssociations.getEReference() != null){
		var conversationAssociations = new SysMini!PartUsage;
		conversationAssociations.isReference = true;
		conversationAssociations.featureNote.add(":>");
		conversationAssociations.featureSpecialization.add("conversationAssociations");
		conversationAssociations.valuePart = s.conversationAssociations.getEReference();
		t.body.add(conversationAssociations);
	}
	if (s.participants.getEReference() != null){
		var participants = new SysMini!PartUsage;
		participants.isReference = true;
		participants.featureNote.add(":>");
		participants.featureSpecialization.add("participants");
		participants.valuePart = s.participants.getEReference();
		t.body.add(participants);
	}
	if (s.messageFlows.getEReference() != null){
		var messageFlows = new SysMini!PartUsage;
		messageFlows.isReference = true;
		messageFlows.featureNote.add(":>");
		messageFlows.featureSpecialization.add("messageFlows");
		messageFlows.valuePart = s.messageFlows.getEReference();
		t.body.add(messageFlows);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
	if (s.conversations.getEReference() != null){
		var conversations = new SysMini!PartUsage;
		conversations.isReference = true;
		conversations.featureNote.add(":>");
		conversations.featureSpecialization.add("conversations");
		conversations.valuePart = s.conversations.getEReference();
		t.body.add(conversations);
	}
	if (s.conversationLinks.getEReference() != null){
		var conversationLinks = new SysMini!PartUsage;
		conversationLinks.isReference = true;
		conversationLinks.featureNote.add(":>");
		conversationLinks.featureSpecialization.add("conversationLinks");
		conversationLinks.valuePart = s.conversationLinks.getEReference();
		t.body.add(conversationLinks);
	}
}

@lazy
rule Choreography
	transform s : DSL!Choreography
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isClosed.getEAttribute() != null){
		var isClosed = new SysMini!AttributeUsage;
		isClosed.featureNote.add(":>>");
		isClosed.featureSpecialization.add("isClosed");
		isClosed.valuePart = s.isClosed.getEAttribute();
		t.body.add(isClosed);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.choreographyRef.getEReference() != null){
		var choreographyRef = new SysMini!PartUsage;
		choreographyRef.isReference = true;
		choreographyRef.featureNote.add(":>");
		choreographyRef.featureSpecialization.add("choreographyRef");
		choreographyRef.valuePart = s.choreographyRef.getEReference();
		t.body.add(choreographyRef);
	}
	if (s.artifacts.getEReference() != null){
		var artifacts = new SysMini!PartUsage;
		artifacts.isReference = true;
		artifacts.featureNote.add(":>");
		artifacts.featureSpecialization.add("artifacts");
		artifacts.valuePart = s.artifacts.getEReference();
		t.body.add(artifacts);
	}
	if (s.participantAssociations.getEReference() != null){
		var participantAssociations = new SysMini!PartUsage;
		participantAssociations.isReference = true;
		participantAssociations.featureNote.add(":>");
		participantAssociations.featureSpecialization.add("participantAssociations");
		participantAssociations.valuePart = s.participantAssociations.getEReference();
		t.body.add(participantAssociations);
	}
	if (s.messageFlowAssociations.getEReference() != null){
		var messageFlowAssociations = new SysMini!PartUsage;
		messageFlowAssociations.isReference = true;
		messageFlowAssociations.featureNote.add(":>");
		messageFlowAssociations.featureSpecialization.add("messageFlowAssociations");
		messageFlowAssociations.valuePart = s.messageFlowAssociations.getEReference();
		t.body.add(messageFlowAssociations);
	}
	if (s.conversationAssociations.getEReference() != null){
		var conversationAssociations = new SysMini!PartUsage;
		conversationAssociations.isReference = true;
		conversationAssociations.featureNote.add(":>");
		conversationAssociations.featureSpecialization.add("conversationAssociations");
		conversationAssociations.valuePart = s.conversationAssociations.getEReference();
		t.body.add(conversationAssociations);
	}
	if (s.participants.getEReference() != null){
		var participants = new SysMini!PartUsage;
		participants.isReference = true;
		participants.featureNote.add(":>");
		participants.featureSpecialization.add("participants");
		participants.valuePart = s.participants.getEReference();
		t.body.add(participants);
	}
	if (s.messageFlows.getEReference() != null){
		var messageFlows = new SysMini!PartUsage;
		messageFlows.isReference = true;
		messageFlows.featureNote.add(":>");
		messageFlows.featureSpecialization.add("messageFlows");
		messageFlows.valuePart = s.messageFlows.getEReference();
		t.body.add(messageFlows);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
	if (s.conversations.getEReference() != null){
		var conversations = new SysMini!PartUsage;
		conversations.isReference = true;
		conversations.featureNote.add(":>");
		conversations.featureSpecialization.add("conversations");
		conversations.valuePart = s.conversations.getEReference();
		t.body.add(conversations);
	}
	if (s.conversationLinks.getEReference() != null){
		var conversationLinks = new SysMini!PartUsage;
		conversationLinks.isReference = true;
		conversationLinks.featureNote.add(":>");
		conversationLinks.featureSpecialization.add("conversationLinks");
		conversationLinks.valuePart = s.conversationLinks.getEReference();
		t.body.add(conversationLinks);
	}
	if (s.flowElements.getEReference() != null){
		var flowElements = new SysMini!PartUsage;
		flowElements.isReference = true;
		flowElements.featureNote.add(":>");
		flowElements.featureSpecialization.add("flowElements");
		flowElements.valuePart = s.flowElements.getEReference();
		t.body.add(flowElements);
	}
	if (s.laneSets.getEReference() != null){
		var laneSets = new SysMini!PartUsage;
		laneSets.isReference = true;
		laneSets.featureNote.add(":>");
		laneSets.featureSpecialization.add("laneSets");
		laneSets.valuePart = s.laneSets.getEReference();
		t.body.add(laneSets);
	}
}

@lazy
rule Artifact
	transform s : DSL!Artifact
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule ParticipantAssociation
	transform s : DSL!ParticipantAssociation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.innerParticipantRef.getEReference() != null){
		var innerParticipantRef = new SysMini!PartUsage;
		innerParticipantRef.isReference = true;
		innerParticipantRef.featureNote.add(":>");
		innerParticipantRef.featureSpecialization.add("innerParticipantRef");
		innerParticipantRef.valuePart = s.innerParticipantRef.getEReference();
		t.body.add(innerParticipantRef);
	}
	if (s.outerParticipantRef.getEReference() != null){
		var outerParticipantRef = new SysMini!PartUsage;
		outerParticipantRef.isReference = true;
		outerParticipantRef.featureNote.add(":>");
		outerParticipantRef.featureSpecialization.add("outerParticipantRef");
		outerParticipantRef.valuePart = s.outerParticipantRef.getEReference();
		t.body.add(outerParticipantRef);
	}
}

@lazy
rule Participant
	transform s : DSL!Participant
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.interfaceRefs.getEReference() != null){
		var interfaceRefs = new SysMini!PartUsage;
		interfaceRefs.isReference = true;
		interfaceRefs.featureNote.add(":>");
		interfaceRefs.featureSpecialization.add("interfaceRefs");
		interfaceRefs.valuePart = s.interfaceRefs.getEReference();
		t.body.add(interfaceRefs);
	}
	if (s.participantMultiplicity.getEReference() != null){
		var participantMultiplicity = new SysMini!PartUsage;
		participantMultiplicity.isReference = true;
		participantMultiplicity.featureNote.add(":>");
		participantMultiplicity.featureSpecialization.add("participantMultiplicity");
		participantMultiplicity.valuePart = s.participantMultiplicity.getEReference();
		t.body.add(participantMultiplicity);
	}
	if (s.endPointRefs.getEReference() != null){
		var endPointRefs = new SysMini!PartUsage;
		endPointRefs.isReference = true;
		endPointRefs.featureNote.add(":>");
		endPointRefs.featureSpecialization.add("endPointRefs");
		endPointRefs.valuePart = s.endPointRefs.getEReference();
		t.body.add(endPointRefs);
	}
	if (s.processRef.getEReference() != null){
		var processRef = new SysMini!PartUsage;
		processRef.isReference = true;
		processRef.featureNote.add(":>");
		processRef.featureSpecialization.add("processRef");
		processRef.valuePart = s.processRef.getEReference();
		t.body.add(processRef);
	}
}

@lazy
rule InteractionNode
	transform s : DSL!InteractionNode
	to t : SysMini!PartUsage
	extends Base{
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
}

@lazy
rule ConversationLink
	transform s : DSL!ConversationLink
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.sourceRef.getEReference() != null){
		var sourceRef = new SysMini!PartUsage;
		sourceRef.isReference = true;
		sourceRef.featureNote.add(":>");
		sourceRef.featureSpecialization.add("sourceRef");
		sourceRef.valuePart = s.sourceRef.getEReference();
		t.body.add(sourceRef);
	}
	if (s.targetRef.getEReference() != null){
		var targetRef = new SysMini!PartUsage;
		targetRef.isReference = true;
		targetRef.featureNote.add(":>");
		targetRef.featureSpecialization.add("targetRef");
		targetRef.valuePart = s.targetRef.getEReference();
		t.body.add(targetRef);
	}
}

@lazy
rule ParticipantMultiplicity
	transform s : DSL!ParticipantMultiplicity
	to t : SysMini!PartUsage
	extends Base{
	if (s.minimum.getEAttribute() != null){
		var minimum = new SysMini!AttributeUsage;
		minimum.featureNote.add(":>>");
		minimum.featureSpecialization.add("minimum");
		minimum.valuePart = s.minimum.getEAttribute();
		t.body.add(minimum);
	}
	if (s.maximum.getEAttribute() != null){
		var maximum = new SysMini!AttributeUsage;
		maximum.featureNote.add(":>>");
		maximum.featureSpecialization.add("maximum");
		maximum.valuePart = s.maximum.getEAttribute();
		t.body.add(maximum);
	}
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
}

@lazy
rule MessageFlowAssociation
	transform s : DSL!MessageFlowAssociation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.innerMessageFlowRef.getEReference() != null){
		var innerMessageFlowRef = new SysMini!PartUsage;
		innerMessageFlowRef.isReference = true;
		innerMessageFlowRef.featureNote.add(":>");
		innerMessageFlowRef.featureSpecialization.add("innerMessageFlowRef");
		innerMessageFlowRef.valuePart = s.innerMessageFlowRef.getEReference();
		t.body.add(innerMessageFlowRef);
	}
	if (s.outerMessageFlowRef.getEReference() != null){
		var outerMessageFlowRef = new SysMini!PartUsage;
		outerMessageFlowRef.isReference = true;
		outerMessageFlowRef.featureNote.add(":>");
		outerMessageFlowRef.featureSpecialization.add("outerMessageFlowRef");
		outerMessageFlowRef.valuePart = s.outerMessageFlowRef.getEReference();
		t.body.add(outerMessageFlowRef);
	}
}

@lazy
rule MessageFlow
	transform s : DSL!MessageFlow
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.sourceRef.getEReference() != null){
		var sourceRef = new SysMini!PartUsage;
		sourceRef.isReference = true;
		sourceRef.featureNote.add(":>");
		sourceRef.featureSpecialization.add("sourceRef");
		sourceRef.valuePart = s.sourceRef.getEReference();
		t.body.add(sourceRef);
	}
	if (s.targetRef.getEReference() != null){
		var targetRef = new SysMini!PartUsage;
		targetRef.isReference = true;
		targetRef.featureNote.add(":>");
		targetRef.featureSpecialization.add("targetRef");
		targetRef.valuePart = s.targetRef.getEReference();
		t.body.add(targetRef);
	}
	if (s.messageRef.getEReference() != null){
		var messageRef = new SysMini!PartUsage;
		messageRef.isReference = true;
		messageRef.featureNote.add(":>");
		messageRef.featureSpecialization.add("messageRef");
		messageRef.valuePart = s.messageRef.getEReference();
		t.body.add(messageRef);
	}
}

@lazy
rule ConversationAssociation
	transform s : DSL!ConversationAssociation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.innerConversationNodeRef.getEReference() != null){
		var innerConversationNodeRef = new SysMini!PartUsage;
		innerConversationNodeRef.isReference = true;
		innerConversationNodeRef.featureNote.add(":>");
		innerConversationNodeRef.featureSpecialization.add("innerConversationNodeRef");
		innerConversationNodeRef.valuePart = s.innerConversationNodeRef.getEReference();
		t.body.add(innerConversationNodeRef);
	}
	if (s.outerConversationNodeRef.getEReference() != null){
		var outerConversationNodeRef = new SysMini!PartUsage;
		outerConversationNodeRef.isReference = true;
		outerConversationNodeRef.featureNote.add(":>");
		outerConversationNodeRef.featureSpecialization.add("outerConversationNodeRef");
		outerConversationNodeRef.valuePart = s.outerConversationNodeRef.getEReference();
		t.body.add(outerConversationNodeRef);
	}
}

@lazy
rule ConversationNode
	transform s : DSL!ConversationNode
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.participantRefs.getEReference() != null){
		var participantRefs = new SysMini!PartUsage;
		participantRefs.isReference = true;
		participantRefs.featureNote.add(":>");
		participantRefs.featureSpecialization.add("participantRefs");
		participantRefs.valuePart = s.participantRefs.getEReference();
		t.body.add(participantRefs);
	}
	if (s.messageFlowRefs.getEReference() != null){
		var messageFlowRefs = new SysMini!PartUsage;
		messageFlowRefs.isReference = true;
		messageFlowRefs.featureNote.add(":>");
		messageFlowRefs.featureSpecialization.add("messageFlowRefs");
		messageFlowRefs.valuePart = s.messageFlowRefs.getEReference();
		t.body.add(messageFlowRefs);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
}

@lazy
rule CorrelationKey
	transform s : DSL!CorrelationKey
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.correlationPropertyRef.getEReference() != null){
		var correlationPropertyRef = new SysMini!PartUsage;
		correlationPropertyRef.isReference = true;
		correlationPropertyRef.featureNote.add(":>");
		correlationPropertyRef.featureSpecialization.add("correlationPropertyRef");
		correlationPropertyRef.valuePart = s.correlationPropertyRef.getEReference();
		t.body.add(correlationPropertyRef);
	}
}

@lazy
rule CorrelationProperty
	transform s : DSL!CorrelationProperty
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.correlationPropertyRetrievalExpression.getEReference() != null){
		var correlationPropertyRetrievalExpression = new SysMini!PartUsage;
		correlationPropertyRetrievalExpression.isReference = true;
		correlationPropertyRetrievalExpression.featureNote.add(":>");
		correlationPropertyRetrievalExpression.featureSpecialization.add("correlationPropertyRetrievalExpression");
		correlationPropertyRetrievalExpression.valuePart = s.correlationPropertyRetrievalExpression.getEReference();
		t.body.add(correlationPropertyRetrievalExpression);
	}
	if (s.type.getEReference() != null){
		var type = new SysMini!PartUsage;
		type.isReference = true;
		type.featureNote.add(":>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEReference();
		t.body.add(type);
	}
}

@lazy
rule CorrelationPropertyRetrievalExpression
	transform s : DSL!CorrelationPropertyRetrievalExpression
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.messagePath.getEReference() != null){
		var messagePath = new SysMini!PartUsage;
		messagePath.isReference = true;
		messagePath.featureNote.add(":>");
		messagePath.featureSpecialization.add("messagePath");
		messagePath.valuePart = s.messagePath.getEReference();
		t.body.add(messagePath);
	}
	if (s.messageRef.getEReference() != null){
		var messageRef = new SysMini!PartUsage;
		messageRef.isReference = true;
		messageRef.featureNote.add(":>");
		messageRef.featureSpecialization.add("messageRef");
		messageRef.valuePart = s.messageRef.getEReference();
		t.body.add(messageRef);
	}
}

@lazy
rule FormalExpression
	transform s : DSL!FormalExpression
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.language.getEAttribute() != null){
		var language = new SysMini!AttributeUsage;
		language.featureNote.add(":>>");
		language.featureSpecialization.add("language");
		language.valuePart = s.language.getEAttribute();
		t.body.add(language);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.body.getEReference() != null){
		var body = new SysMini!PartUsage;
		body.isReference = true;
		body.featureNote.add(":>");
		body.featureSpecialization.add("body");
		body.valuePart = s.body.getEReference();
		t.body.add(body);
	}
	if (s.evaluatesToTypeRef.getEReference() != null){
		var evaluatesToTypeRef = new SysMini!PartUsage;
		evaluatesToTypeRef.isReference = true;
		evaluatesToTypeRef.featureNote.add(":>");
		evaluatesToTypeRef.featureSpecialization.add("evaluatesToTypeRef");
		evaluatesToTypeRef.valuePart = s.evaluatesToTypeRef.getEReference();
		t.body.add(evaluatesToTypeRef);
	}
}

@lazy
rule CorrelationSubscription
	transform s : DSL!CorrelationSubscription
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.correlationKeyRef.getEReference() != null){
		var correlationKeyRef = new SysMini!PartUsage;
		correlationKeyRef.isReference = true;
		correlationKeyRef.featureNote.add(":>");
		correlationKeyRef.featureSpecialization.add("correlationKeyRef");
		correlationKeyRef.valuePart = s.correlationKeyRef.getEReference();
		t.body.add(correlationKeyRef);
	}
	if (s.correlationPropertyBinding.getEReference() != null){
		var correlationPropertyBinding = new SysMini!PartUsage;
		correlationPropertyBinding.isReference = true;
		correlationPropertyBinding.featureNote.add(":>");
		correlationPropertyBinding.featureSpecialization.add("correlationPropertyBinding");
		correlationPropertyBinding.valuePart = s.correlationPropertyBinding.getEReference();
		t.body.add(correlationPropertyBinding);
	}
}

@lazy
rule CorrelationPropertyBinding
	transform s : DSL!CorrelationPropertyBinding
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.dataPath.getEReference() != null){
		var dataPath = new SysMini!PartUsage;
		dataPath.isReference = true;
		dataPath.featureNote.add(":>");
		dataPath.featureSpecialization.add("dataPath");
		dataPath.valuePart = s.dataPath.getEReference();
		t.body.add(dataPath);
	}
	if (s.correlationPropertyRef.getEReference() != null){
		var correlationPropertyRef = new SysMini!PartUsage;
		correlationPropertyRef.isReference = true;
		correlationPropertyRef.featureNote.add(":>");
		correlationPropertyRef.featureSpecialization.add("correlationPropertyRef");
		correlationPropertyRef.valuePart = s.correlationPropertyRef.getEReference();
		t.body.add(correlationPropertyRef);
	}
}

@lazy
rule GlobalManualTask
	transform s : DSL!GlobalManualTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.supportedInterfaceRefs.getEReference() != null){
		var supportedInterfaceRefs = new SysMini!PartUsage;
		supportedInterfaceRefs.isReference = true;
		supportedInterfaceRefs.featureNote.add(":>");
		supportedInterfaceRefs.featureSpecialization.add("supportedInterfaceRefs");
		supportedInterfaceRefs.valuePart = s.supportedInterfaceRefs.getEReference();
		t.body.add(supportedInterfaceRefs);
	}
	if (s.ioBinding.getEReference() != null){
		var ioBinding = new SysMini!PartUsage;
		ioBinding.isReference = true;
		ioBinding.featureNote.add(":>");
		ioBinding.featureSpecialization.add("ioBinding");
		ioBinding.valuePart = s.ioBinding.getEReference();
		t.body.add(ioBinding);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
}

@lazy
rule ManualTask
	transform s : DSL!ManualTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
}

@lazy
rule Task
	transform s : DSL!Task
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
}

@lazy
rule Activity
	transform s : DSL!Activity
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
}

@lazy
rule LoopCharacteristics
	transform s : DSL!LoopCharacteristics
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule BoundaryEvent
	transform s : DSL!BoundaryEvent
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.parallelMultiple.getEAttribute() != null){
		var parallelMultiple = new SysMini!AttributeUsage;
		parallelMultiple.featureNote.add(":>>");
		parallelMultiple.featureSpecialization.add("parallelMultiple");
		parallelMultiple.valuePart = s.parallelMultiple.getEAttribute();
		t.body.add(parallelMultiple);
	}
	if (s.cancelActivity.getEAttribute() != null){
		var cancelActivity = new SysMini!AttributeUsage;
		cancelActivity.featureNote.add(":>>");
		cancelActivity.featureSpecialization.add("cancelActivity");
		cancelActivity.valuePart = s.cancelActivity.getEAttribute();
		t.body.add(cancelActivity);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.outputSet.getEReference() != null){
		var outputSet = new SysMini!PartUsage;
		outputSet.isReference = true;
		outputSet.featureNote.add(":>");
		outputSet.featureSpecialization.add("outputSet");
		outputSet.valuePart = s.outputSet.getEReference();
		t.body.add(outputSet);
	}
	if (s.eventDefinitionRefs.getEReference() != null){
		var eventDefinitionRefs = new SysMini!PartUsage;
		eventDefinitionRefs.isReference = true;
		eventDefinitionRefs.featureNote.add(":>");
		eventDefinitionRefs.featureSpecialization.add("eventDefinitionRefs");
		eventDefinitionRefs.valuePart = s.eventDefinitionRefs.getEReference();
		t.body.add(eventDefinitionRefs);
	}
	if (s.dataOutputAssociation.getEReference() != null){
		var dataOutputAssociation = new SysMini!PartUsage;
		dataOutputAssociation.isReference = true;
		dataOutputAssociation.featureNote.add(":>");
		dataOutputAssociation.featureSpecialization.add("dataOutputAssociation");
		dataOutputAssociation.valuePart = s.dataOutputAssociation.getEReference();
		t.body.add(dataOutputAssociation);
	}
	if (s.dataOutputs.getEReference() != null){
		var dataOutputs = new SysMini!PartUsage;
		dataOutputs.isReference = true;
		dataOutputs.featureNote.add(":>");
		dataOutputs.featureSpecialization.add("dataOutputs");
		dataOutputs.valuePart = s.dataOutputs.getEReference();
		t.body.add(dataOutputs);
	}
	if (s.eventDefinitions.getEReference() != null){
		var eventDefinitions = new SysMini!PartUsage;
		eventDefinitions.isReference = true;
		eventDefinitions.featureNote.add(":>");
		eventDefinitions.featureSpecialization.add("eventDefinitions");
		eventDefinitions.valuePart = s.eventDefinitions.getEReference();
		t.body.add(eventDefinitions);
	}
	if (s.attachedToRef.getEReference() != null){
		var attachedToRef = new SysMini!PartUsage;
		attachedToRef.isReference = true;
		attachedToRef.featureNote.add(":>");
		attachedToRef.featureSpecialization.add("attachedToRef");
		attachedToRef.valuePart = s.attachedToRef.getEReference();
		t.body.add(attachedToRef);
	}
}

@lazy
rule CatchEvent
	transform s : DSL!CatchEvent
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.parallelMultiple.getEAttribute() != null){
		var parallelMultiple = new SysMini!AttributeUsage;
		parallelMultiple.featureNote.add(":>>");
		parallelMultiple.featureSpecialization.add("parallelMultiple");
		parallelMultiple.valuePart = s.parallelMultiple.getEAttribute();
		t.body.add(parallelMultiple);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.outputSet.getEReference() != null){
		var outputSet = new SysMini!PartUsage;
		outputSet.isReference = true;
		outputSet.featureNote.add(":>");
		outputSet.featureSpecialization.add("outputSet");
		outputSet.valuePart = s.outputSet.getEReference();
		t.body.add(outputSet);
	}
	if (s.eventDefinitionRefs.getEReference() != null){
		var eventDefinitionRefs = new SysMini!PartUsage;
		eventDefinitionRefs.isReference = true;
		eventDefinitionRefs.featureNote.add(":>");
		eventDefinitionRefs.featureSpecialization.add("eventDefinitionRefs");
		eventDefinitionRefs.valuePart = s.eventDefinitionRefs.getEReference();
		t.body.add(eventDefinitionRefs);
	}
	if (s.dataOutputAssociation.getEReference() != null){
		var dataOutputAssociation = new SysMini!PartUsage;
		dataOutputAssociation.isReference = true;
		dataOutputAssociation.featureNote.add(":>");
		dataOutputAssociation.featureSpecialization.add("dataOutputAssociation");
		dataOutputAssociation.valuePart = s.dataOutputAssociation.getEReference();
		t.body.add(dataOutputAssociation);
	}
	if (s.dataOutputs.getEReference() != null){
		var dataOutputs = new SysMini!PartUsage;
		dataOutputs.isReference = true;
		dataOutputs.featureNote.add(":>");
		dataOutputs.featureSpecialization.add("dataOutputs");
		dataOutputs.valuePart = s.dataOutputs.getEReference();
		t.body.add(dataOutputs);
	}
	if (s.eventDefinitions.getEReference() != null){
		var eventDefinitions = new SysMini!PartUsage;
		eventDefinitions.isReference = true;
		eventDefinitions.featureNote.add(":>");
		eventDefinitions.featureSpecialization.add("eventDefinitions");
		eventDefinitions.valuePart = s.eventDefinitions.getEReference();
		t.body.add(eventDefinitions);
	}
}

@lazy
rule Event
	transform s : DSL!Event
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
}

@lazy
rule EventDefinition
	transform s : DSL!EventDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule DataOutputAssociation
	transform s : DSL!DataOutputAssociation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.transformation.getEReference() != null){
		var transformation = new SysMini!PartUsage;
		transformation.isReference = true;
		transformation.featureNote.add(":>");
		transformation.featureSpecialization.add("transformation");
		transformation.valuePart = s.transformation.getEReference();
		t.body.add(transformation);
	}
	if (s.assignment.getEReference() != null){
		var assignment = new SysMini!PartUsage;
		assignment.isReference = true;
		assignment.featureNote.add(":>");
		assignment.featureSpecialization.add("assignment");
		assignment.valuePart = s.assignment.getEReference();
		t.body.add(assignment);
	}
	if (s.targetRef.getEReference() != null){
		var targetRef = new SysMini!PartUsage;
		targetRef.isReference = true;
		targetRef.featureNote.add(":>");
		targetRef.featureSpecialization.add("targetRef");
		targetRef.valuePart = s.targetRef.getEReference();
		t.body.add(targetRef);
	}
	if (s.sourceRef.getEReference() != null){
		var sourceRef = new SysMini!PartUsage;
		sourceRef.isReference = true;
		sourceRef.featureNote.add(":>");
		sourceRef.featureSpecialization.add("sourceRef");
		sourceRef.valuePart = s.sourceRef.getEReference();
		t.body.add(sourceRef);
	}
}

@lazy
rule DataAssociation
	transform s : DSL!DataAssociation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.transformation.getEReference() != null){
		var transformation = new SysMini!PartUsage;
		transformation.isReference = true;
		transformation.featureNote.add(":>");
		transformation.featureSpecialization.add("transformation");
		transformation.valuePart = s.transformation.getEReference();
		t.body.add(transformation);
	}
	if (s.assignment.getEReference() != null){
		var assignment = new SysMini!PartUsage;
		assignment.isReference = true;
		assignment.featureNote.add(":>");
		assignment.featureSpecialization.add("assignment");
		assignment.valuePart = s.assignment.getEReference();
		t.body.add(assignment);
	}
	if (s.targetRef.getEReference() != null){
		var targetRef = new SysMini!PartUsage;
		targetRef.isReference = true;
		targetRef.featureNote.add(":>");
		targetRef.featureSpecialization.add("targetRef");
		targetRef.valuePart = s.targetRef.getEReference();
		t.body.add(targetRef);
	}
	if (s.sourceRef.getEReference() != null){
		var sourceRef = new SysMini!PartUsage;
		sourceRef.isReference = true;
		sourceRef.featureNote.add(":>");
		sourceRef.featureSpecialization.add("sourceRef");
		sourceRef.valuePart = s.sourceRef.getEReference();
		t.body.add(sourceRef);
	}
}

@lazy
rule Assignment
	transform s : DSL!Assignment
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.~from.getEReference() != null){
		var from_ = new SysMini!PartUsage;
		from_.isReference = true;
		from_.featureNote.add(":>");
		from_.featureSpecialization.add("'from'");
		from_.valuePart = s.from_.getEReference();
		t.body.add(from_);
	}
	if (s.~to.getEReference() != null){
		var to_ = new SysMini!PartUsage;
		to_.isReference = true;
		to_.featureNote.add(":>");
		to_.featureSpecialization.add("'to'");
		to_.valuePart = s.to_.getEReference();
		t.body.add(to_);
	}
}

@lazy
rule DataInputAssociation
	transform s : DSL!DataInputAssociation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.transformation.getEReference() != null){
		var transformation = new SysMini!PartUsage;
		transformation.isReference = true;
		transformation.featureNote.add(":>");
		transformation.featureSpecialization.add("transformation");
		transformation.valuePart = s.transformation.getEReference();
		t.body.add(transformation);
	}
	if (s.assignment.getEReference() != null){
		var assignment = new SysMini!PartUsage;
		assignment.isReference = true;
		assignment.featureNote.add(":>");
		assignment.featureSpecialization.add("assignment");
		assignment.valuePart = s.assignment.getEReference();
		t.body.add(assignment);
	}
	if (s.targetRef.getEReference() != null){
		var targetRef = new SysMini!PartUsage;
		targetRef.isReference = true;
		targetRef.featureNote.add(":>");
		targetRef.featureSpecialization.add("targetRef");
		targetRef.valuePart = s.targetRef.getEReference();
		t.body.add(targetRef);
	}
	if (s.sourceRef.getEReference() != null){
		var sourceRef = new SysMini!PartUsage;
		sourceRef.isReference = true;
		sourceRef.featureNote.add(":>");
		sourceRef.featureSpecialization.add("sourceRef");
		sourceRef.valuePart = s.sourceRef.getEReference();
		t.body.add(sourceRef);
	}
}

@lazy
rule UserTask
	transform s : DSL!UserTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.implementation.getEAttribute() != null){
		var implementation = new SysMini!AttributeUsage;
		implementation.featureNote.add(":>>");
		implementation.featureSpecialization.add("implementation");
		implementation.valuePart = s.implementation.getEAttribute();
		t.body.add(implementation);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
	if (s.renderings.getEReference() != null){
		var renderings = new SysMini!PartUsage;
		renderings.isReference = true;
		renderings.featureNote.add(":>");
		renderings.featureSpecialization.add("renderings");
		renderings.valuePart = s.renderings.getEReference();
		t.body.add(renderings);
	}
}

@lazy
rule Rendering
	transform s : DSL!Rendering
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule HumanPerformer
	transform s : DSL!HumanPerformer
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.resourceRef.getEReference() != null){
		var resourceRef = new SysMini!PartUsage;
		resourceRef.isReference = true;
		resourceRef.featureNote.add(":>");
		resourceRef.featureSpecialization.add("resourceRef");
		resourceRef.valuePart = s.resourceRef.getEReference();
		t.body.add(resourceRef);
	}
	if (s.resourceParameterBindings.getEReference() != null){
		var resourceParameterBindings = new SysMini!PartUsage;
		resourceParameterBindings.isReference = true;
		resourceParameterBindings.featureNote.add(":>");
		resourceParameterBindings.featureSpecialization.add("resourceParameterBindings");
		resourceParameterBindings.valuePart = s.resourceParameterBindings.getEReference();
		t.body.add(resourceParameterBindings);
	}
	if (s.resourceAssignmentExpression.getEReference() != null){
		var resourceAssignmentExpression = new SysMini!PartUsage;
		resourceAssignmentExpression.isReference = true;
		resourceAssignmentExpression.featureNote.add(":>");
		resourceAssignmentExpression.featureSpecialization.add("resourceAssignmentExpression");
		resourceAssignmentExpression.valuePart = s.resourceAssignmentExpression.getEReference();
		t.body.add(resourceAssignmentExpression);
	}
}

@lazy
rule PotentialOwner
	transform s : DSL!PotentialOwner
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.resourceRef.getEReference() != null){
		var resourceRef = new SysMini!PartUsage;
		resourceRef.isReference = true;
		resourceRef.featureNote.add(":>");
		resourceRef.featureSpecialization.add("resourceRef");
		resourceRef.valuePart = s.resourceRef.getEReference();
		t.body.add(resourceRef);
	}
	if (s.resourceParameterBindings.getEReference() != null){
		var resourceParameterBindings = new SysMini!PartUsage;
		resourceParameterBindings.isReference = true;
		resourceParameterBindings.featureNote.add(":>");
		resourceParameterBindings.featureSpecialization.add("resourceParameterBindings");
		resourceParameterBindings.valuePart = s.resourceParameterBindings.getEReference();
		t.body.add(resourceParameterBindings);
	}
	if (s.resourceAssignmentExpression.getEReference() != null){
		var resourceAssignmentExpression = new SysMini!PartUsage;
		resourceAssignmentExpression.isReference = true;
		resourceAssignmentExpression.featureNote.add(":>");
		resourceAssignmentExpression.featureSpecialization.add("resourceAssignmentExpression");
		resourceAssignmentExpression.valuePart = s.resourceAssignmentExpression.getEReference();
		t.body.add(resourceAssignmentExpression);
	}
}

@lazy
rule GlobalUserTask
	transform s : DSL!GlobalUserTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.implementation.getEAttribute() != null){
		var implementation = new SysMini!AttributeUsage;
		implementation.featureNote.add(":>>");
		implementation.featureSpecialization.add("implementation");
		implementation.valuePart = s.implementation.getEAttribute();
		t.body.add(implementation);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.supportedInterfaceRefs.getEReference() != null){
		var supportedInterfaceRefs = new SysMini!PartUsage;
		supportedInterfaceRefs.isReference = true;
		supportedInterfaceRefs.featureNote.add(":>");
		supportedInterfaceRefs.featureSpecialization.add("supportedInterfaceRefs");
		supportedInterfaceRefs.valuePart = s.supportedInterfaceRefs.getEReference();
		t.body.add(supportedInterfaceRefs);
	}
	if (s.ioBinding.getEReference() != null){
		var ioBinding = new SysMini!PartUsage;
		ioBinding.isReference = true;
		ioBinding.featureNote.add(":>");
		ioBinding.featureSpecialization.add("ioBinding");
		ioBinding.valuePart = s.ioBinding.getEReference();
		t.body.add(ioBinding);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.renderings.getEReference() != null){
		var renderings = new SysMini!PartUsage;
		renderings.isReference = true;
		renderings.featureNote.add(":>");
		renderings.featureSpecialization.add("renderings");
		renderings.valuePart = s.renderings.getEReference();
		t.body.add(renderings);
	}
}

@lazy
rule Gateway
	transform s : DSL!Gateway
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.gatewayDirection.getEAttribute() != null){
		var gatewayDirection = new SysMini!AttributeUsage;
		gatewayDirection.featureNote.add(":>>");
		gatewayDirection.featureSpecialization.add("gatewayDirection");
		gatewayDirection.valuePart = s.gatewayDirection.getEAttribute();
		t.body.add(gatewayDirection);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
}

@lazy
rule EventBasedGateway
	transform s : DSL!EventBasedGateway
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.gatewayDirection.getEAttribute() != null){
		var gatewayDirection = new SysMini!AttributeUsage;
		gatewayDirection.featureNote.add(":>>");
		gatewayDirection.featureSpecialization.add("gatewayDirection");
		gatewayDirection.valuePart = s.gatewayDirection.getEAttribute();
		t.body.add(gatewayDirection);
	}
	if (s.instantiate.getEAttribute() != null){
		var instantiate = new SysMini!AttributeUsage;
		instantiate.featureNote.add(":>>");
		instantiate.featureSpecialization.add("instantiate");
		instantiate.valuePart = s.instantiate.getEAttribute();
		t.body.add(instantiate);
	}
	if (s.eventGatewayType.getEAttribute() != null){
		var eventGatewayType = new SysMini!AttributeUsage;
		eventGatewayType.featureNote.add(":>>");
		eventGatewayType.featureSpecialization.add("eventGatewayType");
		eventGatewayType.valuePart = s.eventGatewayType.getEAttribute();
		t.body.add(eventGatewayType);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
}

@lazy
rule ComplexGateway
	transform s : DSL!ComplexGateway
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.gatewayDirection.getEAttribute() != null){
		var gatewayDirection = new SysMini!AttributeUsage;
		gatewayDirection.featureNote.add(":>>");
		gatewayDirection.featureSpecialization.add("gatewayDirection");
		gatewayDirection.valuePart = s.gatewayDirection.getEAttribute();
		t.body.add(gatewayDirection);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.activationCondition.getEReference() != null){
		var activationCondition = new SysMini!PartUsage;
		activationCondition.isReference = true;
		activationCondition.featureNote.add(":>");
		activationCondition.featureSpecialization.add("activationCondition");
		activationCondition.valuePart = s.activationCondition.getEReference();
		t.body.add(activationCondition);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
}

@lazy
rule ExclusiveGateway
	transform s : DSL!ExclusiveGateway
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.gatewayDirection.getEAttribute() != null){
		var gatewayDirection = new SysMini!AttributeUsage;
		gatewayDirection.featureNote.add(":>>");
		gatewayDirection.featureSpecialization.add("gatewayDirection");
		gatewayDirection.valuePart = s.gatewayDirection.getEAttribute();
		t.body.add(gatewayDirection);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
}

@lazy
rule InclusiveGateway
	transform s : DSL!InclusiveGateway
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.gatewayDirection.getEAttribute() != null){
		var gatewayDirection = new SysMini!AttributeUsage;
		gatewayDirection.featureNote.add(":>>");
		gatewayDirection.featureSpecialization.add("gatewayDirection");
		gatewayDirection.valuePart = s.gatewayDirection.getEAttribute();
		t.body.add(gatewayDirection);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
}

@lazy
rule ParallelGateway
	transform s : DSL!ParallelGateway
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.gatewayDirection.getEAttribute() != null){
		var gatewayDirection = new SysMini!AttributeUsage;
		gatewayDirection.featureNote.add(":>>");
		gatewayDirection.featureSpecialization.add("gatewayDirection");
		gatewayDirection.valuePart = s.gatewayDirection.getEAttribute();
		t.body.add(gatewayDirection);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
}

@lazy
rule Relationship
	transform s : DSL!Relationship
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.type.getEAttribute() != null){
		var type = new SysMini!AttributeUsage;
		type.featureNote.add(":>>");
		type.featureSpecialization.add("type");
		type.valuePart = s.type.getEAttribute();
		t.body.add(type);
	}
	if (s.direction.getEAttribute() != null){
		var direction = new SysMini!AttributeUsage;
		direction.featureNote.add(":>>");
		direction.featureSpecialization.add("direction");
		direction.valuePart = s.direction.getEAttribute();
		t.body.add(direction);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.sources.getEReference() != null){
		var sources = new SysMini!PartUsage;
		sources.isReference = true;
		sources.featureNote.add(":>");
		sources.featureSpecialization.add("sources");
		sources.valuePart = s.sources.getEReference();
		t.body.add(sources);
	}
	if (s.targets.getEReference() != null){
		var targets = new SysMini!PartUsage;
		targets.isReference = true;
		targets.featureNote.add(":>");
		targets.featureSpecialization.add("targets");
		targets.valuePart = s.targets.getEReference();
		t.body.add(targets);
	}
}

@lazy
rule Extension
	transform s : DSL!Extension
	to t : SysMini!PartUsage
	extends Base{
	if (s.mustUnderstand.getEAttribute() != null){
		var mustUnderstand = new SysMini!AttributeUsage;
		mustUnderstand.featureNote.add(":>>");
		mustUnderstand.featureSpecialization.add("mustUnderstand");
		mustUnderstand.valuePart = s.mustUnderstand.getEAttribute();
		t.body.add(mustUnderstand);
	}
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.definition.getEReference() != null){
		var definition = new SysMini!PartUsage;
		definition.isReference = true;
		definition.featureNote.add(":>");
		definition.featureSpecialization.add("definition");
		definition.valuePart = s.definition.getEReference();
		t.body.add(definition);
	}
}

@lazy
rule IntermediateCatchEvent
	transform s : DSL!IntermediateCatchEvent
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.parallelMultiple.getEAttribute() != null){
		var parallelMultiple = new SysMini!AttributeUsage;
		parallelMultiple.featureNote.add(":>>");
		parallelMultiple.featureSpecialization.add("parallelMultiple");
		parallelMultiple.valuePart = s.parallelMultiple.getEAttribute();
		t.body.add(parallelMultiple);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.outputSet.getEReference() != null){
		var outputSet = new SysMini!PartUsage;
		outputSet.isReference = true;
		outputSet.featureNote.add(":>");
		outputSet.featureSpecialization.add("outputSet");
		outputSet.valuePart = s.outputSet.getEReference();
		t.body.add(outputSet);
	}
	if (s.eventDefinitionRefs.getEReference() != null){
		var eventDefinitionRefs = new SysMini!PartUsage;
		eventDefinitionRefs.isReference = true;
		eventDefinitionRefs.featureNote.add(":>");
		eventDefinitionRefs.featureSpecialization.add("eventDefinitionRefs");
		eventDefinitionRefs.valuePart = s.eventDefinitionRefs.getEReference();
		t.body.add(eventDefinitionRefs);
	}
	if (s.dataOutputAssociation.getEReference() != null){
		var dataOutputAssociation = new SysMini!PartUsage;
		dataOutputAssociation.isReference = true;
		dataOutputAssociation.featureNote.add(":>");
		dataOutputAssociation.featureSpecialization.add("dataOutputAssociation");
		dataOutputAssociation.valuePart = s.dataOutputAssociation.getEReference();
		t.body.add(dataOutputAssociation);
	}
	if (s.dataOutputs.getEReference() != null){
		var dataOutputs = new SysMini!PartUsage;
		dataOutputs.isReference = true;
		dataOutputs.featureNote.add(":>");
		dataOutputs.featureSpecialization.add("dataOutputs");
		dataOutputs.valuePart = s.dataOutputs.getEReference();
		t.body.add(dataOutputs);
	}
	if (s.eventDefinitions.getEReference() != null){
		var eventDefinitions = new SysMini!PartUsage;
		eventDefinitions.isReference = true;
		eventDefinitions.featureNote.add(":>");
		eventDefinitions.featureSpecialization.add("eventDefinitions");
		eventDefinitions.valuePart = s.eventDefinitions.getEReference();
		t.body.add(eventDefinitions);
	}
}

@lazy
rule IntermediateThrowEvent
	transform s : DSL!IntermediateThrowEvent
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.inputSet.getEReference() != null){
		var inputSet = new SysMini!PartUsage;
		inputSet.isReference = true;
		inputSet.featureNote.add(":>");
		inputSet.featureSpecialization.add("inputSet");
		inputSet.valuePart = s.inputSet.getEReference();
		t.body.add(inputSet);
	}
	if (s.eventDefinitionRefs.getEReference() != null){
		var eventDefinitionRefs = new SysMini!PartUsage;
		eventDefinitionRefs.isReference = true;
		eventDefinitionRefs.featureNote.add(":>");
		eventDefinitionRefs.featureSpecialization.add("eventDefinitionRefs");
		eventDefinitionRefs.valuePart = s.eventDefinitionRefs.getEReference();
		t.body.add(eventDefinitionRefs);
	}
	if (s.dataInputAssociation.getEReference() != null){
		var dataInputAssociation = new SysMini!PartUsage;
		dataInputAssociation.isReference = true;
		dataInputAssociation.featureNote.add(":>");
		dataInputAssociation.featureSpecialization.add("dataInputAssociation");
		dataInputAssociation.valuePart = s.dataInputAssociation.getEReference();
		t.body.add(dataInputAssociation);
	}
	if (s.dataInputs.getEReference() != null){
		var dataInputs = new SysMini!PartUsage;
		dataInputs.isReference = true;
		dataInputs.featureNote.add(":>");
		dataInputs.featureSpecialization.add("dataInputs");
		dataInputs.valuePart = s.dataInputs.getEReference();
		t.body.add(dataInputs);
	}
	if (s.eventDefinitions.getEReference() != null){
		var eventDefinitions = new SysMini!PartUsage;
		eventDefinitions.isReference = true;
		eventDefinitions.featureNote.add(":>");
		eventDefinitions.featureSpecialization.add("eventDefinitions");
		eventDefinitions.valuePart = s.eventDefinitions.getEReference();
		t.body.add(eventDefinitions);
	}
}

@lazy
rule ThrowEvent
	transform s : DSL!ThrowEvent
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.inputSet.getEReference() != null){
		var inputSet = new SysMini!PartUsage;
		inputSet.isReference = true;
		inputSet.featureNote.add(":>");
		inputSet.featureSpecialization.add("inputSet");
		inputSet.valuePart = s.inputSet.getEReference();
		t.body.add(inputSet);
	}
	if (s.eventDefinitionRefs.getEReference() != null){
		var eventDefinitionRefs = new SysMini!PartUsage;
		eventDefinitionRefs.isReference = true;
		eventDefinitionRefs.featureNote.add(":>");
		eventDefinitionRefs.featureSpecialization.add("eventDefinitionRefs");
		eventDefinitionRefs.valuePart = s.eventDefinitionRefs.getEReference();
		t.body.add(eventDefinitionRefs);
	}
	if (s.dataInputAssociation.getEReference() != null){
		var dataInputAssociation = new SysMini!PartUsage;
		dataInputAssociation.isReference = true;
		dataInputAssociation.featureNote.add(":>");
		dataInputAssociation.featureSpecialization.add("dataInputAssociation");
		dataInputAssociation.valuePart = s.dataInputAssociation.getEReference();
		t.body.add(dataInputAssociation);
	}
	if (s.dataInputs.getEReference() != null){
		var dataInputs = new SysMini!PartUsage;
		dataInputs.isReference = true;
		dataInputs.featureNote.add(":>");
		dataInputs.featureSpecialization.add("dataInputs");
		dataInputs.valuePart = s.dataInputs.getEReference();
		t.body.add(dataInputs);
	}
	if (s.eventDefinitions.getEReference() != null){
		var eventDefinitions = new SysMini!PartUsage;
		eventDefinitions.isReference = true;
		eventDefinitions.featureNote.add(":>");
		eventDefinitions.featureSpecialization.add("eventDefinitions");
		eventDefinitions.valuePart = s.eventDefinitions.getEReference();
		t.body.add(eventDefinitions);
	}
}

@lazy
rule EndEvent
	transform s : DSL!EndEvent
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.inputSet.getEReference() != null){
		var inputSet = new SysMini!PartUsage;
		inputSet.isReference = true;
		inputSet.featureNote.add(":>");
		inputSet.featureSpecialization.add("inputSet");
		inputSet.valuePart = s.inputSet.getEReference();
		t.body.add(inputSet);
	}
	if (s.eventDefinitionRefs.getEReference() != null){
		var eventDefinitionRefs = new SysMini!PartUsage;
		eventDefinitionRefs.isReference = true;
		eventDefinitionRefs.featureNote.add(":>");
		eventDefinitionRefs.featureSpecialization.add("eventDefinitionRefs");
		eventDefinitionRefs.valuePart = s.eventDefinitionRefs.getEReference();
		t.body.add(eventDefinitionRefs);
	}
	if (s.dataInputAssociation.getEReference() != null){
		var dataInputAssociation = new SysMini!PartUsage;
		dataInputAssociation.isReference = true;
		dataInputAssociation.featureNote.add(":>");
		dataInputAssociation.featureSpecialization.add("dataInputAssociation");
		dataInputAssociation.valuePart = s.dataInputAssociation.getEReference();
		t.body.add(dataInputAssociation);
	}
	if (s.dataInputs.getEReference() != null){
		var dataInputs = new SysMini!PartUsage;
		dataInputs.isReference = true;
		dataInputs.featureNote.add(":>");
		dataInputs.featureSpecialization.add("dataInputs");
		dataInputs.valuePart = s.dataInputs.getEReference();
		t.body.add(dataInputs);
	}
	if (s.eventDefinitions.getEReference() != null){
		var eventDefinitions = new SysMini!PartUsage;
		eventDefinitions.isReference = true;
		eventDefinitions.featureNote.add(":>");
		eventDefinitions.featureSpecialization.add("eventDefinitions");
		eventDefinitions.valuePart = s.eventDefinitions.getEReference();
		t.body.add(eventDefinitions);
	}
}

@lazy
rule StartEvent
	transform s : DSL!StartEvent
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.parallelMultiple.getEAttribute() != null){
		var parallelMultiple = new SysMini!AttributeUsage;
		parallelMultiple.featureNote.add(":>>");
		parallelMultiple.featureSpecialization.add("parallelMultiple");
		parallelMultiple.valuePart = s.parallelMultiple.getEAttribute();
		t.body.add(parallelMultiple);
	}
	if (s.isInterrupting.getEAttribute() != null){
		var isInterrupting = new SysMini!AttributeUsage;
		isInterrupting.featureNote.add(":>>");
		isInterrupting.featureSpecialization.add("isInterrupting");
		isInterrupting.valuePart = s.isInterrupting.getEAttribute();
		t.body.add(isInterrupting);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.outputSet.getEReference() != null){
		var outputSet = new SysMini!PartUsage;
		outputSet.isReference = true;
		outputSet.featureNote.add(":>");
		outputSet.featureSpecialization.add("outputSet");
		outputSet.valuePart = s.outputSet.getEReference();
		t.body.add(outputSet);
	}
	if (s.eventDefinitionRefs.getEReference() != null){
		var eventDefinitionRefs = new SysMini!PartUsage;
		eventDefinitionRefs.isReference = true;
		eventDefinitionRefs.featureNote.add(":>");
		eventDefinitionRefs.featureSpecialization.add("eventDefinitionRefs");
		eventDefinitionRefs.valuePart = s.eventDefinitionRefs.getEReference();
		t.body.add(eventDefinitionRefs);
	}
	if (s.dataOutputAssociation.getEReference() != null){
		var dataOutputAssociation = new SysMini!PartUsage;
		dataOutputAssociation.isReference = true;
		dataOutputAssociation.featureNote.add(":>");
		dataOutputAssociation.featureSpecialization.add("dataOutputAssociation");
		dataOutputAssociation.valuePart = s.dataOutputAssociation.getEReference();
		t.body.add(dataOutputAssociation);
	}
	if (s.dataOutputs.getEReference() != null){
		var dataOutputs = new SysMini!PartUsage;
		dataOutputs.isReference = true;
		dataOutputs.featureNote.add(":>");
		dataOutputs.featureSpecialization.add("dataOutputs");
		dataOutputs.valuePart = s.dataOutputs.getEReference();
		t.body.add(dataOutputs);
	}
	if (s.eventDefinitions.getEReference() != null){
		var eventDefinitions = new SysMini!PartUsage;
		eventDefinitions.isReference = true;
		eventDefinitions.featureNote.add(":>");
		eventDefinitions.featureSpecialization.add("eventDefinitions");
		eventDefinitions.valuePart = s.eventDefinitions.getEReference();
		t.body.add(eventDefinitions);
	}
}

@lazy
rule CancelEventDefinition
	transform s : DSL!CancelEventDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule ErrorEventDefinition
	transform s : DSL!ErrorEventDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.errorRef.getEReference() != null){
		var errorRef = new SysMini!PartUsage;
		errorRef.isReference = true;
		errorRef.featureNote.add(":>");
		errorRef.featureSpecialization.add("errorRef");
		errorRef.valuePart = s.errorRef.getEReference();
		t.body.add(errorRef);
	}
}

@lazy
rule TerminateEventDefinition
	transform s : DSL!TerminateEventDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule EscalationEventDefinition
	transform s : DSL!EscalationEventDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.escalationRef.getEReference() != null){
		var escalationRef = new SysMini!PartUsage;
		escalationRef.isReference = true;
		escalationRef.featureNote.add(":>");
		escalationRef.featureSpecialization.add("escalationRef");
		escalationRef.valuePart = s.escalationRef.getEReference();
		t.body.add(escalationRef);
	}
}

@lazy
rule Escalation
	transform s : DSL!Escalation
	to t : SysMini!PartUsage
	extends Base{
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.escalationCode.getEAttribute() != null){
		var escalationCode = new SysMini!AttributeUsage;
		escalationCode.featureNote.add(":>>");
		escalationCode.featureSpecialization.add("escalationCode");
		escalationCode.valuePart = s.escalationCode.getEAttribute();
		t.body.add(escalationCode);
	}
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.structureRef.getEReference() != null){
		var structureRef = new SysMini!PartUsage;
		structureRef.isReference = true;
		structureRef.featureNote.add(":>");
		structureRef.featureSpecialization.add("structureRef");
		structureRef.valuePart = s.structureRef.getEReference();
		t.body.add(structureRef);
	}
}

@lazy
rule CompensateEventDefinition
	transform s : DSL!CompensateEventDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.waitForCompletion.getEAttribute() != null){
		var waitForCompletion = new SysMini!AttributeUsage;
		waitForCompletion.featureNote.add(":>>");
		waitForCompletion.featureSpecialization.add("waitForCompletion");
		waitForCompletion.valuePart = s.waitForCompletion.getEAttribute();
		t.body.add(waitForCompletion);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.activityRef.getEReference() != null){
		var activityRef = new SysMini!PartUsage;
		activityRef.isReference = true;
		activityRef.featureNote.add(":>");
		activityRef.featureSpecialization.add("activityRef");
		activityRef.valuePart = s.activityRef.getEReference();
		t.body.add(activityRef);
	}
}

@lazy
rule TimerEventDefinition
	transform s : DSL!TimerEventDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.timeDate.getEReference() != null){
		var timeDate = new SysMini!PartUsage;
		timeDate.isReference = true;
		timeDate.featureNote.add(":>");
		timeDate.featureSpecialization.add("timeDate");
		timeDate.valuePart = s.timeDate.getEReference();
		t.body.add(timeDate);
	}
	if (s.timeCycle.getEReference() != null){
		var timeCycle = new SysMini!PartUsage;
		timeCycle.isReference = true;
		timeCycle.featureNote.add(":>");
		timeCycle.featureSpecialization.add("timeCycle");
		timeCycle.valuePart = s.timeCycle.getEReference();
		t.body.add(timeCycle);
	}
	if (s.timeDuration.getEReference() != null){
		var timeDuration = new SysMini!PartUsage;
		timeDuration.isReference = true;
		timeDuration.featureNote.add(":>");
		timeDuration.featureSpecialization.add("timeDuration");
		timeDuration.valuePart = s.timeDuration.getEReference();
		t.body.add(timeDuration);
	}
}

@lazy
rule LinkEventDefinition
	transform s : DSL!LinkEventDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.target.getEReference() != null){
		var target = new SysMini!PartUsage;
		target.isReference = true;
		target.featureNote.add(":>");
		target.featureSpecialization.add("target");
		target.valuePart = s.target.getEReference();
		t.body.add(target);
	}
	if (s.source.getEReference() != null){
		var source = new SysMini!PartUsage;
		source.isReference = true;
		source.featureNote.add(":>");
		source.featureSpecialization.add("source");
		source.valuePart = s.source.getEReference();
		t.body.add(source);
	}
}

@lazy
rule MessageEventDefinition
	transform s : DSL!MessageEventDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.messageRef.getEReference() != null){
		var messageRef = new SysMini!PartUsage;
		messageRef.isReference = true;
		messageRef.featureNote.add(":>");
		messageRef.featureSpecialization.add("messageRef");
		messageRef.valuePart = s.messageRef.getEReference();
		t.body.add(messageRef);
	}
	if (s.operationRef.getEReference() != null){
		var operationRef = new SysMini!PartUsage;
		operationRef.isReference = true;
		operationRef.featureNote.add(":>");
		operationRef.featureSpecialization.add("operationRef");
		operationRef.valuePart = s.operationRef.getEReference();
		t.body.add(operationRef);
	}
}

@lazy
rule ConditionalEventDefinition
	transform s : DSL!ConditionalEventDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.condition.getEReference() != null){
		var condition = new SysMini!PartUsage;
		condition.isReference = true;
		condition.featureNote.add(":>");
		condition.featureSpecialization.add("condition");
		condition.valuePart = s.condition.getEReference();
		t.body.add(condition);
	}
}

@lazy
rule SignalEventDefinition
	transform s : DSL!SignalEventDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.signalRef.getEReference() != null){
		var signalRef = new SysMini!PartUsage;
		signalRef.isReference = true;
		signalRef.featureNote.add(":>");
		signalRef.featureSpecialization.add("signalRef");
		signalRef.valuePart = s.signalRef.getEReference();
		t.body.add(signalRef);
	}
}

@lazy
rule Signal
	transform s : DSL!Signal
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.structureRef.getEReference() != null){
		var structureRef = new SysMini!PartUsage;
		structureRef.isReference = true;
		structureRef.featureNote.add(":>");
		structureRef.featureSpecialization.add("structureRef");
		structureRef.valuePart = s.structureRef.getEReference();
		t.body.add(structureRef);
	}
}

@lazy
rule ImplicitThrowEvent
	transform s : DSL!ImplicitThrowEvent
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.inputSet.getEReference() != null){
		var inputSet = new SysMini!PartUsage;
		inputSet.isReference = true;
		inputSet.featureNote.add(":>");
		inputSet.featureSpecialization.add("inputSet");
		inputSet.valuePart = s.inputSet.getEReference();
		t.body.add(inputSet);
	}
	if (s.eventDefinitionRefs.getEReference() != null){
		var eventDefinitionRefs = new SysMini!PartUsage;
		eventDefinitionRefs.isReference = true;
		eventDefinitionRefs.featureNote.add(":>");
		eventDefinitionRefs.featureSpecialization.add("eventDefinitionRefs");
		eventDefinitionRefs.valuePart = s.eventDefinitionRefs.getEReference();
		t.body.add(eventDefinitionRefs);
	}
	if (s.dataInputAssociation.getEReference() != null){
		var dataInputAssociation = new SysMini!PartUsage;
		dataInputAssociation.isReference = true;
		dataInputAssociation.featureNote.add(":>");
		dataInputAssociation.featureSpecialization.add("dataInputAssociation");
		dataInputAssociation.valuePart = s.dataInputAssociation.getEReference();
		t.body.add(dataInputAssociation);
	}
	if (s.dataInputs.getEReference() != null){
		var dataInputs = new SysMini!PartUsage;
		dataInputs.isReference = true;
		dataInputs.featureNote.add(":>");
		dataInputs.featureSpecialization.add("dataInputs");
		dataInputs.valuePart = s.dataInputs.getEReference();
		t.body.add(dataInputs);
	}
	if (s.eventDefinitions.getEReference() != null){
		var eventDefinitions = new SysMini!PartUsage;
		eventDefinitions.isReference = true;
		eventDefinitions.featureNote.add(":>");
		eventDefinitions.featureSpecialization.add("eventDefinitions");
		eventDefinitions.valuePart = s.eventDefinitions.getEReference();
		t.body.add(eventDefinitions);
	}
}

@lazy
rule DataObject
	transform s : DSL!DataObject
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isCollection.getEAttribute() != null){
		var isCollection = new SysMini!AttributeUsage;
		isCollection.featureNote.add(":>>");
		isCollection.featureSpecialization.add("isCollection");
		isCollection.valuePart = s.isCollection.getEAttribute();
		t.body.add(isCollection);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.itemSubjectRef.getEReference() != null){
		var itemSubjectRef = new SysMini!PartUsage;
		itemSubjectRef.isReference = true;
		itemSubjectRef.featureNote.add(":>");
		itemSubjectRef.featureSpecialization.add("itemSubjectRef");
		itemSubjectRef.valuePart = s.itemSubjectRef.getEReference();
		t.body.add(itemSubjectRef);
	}
	if (s.dataState.getEReference() != null){
		var dataState = new SysMini!PartUsage;
		dataState.isReference = true;
		dataState.featureNote.add(":>");
		dataState.featureSpecialization.add("dataState");
		dataState.valuePart = s.dataState.getEReference();
		t.body.add(dataState);
	}
}

@lazy
rule DataStore
	transform s : DSL!DataStore
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.capacity.getEAttribute() != null){
		var capacity = new SysMini!AttributeUsage;
		capacity.featureNote.add(":>>");
		capacity.featureSpecialization.add("capacity");
		capacity.valuePart = s.capacity.getEAttribute();
		t.body.add(capacity);
	}
	if (s.isUnlimited.getEAttribute() != null){
		var isUnlimited = new SysMini!AttributeUsage;
		isUnlimited.featureNote.add(":>>");
		isUnlimited.featureSpecialization.add("isUnlimited");
		isUnlimited.valuePart = s.isUnlimited.getEAttribute();
		t.body.add(isUnlimited);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.itemSubjectRef.getEReference() != null){
		var itemSubjectRef = new SysMini!PartUsage;
		itemSubjectRef.isReference = true;
		itemSubjectRef.featureNote.add(":>");
		itemSubjectRef.featureSpecialization.add("itemSubjectRef");
		itemSubjectRef.valuePart = s.itemSubjectRef.getEReference();
		t.body.add(itemSubjectRef);
	}
	if (s.dataState.getEReference() != null){
		var dataState = new SysMini!PartUsage;
		dataState.isReference = true;
		dataState.featureNote.add(":>");
		dataState.featureSpecialization.add("dataState");
		dataState.valuePart = s.dataState.getEReference();
		t.body.add(dataState);
	}
}

@lazy
rule DataStoreReference
	transform s : DSL!DataStoreReference
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.itemSubjectRef.getEReference() != null){
		var itemSubjectRef = new SysMini!PartUsage;
		itemSubjectRef.isReference = true;
		itemSubjectRef.featureNote.add(":>");
		itemSubjectRef.featureSpecialization.add("itemSubjectRef");
		itemSubjectRef.valuePart = s.itemSubjectRef.getEReference();
		t.body.add(itemSubjectRef);
	}
	if (s.dataState.getEReference() != null){
		var dataState = new SysMini!PartUsage;
		dataState.isReference = true;
		dataState.featureNote.add(":>");
		dataState.featureSpecialization.add("dataState");
		dataState.valuePart = s.dataState.getEReference();
		t.body.add(dataState);
	}
	if (s.dataStoreRef.getEReference() != null){
		var dataStoreRef = new SysMini!PartUsage;
		dataStoreRef.isReference = true;
		dataStoreRef.featureNote.add(":>");
		dataStoreRef.featureSpecialization.add("dataStoreRef");
		dataStoreRef.valuePart = s.dataStoreRef.getEReference();
		t.body.add(dataStoreRef);
	}
}

@lazy
rule DataObjectReference
	transform s : DSL!DataObjectReference
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.itemSubjectRef.getEReference() != null){
		var itemSubjectRef = new SysMini!PartUsage;
		itemSubjectRef.isReference = true;
		itemSubjectRef.featureNote.add(":>");
		itemSubjectRef.featureSpecialization.add("itemSubjectRef");
		itemSubjectRef.valuePart = s.itemSubjectRef.getEReference();
		t.body.add(itemSubjectRef);
	}
	if (s.dataState.getEReference() != null){
		var dataState = new SysMini!PartUsage;
		dataState.isReference = true;
		dataState.featureNote.add(":>");
		dataState.featureSpecialization.add("dataState");
		dataState.valuePart = s.dataState.getEReference();
		t.body.add(dataState);
	}
	if (s.dataObjectRef.getEReference() != null){
		var dataObjectRef = new SysMini!PartUsage;
		dataObjectRef.isReference = true;
		dataObjectRef.featureNote.add(":>");
		dataObjectRef.featureSpecialization.add("dataObjectRef");
		dataObjectRef.valuePart = s.dataObjectRef.getEReference();
		t.body.add(dataObjectRef);
	}
}

@lazy
rule CallConversation
	transform s : DSL!CallConversation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.participantRefs.getEReference() != null){
		var participantRefs = new SysMini!PartUsage;
		participantRefs.isReference = true;
		participantRefs.featureNote.add(":>");
		participantRefs.featureSpecialization.add("participantRefs");
		participantRefs.valuePart = s.participantRefs.getEReference();
		t.body.add(participantRefs);
	}
	if (s.messageFlowRefs.getEReference() != null){
		var messageFlowRefs = new SysMini!PartUsage;
		messageFlowRefs.isReference = true;
		messageFlowRefs.featureNote.add(":>");
		messageFlowRefs.featureSpecialization.add("messageFlowRefs");
		messageFlowRefs.valuePart = s.messageFlowRefs.getEReference();
		t.body.add(messageFlowRefs);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
	if (s.calledCollaborationRef.getEReference() != null){
		var calledCollaborationRef = new SysMini!PartUsage;
		calledCollaborationRef.isReference = true;
		calledCollaborationRef.featureNote.add(":>");
		calledCollaborationRef.featureSpecialization.add("calledCollaborationRef");
		calledCollaborationRef.valuePart = s.calledCollaborationRef.getEReference();
		t.body.add(calledCollaborationRef);
	}
	if (s.participantAssociations.getEReference() != null){
		var participantAssociations = new SysMini!PartUsage;
		participantAssociations.isReference = true;
		participantAssociations.featureNote.add(":>");
		participantAssociations.featureSpecialization.add("participantAssociations");
		participantAssociations.valuePart = s.participantAssociations.getEReference();
		t.body.add(participantAssociations);
	}
}

@lazy
rule Conversation
	transform s : DSL!Conversation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.participantRefs.getEReference() != null){
		var participantRefs = new SysMini!PartUsage;
		participantRefs.isReference = true;
		participantRefs.featureNote.add(":>");
		participantRefs.featureSpecialization.add("participantRefs");
		participantRefs.valuePart = s.participantRefs.getEReference();
		t.body.add(participantRefs);
	}
	if (s.messageFlowRefs.getEReference() != null){
		var messageFlowRefs = new SysMini!PartUsage;
		messageFlowRefs.isReference = true;
		messageFlowRefs.featureNote.add(":>");
		messageFlowRefs.featureSpecialization.add("messageFlowRefs");
		messageFlowRefs.valuePart = s.messageFlowRefs.getEReference();
		t.body.add(messageFlowRefs);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
}

@lazy
rule SubConversation
	transform s : DSL!SubConversation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.participantRefs.getEReference() != null){
		var participantRefs = new SysMini!PartUsage;
		participantRefs.isReference = true;
		participantRefs.featureNote.add(":>");
		participantRefs.featureSpecialization.add("participantRefs");
		participantRefs.valuePart = s.participantRefs.getEReference();
		t.body.add(participantRefs);
	}
	if (s.messageFlowRefs.getEReference() != null){
		var messageFlowRefs = new SysMini!PartUsage;
		messageFlowRefs.isReference = true;
		messageFlowRefs.featureNote.add(":>");
		messageFlowRefs.featureSpecialization.add("messageFlowRefs");
		messageFlowRefs.valuePart = s.messageFlowRefs.getEReference();
		t.body.add(messageFlowRefs);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
	if (s.conversationNodes.getEReference() != null){
		var conversationNodes = new SysMini!PartUsage;
		conversationNodes.isReference = true;
		conversationNodes.featureNote.add(":>");
		conversationNodes.featureSpecialization.add("conversationNodes");
		conversationNodes.valuePart = s.conversationNodes.getEReference();
		t.body.add(conversationNodes);
	}
}

@lazy
rule GlobalConversation
	transform s : DSL!GlobalConversation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isClosed.getEAttribute() != null){
		var isClosed = new SysMini!AttributeUsage;
		isClosed.featureNote.add(":>>");
		isClosed.featureSpecialization.add("isClosed");
		isClosed.valuePart = s.isClosed.getEAttribute();
		t.body.add(isClosed);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.choreographyRef.getEReference() != null){
		var choreographyRef = new SysMini!PartUsage;
		choreographyRef.isReference = true;
		choreographyRef.featureNote.add(":>");
		choreographyRef.featureSpecialization.add("choreographyRef");
		choreographyRef.valuePart = s.choreographyRef.getEReference();
		t.body.add(choreographyRef);
	}
	if (s.artifacts.getEReference() != null){
		var artifacts = new SysMini!PartUsage;
		artifacts.isReference = true;
		artifacts.featureNote.add(":>");
		artifacts.featureSpecialization.add("artifacts");
		artifacts.valuePart = s.artifacts.getEReference();
		t.body.add(artifacts);
	}
	if (s.participantAssociations.getEReference() != null){
		var participantAssociations = new SysMini!PartUsage;
		participantAssociations.isReference = true;
		participantAssociations.featureNote.add(":>");
		participantAssociations.featureSpecialization.add("participantAssociations");
		participantAssociations.valuePart = s.participantAssociations.getEReference();
		t.body.add(participantAssociations);
	}
	if (s.messageFlowAssociations.getEReference() != null){
		var messageFlowAssociations = new SysMini!PartUsage;
		messageFlowAssociations.isReference = true;
		messageFlowAssociations.featureNote.add(":>");
		messageFlowAssociations.featureSpecialization.add("messageFlowAssociations");
		messageFlowAssociations.valuePart = s.messageFlowAssociations.getEReference();
		t.body.add(messageFlowAssociations);
	}
	if (s.conversationAssociations.getEReference() != null){
		var conversationAssociations = new SysMini!PartUsage;
		conversationAssociations.isReference = true;
		conversationAssociations.featureNote.add(":>");
		conversationAssociations.featureSpecialization.add("conversationAssociations");
		conversationAssociations.valuePart = s.conversationAssociations.getEReference();
		t.body.add(conversationAssociations);
	}
	if (s.participants.getEReference() != null){
		var participants = new SysMini!PartUsage;
		participants.isReference = true;
		participants.featureNote.add(":>");
		participants.featureSpecialization.add("participants");
		participants.valuePart = s.participants.getEReference();
		t.body.add(participants);
	}
	if (s.messageFlows.getEReference() != null){
		var messageFlows = new SysMini!PartUsage;
		messageFlows.isReference = true;
		messageFlows.featureNote.add(":>");
		messageFlows.featureSpecialization.add("messageFlows");
		messageFlows.valuePart = s.messageFlows.getEReference();
		t.body.add(messageFlows);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
	if (s.conversations.getEReference() != null){
		var conversations = new SysMini!PartUsage;
		conversations.isReference = true;
		conversations.featureNote.add(":>");
		conversations.featureSpecialization.add("conversations");
		conversations.valuePart = s.conversations.getEReference();
		t.body.add(conversations);
	}
	if (s.conversationLinks.getEReference() != null){
		var conversationLinks = new SysMini!PartUsage;
		conversationLinks.isReference = true;
		conversationLinks.featureNote.add(":>");
		conversationLinks.featureSpecialization.add("conversationLinks");
		conversationLinks.valuePart = s.conversationLinks.getEReference();
		t.body.add(conversationLinks);
	}
}

@lazy
rule PartnerEntity
	transform s : DSL!PartnerEntity
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.participantRef.getEReference() != null){
		var participantRef = new SysMini!PartUsage;
		participantRef.isReference = true;
		participantRef.featureNote.add(":>");
		participantRef.featureSpecialization.add("participantRef");
		participantRef.valuePart = s.participantRef.getEReference();
		t.body.add(participantRef);
	}
}

@lazy
rule PartnerRole
	transform s : DSL!PartnerRole
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.participantRef.getEReference() != null){
		var participantRef = new SysMini!PartUsage;
		participantRef.isReference = true;
		participantRef.featureNote.add(":>");
		participantRef.featureSpecialization.add("participantRef");
		participantRef.valuePart = s.participantRef.getEReference();
		t.body.add(participantRef);
	}
}

@lazy
rule ChoreographyActivity
	transform s : DSL!ChoreographyActivity
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.loopType.getEAttribute() != null){
		var loopType = new SysMini!AttributeUsage;
		loopType.featureNote.add(":>>");
		loopType.featureSpecialization.add("loopType");
		loopType.valuePart = s.loopType.getEAttribute();
		t.body.add(loopType);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.participantRefs.getEReference() != null){
		var participantRefs = new SysMini!PartUsage;
		participantRefs.isReference = true;
		participantRefs.featureNote.add(":>");
		participantRefs.featureSpecialization.add("participantRefs");
		participantRefs.valuePart = s.participantRefs.getEReference();
		t.body.add(participantRefs);
	}
	if (s.initiatingParticipantRef.getEReference() != null){
		var initiatingParticipantRef = new SysMini!PartUsage;
		initiatingParticipantRef.isReference = true;
		initiatingParticipantRef.featureNote.add(":>");
		initiatingParticipantRef.featureSpecialization.add("initiatingParticipantRef");
		initiatingParticipantRef.valuePart = s.initiatingParticipantRef.getEReference();
		t.body.add(initiatingParticipantRef);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
}

@lazy
rule CallChoreography
	transform s : DSL!CallChoreography
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.loopType.getEAttribute() != null){
		var loopType = new SysMini!AttributeUsage;
		loopType.featureNote.add(":>>");
		loopType.featureSpecialization.add("loopType");
		loopType.valuePart = s.loopType.getEAttribute();
		t.body.add(loopType);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.participantRefs.getEReference() != null){
		var participantRefs = new SysMini!PartUsage;
		participantRefs.isReference = true;
		participantRefs.featureNote.add(":>");
		participantRefs.featureSpecialization.add("participantRefs");
		participantRefs.valuePart = s.participantRefs.getEReference();
		t.body.add(participantRefs);
	}
	if (s.initiatingParticipantRef.getEReference() != null){
		var initiatingParticipantRef = new SysMini!PartUsage;
		initiatingParticipantRef.isReference = true;
		initiatingParticipantRef.featureNote.add(":>");
		initiatingParticipantRef.featureSpecialization.add("initiatingParticipantRef");
		initiatingParticipantRef.valuePart = s.initiatingParticipantRef.getEReference();
		t.body.add(initiatingParticipantRef);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
	if (s.calledChoreographyRef.getEReference() != null){
		var calledChoreographyRef = new SysMini!PartUsage;
		calledChoreographyRef.isReference = true;
		calledChoreographyRef.featureNote.add(":>");
		calledChoreographyRef.featureSpecialization.add("calledChoreographyRef");
		calledChoreographyRef.valuePart = s.calledChoreographyRef.getEReference();
		t.body.add(calledChoreographyRef);
	}
	if (s.participantAssociations.getEReference() != null){
		var participantAssociations = new SysMini!PartUsage;
		participantAssociations.isReference = true;
		participantAssociations.featureNote.add(":>");
		participantAssociations.featureSpecialization.add("participantAssociations");
		participantAssociations.valuePart = s.participantAssociations.getEReference();
		t.body.add(participantAssociations);
	}
}

@lazy
rule SubChoreography
	transform s : DSL!SubChoreography
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.loopType.getEAttribute() != null){
		var loopType = new SysMini!AttributeUsage;
		loopType.featureNote.add(":>>");
		loopType.featureSpecialization.add("loopType");
		loopType.valuePart = s.loopType.getEAttribute();
		t.body.add(loopType);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.participantRefs.getEReference() != null){
		var participantRefs = new SysMini!PartUsage;
		participantRefs.isReference = true;
		participantRefs.featureNote.add(":>");
		participantRefs.featureSpecialization.add("participantRefs");
		participantRefs.valuePart = s.participantRefs.getEReference();
		t.body.add(participantRefs);
	}
	if (s.initiatingParticipantRef.getEReference() != null){
		var initiatingParticipantRef = new SysMini!PartUsage;
		initiatingParticipantRef.isReference = true;
		initiatingParticipantRef.featureNote.add(":>");
		initiatingParticipantRef.featureSpecialization.add("initiatingParticipantRef");
		initiatingParticipantRef.valuePart = s.initiatingParticipantRef.getEReference();
		t.body.add(initiatingParticipantRef);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
	if (s.flowElements.getEReference() != null){
		var flowElements = new SysMini!PartUsage;
		flowElements.isReference = true;
		flowElements.featureNote.add(":>");
		flowElements.featureSpecialization.add("flowElements");
		flowElements.valuePart = s.flowElements.getEReference();
		t.body.add(flowElements);
	}
	if (s.laneSets.getEReference() != null){
		var laneSets = new SysMini!PartUsage;
		laneSets.isReference = true;
		laneSets.featureNote.add(":>");
		laneSets.featureSpecialization.add("laneSets");
		laneSets.valuePart = s.laneSets.getEReference();
		t.body.add(laneSets);
	}
	if (s.artifacts.getEReference() != null){
		var artifacts = new SysMini!PartUsage;
		artifacts.isReference = true;
		artifacts.featureNote.add(":>");
		artifacts.featureSpecialization.add("artifacts");
		artifacts.valuePart = s.artifacts.getEReference();
		t.body.add(artifacts);
	}
}

@lazy
rule ChoreographyTask
	transform s : DSL!ChoreographyTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.loopType.getEAttribute() != null){
		var loopType = new SysMini!AttributeUsage;
		loopType.featureNote.add(":>>");
		loopType.featureSpecialization.add("loopType");
		loopType.valuePart = s.loopType.getEAttribute();
		t.body.add(loopType);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.participantRefs.getEReference() != null){
		var participantRefs = new SysMini!PartUsage;
		participantRefs.isReference = true;
		participantRefs.featureNote.add(":>");
		participantRefs.featureSpecialization.add("participantRefs");
		participantRefs.valuePart = s.participantRefs.getEReference();
		t.body.add(participantRefs);
	}
	if (s.initiatingParticipantRef.getEReference() != null){
		var initiatingParticipantRef = new SysMini!PartUsage;
		initiatingParticipantRef.isReference = true;
		initiatingParticipantRef.featureNote.add(":>");
		initiatingParticipantRef.featureSpecialization.add("initiatingParticipantRef");
		initiatingParticipantRef.valuePart = s.initiatingParticipantRef.getEReference();
		t.body.add(initiatingParticipantRef);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
	if (s.messageFlowRef.getEReference() != null){
		var messageFlowRef = new SysMini!PartUsage;
		messageFlowRef.isReference = true;
		messageFlowRef.featureNote.add(":>");
		messageFlowRef.featureSpecialization.add("messageFlowRef");
		messageFlowRef.valuePart = s.messageFlowRef.getEReference();
		t.body.add(messageFlowRef);
	}
}

@lazy
rule GlobalChoreographyTask
	transform s : DSL!GlobalChoreographyTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isClosed.getEAttribute() != null){
		var isClosed = new SysMini!AttributeUsage;
		isClosed.featureNote.add(":>>");
		isClosed.featureSpecialization.add("isClosed");
		isClosed.valuePart = s.isClosed.getEAttribute();
		t.body.add(isClosed);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.choreographyRef.getEReference() != null){
		var choreographyRef = new SysMini!PartUsage;
		choreographyRef.isReference = true;
		choreographyRef.featureNote.add(":>");
		choreographyRef.featureSpecialization.add("choreographyRef");
		choreographyRef.valuePart = s.choreographyRef.getEReference();
		t.body.add(choreographyRef);
	}
	if (s.artifacts.getEReference() != null){
		var artifacts = new SysMini!PartUsage;
		artifacts.isReference = true;
		artifacts.featureNote.add(":>");
		artifacts.featureSpecialization.add("artifacts");
		artifacts.valuePart = s.artifacts.getEReference();
		t.body.add(artifacts);
	}
	if (s.participantAssociations.getEReference() != null){
		var participantAssociations = new SysMini!PartUsage;
		participantAssociations.isReference = true;
		participantAssociations.featureNote.add(":>");
		participantAssociations.featureSpecialization.add("participantAssociations");
		participantAssociations.valuePart = s.participantAssociations.getEReference();
		t.body.add(participantAssociations);
	}
	if (s.messageFlowAssociations.getEReference() != null){
		var messageFlowAssociations = new SysMini!PartUsage;
		messageFlowAssociations.isReference = true;
		messageFlowAssociations.featureNote.add(":>");
		messageFlowAssociations.featureSpecialization.add("messageFlowAssociations");
		messageFlowAssociations.valuePart = s.messageFlowAssociations.getEReference();
		t.body.add(messageFlowAssociations);
	}
	if (s.conversationAssociations.getEReference() != null){
		var conversationAssociations = new SysMini!PartUsage;
		conversationAssociations.isReference = true;
		conversationAssociations.featureNote.add(":>");
		conversationAssociations.featureSpecialization.add("conversationAssociations");
		conversationAssociations.valuePart = s.conversationAssociations.getEReference();
		t.body.add(conversationAssociations);
	}
	if (s.participants.getEReference() != null){
		var participants = new SysMini!PartUsage;
		participants.isReference = true;
		participants.featureNote.add(":>");
		participants.featureSpecialization.add("participants");
		participants.valuePart = s.participants.getEReference();
		t.body.add(participants);
	}
	if (s.messageFlows.getEReference() != null){
		var messageFlows = new SysMini!PartUsage;
		messageFlows.isReference = true;
		messageFlows.featureNote.add(":>");
		messageFlows.featureSpecialization.add("messageFlows");
		messageFlows.valuePart = s.messageFlows.getEReference();
		t.body.add(messageFlows);
	}
	if (s.correlationKeys.getEReference() != null){
		var correlationKeys = new SysMini!PartUsage;
		correlationKeys.isReference = true;
		correlationKeys.featureNote.add(":>");
		correlationKeys.featureSpecialization.add("correlationKeys");
		correlationKeys.valuePart = s.correlationKeys.getEReference();
		t.body.add(correlationKeys);
	}
	if (s.conversations.getEReference() != null){
		var conversations = new SysMini!PartUsage;
		conversations.isReference = true;
		conversations.featureNote.add(":>");
		conversations.featureSpecialization.add("conversations");
		conversations.valuePart = s.conversations.getEReference();
		t.body.add(conversations);
	}
	if (s.conversationLinks.getEReference() != null){
		var conversationLinks = new SysMini!PartUsage;
		conversationLinks.isReference = true;
		conversationLinks.featureNote.add(":>");
		conversationLinks.featureSpecialization.add("conversationLinks");
		conversationLinks.valuePart = s.conversationLinks.getEReference();
		t.body.add(conversationLinks);
	}
	if (s.flowElements.getEReference() != null){
		var flowElements = new SysMini!PartUsage;
		flowElements.isReference = true;
		flowElements.featureNote.add(":>");
		flowElements.featureSpecialization.add("flowElements");
		flowElements.valuePart = s.flowElements.getEReference();
		t.body.add(flowElements);
	}
	if (s.laneSets.getEReference() != null){
		var laneSets = new SysMini!PartUsage;
		laneSets.isReference = true;
		laneSets.featureNote.add(":>");
		laneSets.featureSpecialization.add("laneSets");
		laneSets.valuePart = s.laneSets.getEReference();
		t.body.add(laneSets);
	}
	if (s.initiatingParticipantRef.getEReference() != null){
		var initiatingParticipantRef = new SysMini!PartUsage;
		initiatingParticipantRef.isReference = true;
		initiatingParticipantRef.featureNote.add(":>");
		initiatingParticipantRef.featureSpecialization.add("initiatingParticipantRef");
		initiatingParticipantRef.valuePart = s.initiatingParticipantRef.getEReference();
		t.body.add(initiatingParticipantRef);
	}
}

@lazy
rule TextAnnotation
	transform s : DSL!TextAnnotation
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.text.getEAttribute() != null){
		var text = new SysMini!AttributeUsage;
		text.featureNote.add(":>>");
		text.featureSpecialization.add("text");
		text.valuePart = s.text.getEAttribute();
		t.body.add(text);
	}
	if (s.textFormat.getEAttribute() != null){
		var textFormat = new SysMini!AttributeUsage;
		textFormat.featureNote.add(":>>");
		textFormat.featureSpecialization.add("textFormat");
		textFormat.valuePart = s.textFormat.getEAttribute();
		t.body.add(textFormat);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
}

@lazy
rule Group
	transform s : DSL!Group
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
}

@lazy
rule Association
	transform s : DSL!Association
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.associationDirection.getEAttribute() != null){
		var associationDirection = new SysMini!AttributeUsage;
		associationDirection.featureNote.add(":>>");
		associationDirection.featureSpecialization.add("associationDirection");
		associationDirection.valuePart = s.associationDirection.getEAttribute();
		t.body.add(associationDirection);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.sourceRef.getEReference() != null){
		var sourceRef = new SysMini!PartUsage;
		sourceRef.isReference = true;
		sourceRef.featureNote.add(":>");
		sourceRef.featureSpecialization.add("sourceRef");
		sourceRef.valuePart = s.sourceRef.getEReference();
		t.body.add(sourceRef);
	}
	if (s.targetRef.getEReference() != null){
		var targetRef = new SysMini!PartUsage;
		targetRef.isReference = true;
		targetRef.featureNote.add(":>");
		targetRef.featureSpecialization.add("targetRef");
		targetRef.valuePart = s.targetRef.getEReference();
		t.body.add(targetRef);
	}
}

@lazy
rule Category
	transform s : DSL!Category
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.categoryValue.getEReference() != null){
		var categoryValue = new SysMini!PartUsage;
		categoryValue.isReference = true;
		categoryValue.featureNote.add(":>");
		categoryValue.featureSpecialization.add("categoryValue");
		categoryValue.valuePart = s.categoryValue.getEReference();
		t.body.add(categoryValue);
	}
}

@lazy
rule ServiceTask
	transform s : DSL!ServiceTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.implementation.getEAttribute() != null){
		var implementation = new SysMini!AttributeUsage;
		implementation.featureNote.add(":>>");
		implementation.featureSpecialization.add("implementation");
		implementation.valuePart = s.implementation.getEAttribute();
		t.body.add(implementation);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
	if (s.operationRef.getEReference() != null){
		var operationRef = new SysMini!PartUsage;
		operationRef.isReference = true;
		operationRef.featureNote.add(":>");
		operationRef.featureSpecialization.add("operationRef");
		operationRef.valuePart = s.operationRef.getEReference();
		t.body.add(operationRef);
	}
}

@lazy
rule SubProcess
	transform s : DSL!SubProcess
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.triggeredByEvent.getEAttribute() != null){
		var triggeredByEvent = new SysMini!AttributeUsage;
		triggeredByEvent.featureNote.add(":>>");
		triggeredByEvent.featureSpecialization.add("triggeredByEvent");
		triggeredByEvent.valuePart = s.triggeredByEvent.getEAttribute();
		t.body.add(triggeredByEvent);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
	if (s.flowElements.getEReference() != null){
		var flowElements = new SysMini!PartUsage;
		flowElements.isReference = true;
		flowElements.featureNote.add(":>");
		flowElements.featureSpecialization.add("flowElements");
		flowElements.valuePart = s.flowElements.getEReference();
		t.body.add(flowElements);
	}
	if (s.laneSets.getEReference() != null){
		var laneSets = new SysMini!PartUsage;
		laneSets.isReference = true;
		laneSets.featureNote.add(":>");
		laneSets.featureSpecialization.add("laneSets");
		laneSets.valuePart = s.laneSets.getEReference();
		t.body.add(laneSets);
	}
	if (s.artifacts.getEReference() != null){
		var artifacts = new SysMini!PartUsage;
		artifacts.isReference = true;
		artifacts.featureNote.add(":>");
		artifacts.featureSpecialization.add("artifacts");
		artifacts.valuePart = s.artifacts.getEReference();
		t.body.add(artifacts);
	}
}

@lazy
rule MultiInstanceLoopCharacteristics
	transform s : DSL!MultiInstanceLoopCharacteristics
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.isSequential.getEAttribute() != null){
		var isSequential = new SysMini!AttributeUsage;
		isSequential.featureNote.add(":>>");
		isSequential.featureSpecialization.add("isSequential");
		isSequential.valuePart = s.isSequential.getEAttribute();
		t.body.add(isSequential);
	}
	if (s.behavior.getEAttribute() != null){
		var behavior = new SysMini!AttributeUsage;
		behavior.featureNote.add(":>>");
		behavior.featureSpecialization.add("behavior");
		behavior.valuePart = s.behavior.getEAttribute();
		t.body.add(behavior);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.loopCardinality.getEReference() != null){
		var loopCardinality = new SysMini!PartUsage;
		loopCardinality.isReference = true;
		loopCardinality.featureNote.add(":>");
		loopCardinality.featureSpecialization.add("loopCardinality");
		loopCardinality.valuePart = s.loopCardinality.getEReference();
		t.body.add(loopCardinality);
	}
	if (s.loopDataInputRef.getEReference() != null){
		var loopDataInputRef = new SysMini!PartUsage;
		loopDataInputRef.isReference = true;
		loopDataInputRef.featureNote.add(":>");
		loopDataInputRef.featureSpecialization.add("loopDataInputRef");
		loopDataInputRef.valuePart = s.loopDataInputRef.getEReference();
		t.body.add(loopDataInputRef);
	}
	if (s.loopDataOutputRef.getEReference() != null){
		var loopDataOutputRef = new SysMini!PartUsage;
		loopDataOutputRef.isReference = true;
		loopDataOutputRef.featureNote.add(":>");
		loopDataOutputRef.featureSpecialization.add("loopDataOutputRef");
		loopDataOutputRef.valuePart = s.loopDataOutputRef.getEReference();
		t.body.add(loopDataOutputRef);
	}
	if (s.inputDataItem.getEReference() != null){
		var inputDataItem = new SysMini!PartUsage;
		inputDataItem.isReference = true;
		inputDataItem.featureNote.add(":>");
		inputDataItem.featureSpecialization.add("inputDataItem");
		inputDataItem.valuePart = s.inputDataItem.getEReference();
		t.body.add(inputDataItem);
	}
	if (s.outputDataItem.getEReference() != null){
		var outputDataItem = new SysMini!PartUsage;
		outputDataItem.isReference = true;
		outputDataItem.featureNote.add(":>");
		outputDataItem.featureSpecialization.add("outputDataItem");
		outputDataItem.valuePart = s.outputDataItem.getEReference();
		t.body.add(outputDataItem);
	}
	if (s.completionCondition.getEReference() != null){
		var completionCondition = new SysMini!PartUsage;
		completionCondition.isReference = true;
		completionCondition.featureNote.add(":>");
		completionCondition.featureSpecialization.add("completionCondition");
		completionCondition.valuePart = s.completionCondition.getEReference();
		t.body.add(completionCondition);
	}
	if (s.complexBehaviorDefinition.getEReference() != null){
		var complexBehaviorDefinition = new SysMini!PartUsage;
		complexBehaviorDefinition.isReference = true;
		complexBehaviorDefinition.featureNote.add(":>");
		complexBehaviorDefinition.featureSpecialization.add("complexBehaviorDefinition");
		complexBehaviorDefinition.valuePart = s.complexBehaviorDefinition.getEReference();
		t.body.add(complexBehaviorDefinition);
	}
	if (s.oneBehaviorEventRef.getEReference() != null){
		var oneBehaviorEventRef = new SysMini!PartUsage;
		oneBehaviorEventRef.isReference = true;
		oneBehaviorEventRef.featureNote.add(":>");
		oneBehaviorEventRef.featureSpecialization.add("oneBehaviorEventRef");
		oneBehaviorEventRef.valuePart = s.oneBehaviorEventRef.getEReference();
		t.body.add(oneBehaviorEventRef);
	}
	if (s.noneBehaviorEventRef.getEReference() != null){
		var noneBehaviorEventRef = new SysMini!PartUsage;
		noneBehaviorEventRef.isReference = true;
		noneBehaviorEventRef.featureNote.add(":>");
		noneBehaviorEventRef.featureSpecialization.add("noneBehaviorEventRef");
		noneBehaviorEventRef.valuePart = s.noneBehaviorEventRef.getEReference();
		t.body.add(noneBehaviorEventRef);
	}
}

@lazy
rule ComplexBehaviorDefinition
	transform s : DSL!ComplexBehaviorDefinition
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.condition.getEReference() != null){
		var condition = new SysMini!PartUsage;
		condition.isReference = true;
		condition.featureNote.add(":>");
		condition.featureSpecialization.add("condition");
		condition.valuePart = s.condition.getEReference();
		t.body.add(condition);
	}
	if (s.event.getEReference() != null){
		var event = new SysMini!PartUsage;
		event.isReference = true;
		event.featureNote.add(":>");
		event.featureSpecialization.add("event");
		event.valuePart = s.event.getEReference();
		t.body.add(event);
	}
}

@lazy
rule StandardLoopCharacteristics
	transform s : DSL!StandardLoopCharacteristics
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.testBefore.getEAttribute() != null){
		var testBefore = new SysMini!AttributeUsage;
		testBefore.featureNote.add(":>>");
		testBefore.featureSpecialization.add("testBefore");
		testBefore.valuePart = s.testBefore.getEAttribute();
		t.body.add(testBefore);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.loopCondition.getEReference() != null){
		var loopCondition = new SysMini!PartUsage;
		loopCondition.isReference = true;
		loopCondition.featureNote.add(":>");
		loopCondition.featureSpecialization.add("loopCondition");
		loopCondition.valuePart = s.loopCondition.getEReference();
		t.body.add(loopCondition);
	}
	if (s.loopMaximum.getEReference() != null){
		var loopMaximum = new SysMini!PartUsage;
		loopMaximum.isReference = true;
		loopMaximum.featureNote.add(":>");
		loopMaximum.featureSpecialization.add("loopMaximum");
		loopMaximum.valuePart = s.loopMaximum.getEReference();
		t.body.add(loopMaximum);
	}
}

@lazy
rule CallActivity
	transform s : DSL!CallActivity
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
	if (s.calledElementRef.getEReference() != null){
		var calledElementRef = new SysMini!PartUsage;
		calledElementRef.isReference = true;
		calledElementRef.featureNote.add(":>");
		calledElementRef.featureSpecialization.add("calledElementRef");
		calledElementRef.valuePart = s.calledElementRef.getEReference();
		t.body.add(calledElementRef);
	}
}

@lazy
rule SendTask
	transform s : DSL!SendTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.implementation.getEAttribute() != null){
		var implementation = new SysMini!AttributeUsage;
		implementation.featureNote.add(":>>");
		implementation.featureSpecialization.add("implementation");
		implementation.valuePart = s.implementation.getEAttribute();
		t.body.add(implementation);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
	if (s.operationRef.getEReference() != null){
		var operationRef = new SysMini!PartUsage;
		operationRef.isReference = true;
		operationRef.featureNote.add(":>");
		operationRef.featureSpecialization.add("operationRef");
		operationRef.valuePart = s.operationRef.getEReference();
		t.body.add(operationRef);
	}
	if (s.messageRef.getEReference() != null){
		var messageRef = new SysMini!PartUsage;
		messageRef.isReference = true;
		messageRef.featureNote.add(":>");
		messageRef.featureSpecialization.add("messageRef");
		messageRef.valuePart = s.messageRef.getEReference();
		t.body.add(messageRef);
	}
}

@lazy
rule ReceiveTask
	transform s : DSL!ReceiveTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.implementation.getEAttribute() != null){
		var implementation = new SysMini!AttributeUsage;
		implementation.featureNote.add(":>>");
		implementation.featureSpecialization.add("implementation");
		implementation.valuePart = s.implementation.getEAttribute();
		t.body.add(implementation);
	}
	if (s.instantiate.getEAttribute() != null){
		var instantiate = new SysMini!AttributeUsage;
		instantiate.featureNote.add(":>>");
		instantiate.featureSpecialization.add("instantiate");
		instantiate.valuePart = s.instantiate.getEAttribute();
		t.body.add(instantiate);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
	if (s.operationRef.getEReference() != null){
		var operationRef = new SysMini!PartUsage;
		operationRef.isReference = true;
		operationRef.featureNote.add(":>");
		operationRef.featureSpecialization.add("operationRef");
		operationRef.valuePart = s.operationRef.getEReference();
		t.body.add(operationRef);
	}
	if (s.messageRef.getEReference() != null){
		var messageRef = new SysMini!PartUsage;
		messageRef.isReference = true;
		messageRef.featureNote.add(":>");
		messageRef.featureSpecialization.add("messageRef");
		messageRef.valuePart = s.messageRef.getEReference();
		t.body.add(messageRef);
	}
}

@lazy
rule ScriptTask
	transform s : DSL!ScriptTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.scriptFormat.getEAttribute() != null){
		var scriptFormat = new SysMini!AttributeUsage;
		scriptFormat.featureNote.add(":>>");
		scriptFormat.featureSpecialization.add("scriptFormat");
		scriptFormat.valuePart = s.scriptFormat.getEAttribute();
		t.body.add(scriptFormat);
	}
	if (s.script.getEAttribute() != null){
		var script = new SysMini!AttributeUsage;
		script.featureNote.add(":>>");
		script.featureSpecialization.add("script");
		script.valuePart = s.script.getEAttribute();
		t.body.add(script);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
}

@lazy
rule BusinessRuleTask
	transform s : DSL!BusinessRuleTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.implementation.getEAttribute() != null){
		var implementation = new SysMini!AttributeUsage;
		implementation.featureNote.add(":>>");
		implementation.featureSpecialization.add("implementation");
		implementation.valuePart = s.implementation.getEAttribute();
		t.body.add(implementation);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
}

@lazy
rule AdHocSubProcess
	transform s : DSL!AdHocSubProcess
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.triggeredByEvent.getEAttribute() != null){
		var triggeredByEvent = new SysMini!AttributeUsage;
		triggeredByEvent.featureNote.add(":>>");
		triggeredByEvent.featureSpecialization.add("triggeredByEvent");
		triggeredByEvent.valuePart = s.triggeredByEvent.getEAttribute();
		t.body.add(triggeredByEvent);
	}
	if (s.ordering.getEAttribute() != null){
		var ordering = new SysMini!AttributeUsage;
		ordering.featureNote.add(":>>");
		ordering.featureSpecialization.add("ordering");
		ordering.valuePart = s.ordering.getEAttribute();
		t.body.add(ordering);
	}
	if (s.cancelRemainingInstances.getEAttribute() != null){
		var cancelRemainingInstances = new SysMini!AttributeUsage;
		cancelRemainingInstances.featureNote.add(":>>");
		cancelRemainingInstances.featureSpecialization.add("cancelRemainingInstances");
		cancelRemainingInstances.valuePart = s.cancelRemainingInstances.getEAttribute();
		t.body.add(cancelRemainingInstances);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
	if (s.flowElements.getEReference() != null){
		var flowElements = new SysMini!PartUsage;
		flowElements.isReference = true;
		flowElements.featureNote.add(":>");
		flowElements.featureSpecialization.add("flowElements");
		flowElements.valuePart = s.flowElements.getEReference();
		t.body.add(flowElements);
	}
	if (s.laneSets.getEReference() != null){
		var laneSets = new SysMini!PartUsage;
		laneSets.isReference = true;
		laneSets.featureNote.add(":>");
		laneSets.featureSpecialization.add("laneSets");
		laneSets.valuePart = s.laneSets.getEReference();
		t.body.add(laneSets);
	}
	if (s.artifacts.getEReference() != null){
		var artifacts = new SysMini!PartUsage;
		artifacts.isReference = true;
		artifacts.featureNote.add(":>");
		artifacts.featureSpecialization.add("artifacts");
		artifacts.valuePart = s.artifacts.getEReference();
		t.body.add(artifacts);
	}
	if (s.completionCondition.getEReference() != null){
		var completionCondition = new SysMini!PartUsage;
		completionCondition.isReference = true;
		completionCondition.featureNote.add(":>");
		completionCondition.featureSpecialization.add("completionCondition");
		completionCondition.valuePart = s.completionCondition.getEReference();
		t.body.add(completionCondition);
	}
}

@lazy
rule Transaction
	transform s : DSL!Transaction
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.isForCompensation.getEAttribute() != null){
		var isForCompensation = new SysMini!AttributeUsage;
		isForCompensation.featureNote.add(":>>");
		isForCompensation.featureSpecialization.add("isForCompensation");
		isForCompensation.valuePart = s.isForCompensation.getEAttribute();
		t.body.add(isForCompensation);
	}
	if (s.startQuantity.getEAttribute() != null){
		var startQuantity = new SysMini!AttributeUsage;
		startQuantity.featureNote.add(":>>");
		startQuantity.featureSpecialization.add("startQuantity");
		startQuantity.valuePart = s.startQuantity.getEAttribute();
		t.body.add(startQuantity);
	}
	if (s.completionQuantity.getEAttribute() != null){
		var completionQuantity = new SysMini!AttributeUsage;
		completionQuantity.featureNote.add(":>>");
		completionQuantity.featureSpecialization.add("completionQuantity");
		completionQuantity.valuePart = s.completionQuantity.getEAttribute();
		t.body.add(completionQuantity);
	}
	if (s.triggeredByEvent.getEAttribute() != null){
		var triggeredByEvent = new SysMini!AttributeUsage;
		triggeredByEvent.featureNote.add(":>>");
		triggeredByEvent.featureSpecialization.add("triggeredByEvent");
		triggeredByEvent.valuePart = s.triggeredByEvent.getEAttribute();
		t.body.add(triggeredByEvent);
	}
	if (s.protocol.getEAttribute() != null){
		var protocol = new SysMini!AttributeUsage;
		protocol.featureNote.add(":>>");
		protocol.featureSpecialization.add("protocol");
		protocol.valuePart = s.protocol.getEAttribute();
		t.body.add(protocol);
	}
	if (s.method.getEAttribute() != null){
		var method = new SysMini!AttributeUsage;
		method.featureNote.add(":>>");
		method.featureSpecialization.add("method");
		method.valuePart = s.method.getEAttribute();
		t.body.add(method);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.auditing.getEReference() != null){
		var auditing = new SysMini!PartUsage;
		auditing.isReference = true;
		auditing.featureNote.add(":>");
		auditing.featureSpecialization.add("auditing");
		auditing.valuePart = s.auditing.getEReference();
		t.body.add(auditing);
	}
	if (s.monitoring.getEReference() != null){
		var monitoring = new SysMini!PartUsage;
		monitoring.isReference = true;
		monitoring.featureNote.add(":>");
		monitoring.featureSpecialization.add("monitoring");
		monitoring.valuePart = s.monitoring.getEReference();
		t.body.add(monitoring);
	}
	if (s.categoryValueRef.getEReference() != null){
		var categoryValueRef = new SysMini!PartUsage;
		categoryValueRef.isReference = true;
		categoryValueRef.featureNote.add(":>");
		categoryValueRef.featureSpecialization.add("categoryValueRef");
		categoryValueRef.valuePart = s.categoryValueRef.getEReference();
		t.body.add(categoryValueRef);
	}
	if (s.outgoing.getEReference() != null){
		var outgoing = new SysMini!PartUsage;
		outgoing.isReference = true;
		outgoing.featureNote.add(":>");
		outgoing.featureSpecialization.add("outgoing");
		outgoing.valuePart = s.outgoing.getEReference();
		t.body.add(outgoing);
	}
	if (s.incoming.getEReference() != null){
		var incoming = new SysMini!PartUsage;
		incoming.isReference = true;
		incoming.featureNote.add(":>");
		incoming.featureSpecialization.add("incoming");
		incoming.valuePart = s.incoming.getEReference();
		t.body.add(incoming);
	}
	if (s.lanes.getEReference() != null){
		var lanes = new SysMini!PartUsage;
		lanes.isReference = true;
		lanes.featureNote.add(":>");
		lanes.featureSpecialization.add("lanes");
		lanes.valuePart = s.lanes.getEReference();
		t.body.add(lanes);
	}
	if (s.incomingConversationLinks.getEReference() != null){
		var incomingConversationLinks = new SysMini!PartUsage;
		incomingConversationLinks.isReference = true;
		incomingConversationLinks.featureNote.add(":>");
		incomingConversationLinks.featureSpecialization.add("incomingConversationLinks");
		incomingConversationLinks.valuePart = s.incomingConversationLinks.getEReference();
		t.body.add(incomingConversationLinks);
	}
	if (s.outgoingConversationLinks.getEReference() != null){
		var outgoingConversationLinks = new SysMini!PartUsage;
		outgoingConversationLinks.isReference = true;
		outgoingConversationLinks.featureNote.add(":>");
		outgoingConversationLinks.featureSpecialization.add("outgoingConversationLinks");
		outgoingConversationLinks.valuePart = s.outgoingConversationLinks.getEReference();
		t.body.add(outgoingConversationLinks);
	}
	if (s.loopCharacteristics.getEReference() != null){
		var loopCharacteristics = new SysMini!PartUsage;
		loopCharacteristics.isReference = true;
		loopCharacteristics.featureNote.add(":>");
		loopCharacteristics.featureSpecialization.add("loopCharacteristics");
		loopCharacteristics.valuePart = s.loopCharacteristics.getEReference();
		t.body.add(loopCharacteristics);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
	if (s.~default.getEReference() != null){
		var default_ = new SysMini!PartUsage;
		default_.isReference = true;
		default_.featureNote.add(":>");
		default_.featureSpecialization.add("'default'");
		default_.valuePart = s.default_.getEReference();
		t.body.add(default_);
	}
	if (s.properties.getEReference() != null){
		var properties = new SysMini!PartUsage;
		properties.isReference = true;
		properties.featureNote.add(":>");
		properties.featureSpecialization.add("properties");
		properties.valuePart = s.properties.getEReference();
		t.body.add(properties);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.boundaryEventRefs.getEReference() != null){
		var boundaryEventRefs = new SysMini!PartUsage;
		boundaryEventRefs.isReference = true;
		boundaryEventRefs.featureNote.add(":>");
		boundaryEventRefs.featureSpecialization.add("boundaryEventRefs");
		boundaryEventRefs.valuePart = s.boundaryEventRefs.getEReference();
		t.body.add(boundaryEventRefs);
	}
	if (s.dataInputAssociations.getEReference() != null){
		var dataInputAssociations = new SysMini!PartUsage;
		dataInputAssociations.isReference = true;
		dataInputAssociations.featureNote.add(":>");
		dataInputAssociations.featureSpecialization.add("dataInputAssociations");
		dataInputAssociations.valuePart = s.dataInputAssociations.getEReference();
		t.body.add(dataInputAssociations);
	}
	if (s.dataOutputAssociations.getEReference() != null){
		var dataOutputAssociations = new SysMini!PartUsage;
		dataOutputAssociations.isReference = true;
		dataOutputAssociations.featureNote.add(":>");
		dataOutputAssociations.featureSpecialization.add("dataOutputAssociations");
		dataOutputAssociations.valuePart = s.dataOutputAssociations.getEReference();
		t.body.add(dataOutputAssociations);
	}
	if (s.flowElements.getEReference() != null){
		var flowElements = new SysMini!PartUsage;
		flowElements.isReference = true;
		flowElements.featureNote.add(":>");
		flowElements.featureSpecialization.add("flowElements");
		flowElements.valuePart = s.flowElements.getEReference();
		t.body.add(flowElements);
	}
	if (s.laneSets.getEReference() != null){
		var laneSets = new SysMini!PartUsage;
		laneSets.isReference = true;
		laneSets.featureNote.add(":>");
		laneSets.featureSpecialization.add("laneSets");
		laneSets.valuePart = s.laneSets.getEReference();
		t.body.add(laneSets);
	}
	if (s.artifacts.getEReference() != null){
		var artifacts = new SysMini!PartUsage;
		artifacts.isReference = true;
		artifacts.featureNote.add(":>");
		artifacts.featureSpecialization.add("artifacts");
		artifacts.valuePart = s.artifacts.getEReference();
		t.body.add(artifacts);
	}
}

@lazy
rule GlobalScriptTask
	transform s : DSL!GlobalScriptTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.scriptLanguage.getEAttribute() != null){
		var scriptLanguage = new SysMini!AttributeUsage;
		scriptLanguage.featureNote.add(":>>");
		scriptLanguage.featureSpecialization.add("scriptLanguage");
		scriptLanguage.valuePart = s.scriptLanguage.getEAttribute();
		t.body.add(scriptLanguage);
	}
	if (s.script.getEAttribute() != null){
		var script = new SysMini!AttributeUsage;
		script.featureNote.add(":>>");
		script.featureSpecialization.add("script");
		script.valuePart = s.script.getEAttribute();
		t.body.add(script);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.supportedInterfaceRefs.getEReference() != null){
		var supportedInterfaceRefs = new SysMini!PartUsage;
		supportedInterfaceRefs.isReference = true;
		supportedInterfaceRefs.featureNote.add(":>");
		supportedInterfaceRefs.featureSpecialization.add("supportedInterfaceRefs");
		supportedInterfaceRefs.valuePart = s.supportedInterfaceRefs.getEReference();
		t.body.add(supportedInterfaceRefs);
	}
	if (s.ioBinding.getEReference() != null){
		var ioBinding = new SysMini!PartUsage;
		ioBinding.isReference = true;
		ioBinding.featureNote.add(":>");
		ioBinding.featureSpecialization.add("ioBinding");
		ioBinding.valuePart = s.ioBinding.getEReference();
		t.body.add(ioBinding);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
}

@lazy
rule GlobalBusinessRuleTask
	transform s : DSL!GlobalBusinessRuleTask
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.implementation.getEAttribute() != null){
		var implementation = new SysMini!AttributeUsage;
		implementation.featureNote.add(":>>");
		implementation.featureSpecialization.add("implementation");
		implementation.valuePart = s.implementation.getEAttribute();
		t.body.add(implementation);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.ioSpecification.getEReference() != null){
		var ioSpecification = new SysMini!PartUsage;
		ioSpecification.isReference = true;
		ioSpecification.featureNote.add(":>");
		ioSpecification.featureSpecialization.add("ioSpecification");
		ioSpecification.valuePart = s.ioSpecification.getEReference();
		t.body.add(ioSpecification);
	}
	if (s.supportedInterfaceRefs.getEReference() != null){
		var supportedInterfaceRefs = new SysMini!PartUsage;
		supportedInterfaceRefs.isReference = true;
		supportedInterfaceRefs.featureNote.add(":>");
		supportedInterfaceRefs.featureSpecialization.add("supportedInterfaceRefs");
		supportedInterfaceRefs.valuePart = s.supportedInterfaceRefs.getEReference();
		t.body.add(supportedInterfaceRefs);
	}
	if (s.ioBinding.getEReference() != null){
		var ioBinding = new SysMini!PartUsage;
		ioBinding.isReference = true;
		ioBinding.featureNote.add(":>");
		ioBinding.featureSpecialization.add("ioBinding");
		ioBinding.valuePart = s.ioBinding.getEReference();
		t.body.add(ioBinding);
	}
	if (s.resources.getEReference() != null){
		var resources = new SysMini!PartUsage;
		resources.isReference = true;
		resources.featureNote.add(":>");
		resources.featureSpecialization.add("resources");
		resources.valuePart = s.resources.getEReference();
		t.body.add(resources);
	}
}

@lazy
rule Definitions
	transform s : DSL!Definitions
	to t : SysMini!PartUsage
	extends Base{
	if (s.id.getEAttribute() != null){
		var id = new SysMini!AttributeUsage;
		id.featureNote.add(":>>");
		id.featureSpecialization.add("id");
		id.valuePart = s.id.getEAttribute();
		t.body.add(id);
	}
	if (s.description.getEAttribute() != null){
		var description = new SysMini!AttributeUsage;
		description.featureNote.add(":>>");
		description.featureSpecialization.add("description");
		description.valuePart = s.description.getEAttribute();
		t.body.add(description);
	}
	if (s.name.getEAttribute() != null){
		var name = new SysMini!AttributeUsage;
		name.featureNote.add(":>>");
		name.featureSpecialization.add("name");
		name.valuePart = s.name.getEAttribute();
		t.body.add(name);
	}
	if (s.targetNamespace.getEAttribute() != null){
		var targetNamespace = new SysMini!AttributeUsage;
		targetNamespace.featureNote.add(":>>");
		targetNamespace.featureSpecialization.add("targetNamespace");
		targetNamespace.valuePart = s.targetNamespace.getEAttribute();
		t.body.add(targetNamespace);
	}
	if (s.expressionLanguage.getEAttribute() != null){
		var expressionLanguage = new SysMini!AttributeUsage;
		expressionLanguage.featureNote.add(":>>");
		expressionLanguage.featureSpecialization.add("expressionLanguage");
		expressionLanguage.valuePart = s.expressionLanguage.getEAttribute();
		t.body.add(expressionLanguage);
	}
	if (s.typeLanguage.getEAttribute() != null){
		var typeLanguage = new SysMini!AttributeUsage;
		typeLanguage.featureNote.add(":>>");
		typeLanguage.featureSpecialization.add("typeLanguage");
		typeLanguage.valuePart = s.typeLanguage.getEAttribute();
		t.body.add(typeLanguage);
	}
	if (s.exporter.getEAttribute() != null){
		var exporter = new SysMini!AttributeUsage;
		exporter.featureNote.add(":>>");
		exporter.featureSpecialization.add("exporter");
		exporter.valuePart = s.exporter.getEAttribute();
		t.body.add(exporter);
	}
	if (s.exporterVersion.getEAttribute() != null){
		var exporterVersion = new SysMini!AttributeUsage;
		exporterVersion.featureNote.add(":>>");
		exporterVersion.featureSpecialization.add("exporterVersion");
		exporterVersion.valuePart = s.exporterVersion.getEAttribute();
		t.body.add(exporterVersion);
	}
	if (s.extensionDefinitions.getEReference() != null){
		var extensionDefinitions = new SysMini!PartUsage;
		extensionDefinitions.isReference = true;
		extensionDefinitions.featureNote.add(":>");
		extensionDefinitions.featureSpecialization.add("extensionDefinitions");
		extensionDefinitions.valuePart = s.extensionDefinitions.getEReference();
		t.body.add(extensionDefinitions);
	}
	if (s.extensionValues.getEReference() != null){
		var extensionValues = new SysMini!PartUsage;
		extensionValues.isReference = true;
		extensionValues.featureNote.add(":>");
		extensionValues.featureSpecialization.add("extensionValues");
		extensionValues.valuePart = s.extensionValues.getEReference();
		t.body.add(extensionValues);
	}
	if (s.documentation.getEReference() != null){
		var documentation = new SysMini!PartUsage;
		documentation.isReference = true;
		documentation.featureNote.add(":>");
		documentation.featureSpecialization.add("documentation");
		documentation.valuePart = s.documentation.getEReference();
		t.body.add(documentation);
	}
	if (s.imports.getEReference() != null){
		var imports = new SysMini!PartUsage;
		imports.isReference = true;
		imports.featureNote.add(":>");
		imports.featureSpecialization.add("imports");
		imports.valuePart = s.imports.getEReference();
		t.body.add(imports);
	}
	if (s.extensions.getEReference() != null){
		var extensions = new SysMini!PartUsage;
		extensions.isReference = true;
		extensions.featureNote.add(":>");
		extensions.featureSpecialization.add("extensions");
		extensions.valuePart = s.extensions.getEReference();
		t.body.add(extensions);
	}
	if (s.relationships.getEReference() != null){
		var relationships = new SysMini!PartUsage;
		relationships.isReference = true;
		relationships.featureNote.add(":>");
		relationships.featureSpecialization.add("relationships");
		relationships.valuePart = s.relationships.getEReference();
		t.body.add(relationships);
	}
	if (s.rootElements.getEReference() != null){
		var rootElements = new SysMini!PartUsage;
		rootElements.isReference = true;
		rootElements.featureNote.add(":>");
		rootElements.featureSpecialization.add("rootElements");
		rootElements.valuePart = s.rootElements.getEReference();
		t.body.add(rootElements);
	}
	if (s.diagrams.getEReference() != null){
		var diagrams = new SysMini!PartUsage;
		diagrams.isReference = true;
		diagrams.featureNote.add(":>");
		diagrams.featureSpecialization.add("diagrams");
		diagrams.valuePart = s.diagrams.getEReference();
		t.body.add(diagrams);
	}
}
