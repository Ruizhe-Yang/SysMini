[% import "SysMini2SysML-util.eol"; %]
package [%=root.body.first().declaredName%] {
[%for (element in root.body.first().body){%]
[%=element.getContent("", 1)%]
[%}%]
}

[%
operation SysMini!Element getContent(content: String, layer: Integer) : String {
	content += self.getTab(layer);
	content += self.matchType();
	if (self.body.size()>0){
		content += "{\n";
		for (child in self.body){
			content = child.getContent(content, layer+1);
			content += "\n";
		}
		content += self.getTab(layer)+"}";
	}
	else {
		if (content.endsWith(" ")){
			content = content.substring(0, content.length()-1);
		}
		if (not content.endsWith("*\\")){
			content += ";";
		}
	}
	return content;
}

operation SysMini!Element getTab(layer : Integer) : String {
	var tab = "";
	for (i in 1.to(layer)){
		tab += "\t";
	}
	return tab;
}

operation SysMini!Element matchType() : String {
	switch (self.type().name){
		
		//Package
		case "Package":                      return self.Package();
		case "LibraryPackage":               return self.LibraryPackage();
		
		//Import
		case "NamespaceImport":              return self.NamespaceImport();
		case "NamespaceExpose":              return self.NamespaceExpose();
		case "MembershipImport":             return self.MembershipImport();
		case "MembershipExpose":             return self.MembershipExpose();
		
		//Package
		case "Dependency":                   return self.Dependency();
		
		//AnnotatingElement
		case "Comment":                      return self.Comment();
		case "Documentation":                return self.Documentation();
		case "TextualRepresentation":        return self.TextualRepresentation();
		
		// Definition
		case "AttributeDefinition":          return self.AttributeDefinition();
		case "EnumerationDefinition":        return self.EnumerationDefinition();
		case "OccurrenceDefinition":         return self.OccurrenceDefinition();
//		case "IndividualDefinition":         return self.IndividualDefinition();
		case "ItemDefinition":               return self.ItemDefinition();
		case "MetadataDefinition":           return self.MetadataDefinition();
		case "PartDefinition":               return self.PartDefinition();
		case "ConnectionDefinition":         return self.ConnectionDefinition();
		case "FlowConnectionDefinition":     return self.FlowConnectionDefinition();
		case "InterfaceDefinition":          return self.InterfaceDefinition();
		case "AllocationDefinition":         return self.AllocationDefinition();
		case "PortDefinition":               return self.PortDefinition();
		case "ActionDefinition":             return self.ActionDefinition();
		case "CalculationDefinition":        return self.CalculationDefinition();
		case "StateDefinition":              return self.StateDefinition();
		case "ConstraintDefinition":         return self.ConstraintDefinition();
		case "RequirementDefinition":        return self.RequirementDefinition();
		case "ConcernDefinition":            return self.ConcernDefinition();
		case "CaseDefinition":               return self.CaseDefinition();
		case "AnalysisCaseDefinition":       return self.AnalysisCaseDefinition();
		case "VerificationCaseDefinition":   return self.VerificationCaseDefinition();
		case "UseCaseDefinition":            return self.UseCaseDefinition();
		case "ViewDefinition":               return self.ViewDefinition();
		case "ViewpointDefinition":          return self.ViewpointDefinition();
		case "RenderingDefinition":          return self.RenderingDefinition();
//		case "ExtendedDefinition":           return self.ExtendedDefinition();
		
		// Usage
		// Usage(NonOccurrenceUsageElement)
		case "ReferenceUsage":               return self.ReferenceUsage();
		case "AttributeUsage":               return self.AttributeUsage();
		case "EnumerationUsage":             return self.EnumerationUsage();
		case "BindingConnectorAsUsage":      return self.BindingConnectorAsUsage();
		case "SuccessionAsUsage":            return self.SuccessionAsUsage();
		
		// Usage(OccurrenceUsageElement/StructureUsageElement)
		case "OccurrenceUsage":              return self.OccurrenceUsage();
//		case "IndividualUsage":              return self.IndividualUsage();
//		case "PortionUsage":                 return self.PortionUsage();
		case "EventOccurrenceUsage":         return self.EventOccurrenceUsage();
		case "ItemUsage":                    return self.ItemUsage();
		case "PartUsage":                    return self.PartUsage();
		case "ViewUsage":                    return self.ViewUsage();
		case "RenderingUsage":               return self.RenderingUsage();
		case "PortUsage":                    return self.PortUsage();
		case "ConnectionUsage":              return self.ConnectionUsage();
		case "InterfaceUsage":               return self.InterfaceUsage();
		case "AllocationUsage":              return self.AllocationUsage();
//		case "Message":                      return self.Message();
		case "FlowConnectionUsage":          return self.FlowConnectionUsage();
		case "SuccessionFlowConnectionUsage":return self.SuccessionFlowConnectionUsage();
		
		// Usage(OccurrenceUsageElement/BehaviorUsageElement)
		case "ActionUsage":                  return self.ActionUsage();
		case "CalculationUsage":             return self.CalculationUsage();
		case "StateUsage":                   return self.StateUsage();
		case "ConstraintUsage":              return self.ConstraintUsage();
		case "RequirementUsage":             return self.RequirementUsage();
		case "ConcernUsage":                 return self.ConcernUsage();
		case "CaseUsage":                    return self.CaseUsage();
		case "AnalysisCaseUsage":            return self.AnalysisCaseUsage();
		case "VerificationCaseUsage":        return self.VerificationCaseUsage();
		case "UseCaseUsage":                 return self.UseCaseUsage();
		case "ViewpointUsage":               return self.ViewpointUsage();
		case "PerformActionUsage":           return self.PerformActionUsage();
		case "ExhibitStateUsage":            return self.ExhibitStateUsage();
		case "IncludeUseCaseUsage":          return self.IncludeUseCaseUsage();
		case "AssertConstraintUsage":        return self.AssertConstraintUsage();
		case "SatisfyRequirementUsage":      return self.SatisfyRequirementUsage();
	}
	return "";
}
%]