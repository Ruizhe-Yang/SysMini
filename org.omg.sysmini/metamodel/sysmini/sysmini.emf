package sysmini;

abstract class Element {
	attr boolean[1] hasVisibility = false;
	attr VisibilityKind[1] visibility;
	attr String declaredName;
	attr String declaredShortName;
	attr boolean[1] isWell = false;
	attr String sysmini_self;
	ref Element#body root;
	ordered val Element[*]#root body;
}

class Subclassification extends Specialization {
	attr String[*] superclassifier;
}

class Specialization extends Relationship {
}

abstract class Relationship extends Element {
}

class DefinitionElement extends Element{
	
}

class OwningMembership extends Membership {
	attr String[1] ownedMemberElementId;
	attr String ownedMemberShortName;
	attr String ownedMemberName;
}

class Membership extends Relationship {
	attr String memberShortName;
	attr String memberName;
}

class Namespace extends Element {
}

abstract class Import extends Relationship {
	attr boolean[1] isRecursive = false;
	attr boolean[1] isImportAll = false;
}

enum VisibilityKind {
	private = 0;
	protected = 1;
	public = 2;
}

class Documentation extends Comment {
	attr boolean[1] isDoc = false;
}

class Comment extends AnnotatingElement {
	attr boolean[1] isCommentName = false;
	attr String[*] isAbout;
	attr String locale;
}

class AnnotatingElement extends Element {
	attr String text;
}

class Annotation extends Relationship {
	attr String type_;
}

class TextualRepresentation extends AnnotatingElement {
	attr boolean[1] isRep = false;
	attr String language;
}

class Type extends Namespace {
	attr boolean[1] isAbstract = false;
	attr boolean[1] isSufficient = false;
	attr boolean[1] isConjugated;
}

class FeatureMembership extends OwningMembership, Featuring {
}

abstract class Featuring extends Relationship {
}

class Feature extends Type {
	attr boolean[1] isUnique = true;
	attr boolean[1] isOrdered = false;
	attr boolean[1] isComposite = false;
	attr boolean[1] isEnd = false;
	attr boolean[1] isDerived = false;
	attr boolean[1] isReadOnly = false;
	attr boolean[1] isPortion = false;
	attr boolean[1] isNonunique = false;
	attr FeatureDirectionKind direction;
}

class Redefinition extends Subsetting {
}

class Subsetting extends Specialization {
	attr String feature;
}

class FeatureTyping extends Specialization {
	attr String type_;
}

class TypeFeaturing extends Featuring {
}

class FeatureInverting extends Relationship {
}

class FeatureChaining extends Relationship {
}

enum FeatureDirectionKind {
	in = 0;
	inout = 1;
	out = 2;
}

class ReferenceSubsetting extends Subsetting {
}

class Conjugation extends Relationship {
}

class Multiplicity extends Feature {
}

class Intersecting extends Relationship {
}

class Unioning extends Relationship {
}

class Disjoining extends Relationship {
}

class Differencing extends Relationship {
}

class Classifier extends Type {
}

class EndFeatureMembership extends FeatureMembership {
}

class Package extends Namespace {
	attr String[*] type_;
}

class Expression extends Step {
	attr boolean[1] isModelLevelEvaluable;
}

class Step extends Feature {
}

class Behavior extends Class {
}

class Class extends Classifier {
}

class Function extends Behavior {
	attr boolean[1] isModelLevelEvaluable;
}

class LibraryPackage extends Package {
	attr boolean[1] isStandard = false;
}

class ElementFilterMembership extends OwningMembership {
}

class LiteralRational extends LiteralExpression {
	attr double[1] value;
}

class LiteralExpression extends Expression {
}

class MetadataAccessExpression extends Expression {
}

class MetadataFeature extends Feature, AnnotatingElement {
}

class Metaclass extends Structure {
}

class Structure extends Class {
}

class FeatureReferenceExpression extends Expression {
}

class LiteralInteger extends LiteralExpression {
	attr int[1] value;
}

class FeatureChainExpression extends OperatorExpression {
}

class OperatorExpression extends InvocationExpression {
	attr String[1] operator;
}

class InvocationExpression extends Expression {
	val Expression[*] operand;
}

class LiteralString extends LiteralExpression {
	attr String[1] value;
}

class NullExpresssion extends Expression {
}

class LiteralBoolean extends LiteralExpression {
}

class SelectExpression extends OperatorExpression {
}

class CollectExpression extends OperatorExpression {
}

class LiteralInfinity extends LiteralExpression {
}

class ParameterMembership extends FeatureMembership {
}

class DataType extends Classifier {
}

class SuccessionItemFlow extends ItemFlow, Succession {
}

class Succession extends Connector {
}

class Connector extends Feature, Relationship {
}

class Association extends Classifier, Relationship {
}

class ItemFlow extends Connector, Step {
}

class ItemFlowEnd extends Feature {
}

class ItemFeature extends Feature {
}

class Interaction extends Association, Behavior {
}

class MultiplicityRange extends Multiplicity {
}

class BindingConnector extends Connector {
}

class AssociationStructure extends Association, Structure {
}

class FeatureValue extends OwningMembership {
	attr boolean[1] isInitial = false;
	attr boolean[1] isDefault = false;
}

class Invariant extends BooleanExpression {
	attr boolean[1] isNegated = false;
}

class BooleanExpression extends Expression {
}

class Predicate extends Function {
}

class ReturnParameterMembership extends ParameterMembership {
}

class ResultExpressionMembership extends FeatureMembership {
}

class NamespaceImport extends Import {
}

class MembershipImport extends Import {
}

class Dependency extends Relationship {
	ordered attr String[*] client;
	ordered attr String[*] supplier;
}

class ItemUsage extends OccurrenceUsage {
}

class OccurrenceUsage extends Usage {
	attr boolean[1] isIndividual = false;
	attr PortionKind portionKind;
}

class Usage extends Feature {
	attr boolean[1] isReference;
	attr boolean[1] isVariation;
}

class VariantMembership extends OwningMembership {
}

class Definition extends Classifier {
	attr boolean[1] isVariation;
}

class ReferenceUsage extends Usage {
	attr boolean[1] isRef = false;
	attr boolean[1] isRedefines = false;
}

class AttributeUsage extends Usage {
}

class EnumerationUsage extends AttributeUsage {
}

class EnumerationDefinition extends AttributeDefinition {
}

class AttributeDefinition extends Definition, DataType {
}

class PartUsage extends ItemUsage {
}

class PartDefinition extends ItemDefinition {
}

class ItemDefinition extends OccurrenceDefinition, Structure {
}

class OccurrenceDefinition extends Definition, Class {
	attr boolean[1] isIndividual = false;
}

class LifeClass extends Class {
}

class PortUsage extends OccurrenceUsage {
}

class PortDefinition extends OccurrenceDefinition, Structure {
}

class ConjugatedPortDefinition extends PortDefinition {
}

class PortConjugation extends Conjugation {
}

abstract class ConnectorAsUsage extends Usage, Connector {
}

class FlowConnectionUsage extends ConnectionUsage, ActionUsage, ItemFlow {
}

class ConnectionUsage extends ConnectorAsUsage, PartUsage {
}

class ActionUsage extends OccurrenceUsage, Step {
}

class InterfaceUsage extends ConnectionUsage {
}

class InterfaceDefinition extends ConnectionDefinition {
}

class ConnectionDefinition extends PartDefinition, AssociationStructure {
}

class AllocationUsage extends ConnectionUsage {
}

class AllocationDefinition extends ConnectionDefinition {
}

class StateUsage extends ActionUsage {
	attr boolean[1] isParallel = false;
}

class TransitionUsage extends ActionUsage {
}

class AcceptActionUsage extends ActionUsage {
}

class CalculationUsage extends ActionUsage, Expression {
}

class ConstraintUsage extends OccurrenceUsage, BooleanExpression {
}

class RequirementUsage extends ConstraintUsage {
	attr String reqId;
	attr String[*] text;
}

class RequirementDefinition extends ConstraintDefinition {
	attr String reqId;
	attr String[*] text;
}

class ConstraintDefinition extends OccurrenceDefinition, Predicate {
}

class ConcernUsage extends RequirementUsage {
}

class ConcernDefinition extends RequirementDefinition {
}

class CaseUsage extends CalculationUsage {
}

class CaseDefinition extends CalculationDefinition {
}

class CalculationDefinition extends ActionDefinition, Function {
}

class ActionDefinition extends OccurrenceDefinition, Behavior {
}

class AnalysisCaseUsage extends CaseUsage {
}

class AnalysisCaseDefinition extends CaseDefinition {
}

class VerificationCaseUsage extends CaseUsage {
}

class VerificationCaseDefinition extends CaseDefinition {
}

class UseCaseUsage extends CaseUsage {
}

class UseCaseDefinition extends CaseDefinition {
}

class ViewUsage extends PartUsage {
}

class ViewDefinition extends PartDefinition {
}

class ViewpointUsage extends RequirementUsage {
}

class ViewpointDefinition extends RequirementDefinition {
}

class RenderingUsage extends PartUsage {
}

class RenderingDefinition extends PartDefinition {
}

class MetadataUsage extends ItemUsage, MetadataFeature {
	attr String[*] type_;
	attr String[*] annotatedElement;
}

enum PortionKind {
	timeslice = 0;
	snapshot = 1;
}

class SubjectMembership extends ParameterMembership {
}

class RequirementConstraintMembership extends FeatureMembership {
	attr RequirementConstraintKind[1] kind;
}

enum RequirementConstraintKind {
	assumption = 0;
	requirement = 1;
}

class StakeholderMembership extends ParameterMembership {
}

class ActorMembership extends ParameterMembership {
}

class SatisfyRequirementUsage extends RequirementUsage, AssertConstraintUsage {
}

class AssertConstraintUsage extends ConstraintUsage, Invariant {
}

class FramedConcernMembership extends RequirementConstraintMembership {
}

class EventOccurrenceUsage extends OccurrenceUsage {
}

class ConjugatedPortTyping extends FeatureTyping {
}

class SuccessionAsUsage extends ConnectorAsUsage, Succession {
}

class FlowConnectionDefinition extends ConnectionDefinition, ActionDefinition, Interaction {
}

class BindingConnectorAsUsage extends ConnectorAsUsage, BindingConnector {
}

class SuccessionFlowConnectionUsage extends FlowConnectionUsage, SuccessionItemFlow {
}

class ObjectiveMembership extends FeatureMembership {
}

class ExhibitStateUsage extends StateUsage, PerformActionUsage {
}

class PerformActionUsage extends ActionUsage, EventOccurrenceUsage {
}

enum TransitionFeatureKind {
	trigger = 0;
	guard = 1;
	effect = 2;
}

class StateSubactionMembership extends FeatureMembership {
	attr StateSubactionKind[1] kind;
}

enum StateSubactionKind {
	entry = 0;
	do = 1;
	exit = 2;
}

class StateDefinition extends ActionDefinition {
	attr boolean[1] isParallel = false;
}

class TransitionFeatureMembership extends FeatureMembership {
	attr TransitionFeatureKind[1] kind;
}

class MembershipExpose extends MembershipImport, Expose {
}

abstract class Expose extends Import {
}

class ViewRenderingMembership extends FeatureMembership {
}

class NamespaceExpose extends NamespaceImport, Expose {
}

class RequirementVerificationMembership extends RequirementConstraintMembership {
}

class MetadataDefinition extends ItemDefinition, Metaclass {
	attr String[*] type_;
}

class IncludeUseCaseUsage extends UseCaseUsage, PerformActionUsage {
}

abstract class LoopActionUsage extends ActionUsage {
}

class WhileLoopActionUsage extends LoopActionUsage {
}

class SendActionUsage extends ActionUsage {
}

enum TriggerKind {
	when = 0;
	at = 1;
	after = 2;
}

class DecisionNode extends ControlNode {
}

abstract class ControlNode extends ActionUsage {
}

class ForLoopActionUsage extends LoopActionUsage {
}

class ForkNode extends ControlNode {
}

class TriggerInvocationExpression extends InvocationExpression {
	attr TriggerKind[1] kind;
}

class MergeNode extends ControlNode {
}

class IfActionUsage extends ActionUsage {
}

class AssignmentActionUsage extends ActionUsage {
}

class JoinNode extends ControlNode {
}